# R√®gles Cursor pour Megastore - Application Rails E-commerce

## üéØ Contexte du Projet
- Application Rails 7.0.8 avec Ruby 3.2.2
- Architecture multi-marques (anemone, kenjosset, ttt, unsafe, lecheveublanc, chalky)
- Syst√®me de composants ViewComponent avec structure sidecar
- Frontend moderne avec Stimulus, Turbo, Tailwind CSS
- Base de donn√©es PostgreSQL avec pg_search
- Syst√®me de paiement Stripe
- Int√©gration Instagram et services externes

## üèóÔ∏è Architecture et Conventions

### Structure des Composants ViewComponent
- Utiliser la structure sidecar (fichiers .rb et .slim dans le m√™me dossier)
- H√©riter de `ApplicationComponent` pour les composants de base
- Organiser les composants par modules : `module BrandName::ComponentName`
- Utiliser `renders_many` et `renders_one` pour les composants complexes
- Toujours inclure `# frozen_string_literal: true` en haut des fichiers Ruby

### Conventions de Nommage
- **Composants** : `Component` suffix (ex: `CardComponent`)
- **Modules** : PascalCase (ex: `Dropdown::List`)
- **Fichiers** : snake_case (ex: `card_component.rb`)
- **Variables d'instance** : snake_case avec @ (ex: `@card`)
- **M√©thodes priv√©es** : snake_case sans @

### Styles et CSS
- Utiliser Tailwind CSS avec les couleurs personnalis√©es du projet
- Couleurs principales : `primary`, `secondary`, `light`, `content`, `contrast`, `midgray`, `contour`
- Classes utilitaires : `form-input`, `ttt-logo-bg`
- Polices personnalis√©es : `unsafe`, `anemone`, `kenjosset`, `ttt-title`, `ttt-logo`
- Toujours utiliser les classes CSS personnalis√©es du projet plut√¥t que des couleurs hardcod√©es

## üé® Frontend et JavaScript

### Stimulus Controllers
- Structure standard : `import { Controller } from "@hotwired/stimulus"`
- D√©finir les targets avec `static targets = ["targetName"]`
- Utiliser `static values` pour les donn√©es
- Toujours nettoyer les event listeners dans `disconnect()`
- Pr√©fixer les m√©thodes priv√©es avec `#` (ex: `#getValueInput`)

### Turbo et Hotwire
- Utiliser `data-turbo-frame` pour les mises √† jour partielles
- Impl√©menter les modals avec `turbo-modal` controller
- G√©rer les formulaires avec `requestSubmit()` plut√¥t que `submit()`

### Int√©grations Externes
- Mapbox pour la g√©olocalisation et les cartes
- Stripe pour les paiements
- Instagram API pour les interactions sociales
- Tom Select pour les selects avanc√©s

## üóÑÔ∏è Base de Donn√©es et Mod√®les

### Conventions Rails
- Utiliser `enumerize` pour les √©num√©rations
- Impl√©menter `pg_search` pour la recherche full-text
- Utiliser `money-rails` pour les montants
- Toujours valider les donn√©es avec des validations appropri√©es

### Relations et Associations
- Utiliser les bonnes pratiques Rails pour les associations
- Impl√©menter les callbacks n√©cessaires
- Utiliser les scopes pour les requ√™tes communes

## üîß Configuration et Outils

### RuboCop
- Respecter la configuration `.rubocop.yml`
- Utiliser les guillemets doubles pour les cha√Ænes
- Style trailing pour les points (ex: `object.method`)
- D√©sactiver les r√®gles sp√©cifiques si n√©cessaire avec des commentaires

### Tests
- Utiliser RSpec pour les tests
- Factory Bot pour les factories
- Capybara pour les tests syst√®me
- VCR pour les tests d'int√©gration API

### D√©ploiement
- Configuration Clever Cloud
- Sidekiq pour les jobs en arri√®re-plan
- Redis pour le cache et les sessions

## üìù Templates et Vues

### Slim Templates
- Utiliser Slim comme moteur de template principal
- Structure claire et indent√©e
- Utiliser les helpers Rails appropri√©s
- Impl√©menter l'internationalisation avec `rails-i18n`

### Composants ViewComponent
```ruby
# Structure recommand√©e
module ComponentName
  class Component < ApplicationComponent
    attr_reader :param1, :param2

    def initialize(param1:, param2:)
      super
      @param1 = param1
      @param2 = param2
    end

    private

    def helper_method
      # logique priv√©e
    end
  end
end
```

## üöÄ Bonnes Pratiques G√©n√©rales

### Performance
- Utiliser `includes` pour √©viter les N+1 queries
- Impl√©menter le cache appropri√©
- Optimiser les requ√™tes avec `pg_search`
- Utiliser les background jobs pour les t√¢ches lourdes

### S√©curit√©
- Valider toutes les entr√©es utilisateur
- Utiliser les policies ActionPolicy
- Impl√©menter l'authentification avec Devise
- Prot√©ger contre les attaques CSRF

### Code Quality
- √âcrire du code lisible et maintenable
- Ajouter des commentaires pour la logique complexe
- Utiliser les m√©thodes priv√©es pour encapsuler la logique
- Respecter le principe DRY (Don't Repeat Yourself)

## üéØ Sp√©cificit√©s du Projet

### Multi-marques
- Organiser le code par marque quand n√©cessaire
- Utiliser les namespaces appropri√©s
- Impl√©menter les th√®mes sp√©cifiques √† chaque marque

### E-commerce
- G√©rer les commandes avec Stripe
- Impl√©menter les m√©thodes de livraison
- G√©rer les stocks et les prix
- Syst√®me de r√©servation et de contact

### Int√©grations
- Instagram pour les interactions sociales
- Services de livraison (SendCloud)
- Services comptables (Endi)
- Syst√®me de notifications

## üîç Debugging et D√©veloppement

### Outils de D√©veloppement
- Utiliser `pry-byebug` pour le debugging
- Web Console pour le d√©veloppement
- Stimulus debug mode en d√©veloppement
- Logs d√©taill√©s pour le debugging

### Monitoring
- AppSignal pour le monitoring
- Logs structur√©s
- M√©triques de performance
- Alertes en cas de probl√®me

---

**Note** : Ces r√®gles sont sp√©cifiques √† ce projet et doivent √™tre adapt√©es selon l'√©volution de l'application. Toujours privil√©gier la coh√©rence et la maintenabilit√© du code.
