# frozen_string_literal: true
"""
Script de migration pour faciliter la transition depuis l'ancienne version
"""

import os
import shutil
import argparse
from pathlib import Path


def migrate_old_scripts():
    """Migrer les anciens scripts vers la nouvelle structure"""

    # Cr√©er les nouveaux r√©pertoires
    new_dirs = ["core", "services", "scripts", "logs", "sessions"]
    for dir_name in new_dirs:
        Path(dir_name).mkdir(exist_ok=True)

    print("‚úÖ R√©pertoires cr√©√©s")

    # Sauvegarder les anciens scripts
    backup_dir = Path("backup_old_scripts")
    backup_dir.mkdir(exist_ok=True)

    old_scripts = [
        "base_instagram_client.py",
        "search_hashtags.py",
        "fetch_followers.py",
        "fetch_messages.py",
        "send_message.py",
        "like_random_posts.py",
        "fetch_user_id.py",
        "instagram_engagement_controller.py"
    ]

    for script in old_scripts:
        if Path(script).exists():
            shutil.copy2(script, backup_dir / script)
            print(f"üì¶ Sauvegard√©: {script}")

    print(f"‚úÖ Anciens scripts sauvegard√©s dans {backup_dir}")

    # Cr√©er un fichier de compatibilit√©
    create_compatibility_wrapper()

    print("‚úÖ Migration termin√©e !")
    print("\nüìã Prochaines √©tapes:")
    print("1. Tester les nouveaux scripts")
    print("2. Mettre √† jour vos scripts d'automatisation")
    print("3. Supprimer les anciens scripts si tout fonctionne")
    print("\nüìñ Consultez le README.md pour plus d'informations")


def create_compatibility_wrapper():
    """Cr√©er des wrappers de compatibilit√© pour les anciens scripts"""

    # Wrapper pour search_hashtags.py
    wrapper_content = '''#!/usr/bin/env python3
# frozen_string_literal: true
"""
Wrapper de compatibilit√© pour search_hashtags.py
Utilisez: python scripts/search_hashtags.py √† la place
"""

import sys
import subprocess
from pathlib import Path

def main():
    if len(sys.argv) < 4:
        print('{"error": "Usage: search_hashtags.py <username> <password> <hashtag_name> [action] [amount] [cursor]"}')
        sys.exit(1)

    username = sys.argv[1]
    password = sys.argv[2]
    hashtag_name = sys.argv[3]

    # Construire la nouvelle commande
    cmd = ["python", "scripts/search_hashtags.py", username, password, hashtag_name]

    # Ajouter les options si fournies
    if len(sys.argv) > 4:
        cmd.extend(["--action", sys.argv[4]])
    if len(sys.argv) > 5:
        cmd.extend(["--amount", sys.argv[5]])
    if len(sys.argv) > 6:
        cmd.extend(["--cursor", sys.argv[6]])

    # Ex√©cuter la nouvelle commande
    try:
        subprocess.run(cmd, check=True)
    except subprocess.CalledProcessError as e:
        print(f'{{"error": "Erreur lors de l\'ex√©cution: {e}"}}')
        sys.exit(1)

if __name__ == "__main__":
    main()
'''

    with open("search_hashtags_compat.py", "w") as f:
        f.write(wrapper_content)

    # Rendre le fichier ex√©cutable
    os.chmod("search_hashtags_compat.py", 0o755)

    print("üîß Wrapper de compatibilit√© cr√©√©: search_hashtags_compat.py")


def show_migration_guide():
    """Afficher le guide de migration"""

    guide = """
üîÑ GUIDE DE MIGRATION - Scripts Instagram

üìã CHANGEMENTS PRINCIPAUX:

1. NOUVELLE STRUCTURE:
   ‚îú‚îÄ‚îÄ core/           # Modules de base
   ‚îú‚îÄ‚îÄ services/       # Services sp√©cialis√©s
   ‚îú‚îÄ‚îÄ scripts/        # Scripts d'ex√©cution
   ‚îî‚îÄ‚îÄ logs/           # Fichiers de logs

2. NOUVELLE SYNTAXE:
   Ancien: python search_hashtags.py username password fashion recent 20
   Nouveau: python scripts/search_hashtags.py username password fashion --action recent --amount 20

3. LOGGING AM√âLIOR√â:
   - Logs JSON structur√©s
   - Statistiques d√©taill√©es
   - Tra√ßabilit√© compl√®te

üìù MIGRATION PAR SCRIPT:

search_hashtags.py:
  Ancien: python search_hashtags.py username password fashion recent 20
  Nouveau: python scripts/search_hashtags.py username password fashion --action recent --amount 20

fetch_followers.py:
  Ancien: python fetch_followers.py username password target_user 100
  Nouveau: python scripts/fetch_followers.py username password target_user --limit 100

fetch_messages.py:
  Ancien: python fetch_messages.py username password 24 123456789
  Nouveau: python scripts/fetch_messages.py username password 123456789 --hours-back 24

send_message.py:
  Ancien: python send_message.py username password 123456789 "message"
  Nouveau: python scripts/send_message.py username password 123456789 "message"

like_random_posts.py:
  Ancien: python like_random_posts.py username password 123456789 2
  Nouveau: python scripts/like_posts.py username password --mode random --target 123456789 --count 2

fetch_user_id.py:
  Ancien: python fetch_user_id.py username password handle
  Nouveau: python scripts/fetch_user_id.py username password handle

üîß NOUVELLES FONCTIONNALIT√âS:

1. Arguments nomm√©s (--action, --limit, etc.)
2. Logging unifi√© avec fichiers JSON
3. Gestion d'erreurs am√©lior√©e
4. Validation des param√®tres
5. Statistiques d√©taill√©es
6. Support de la pagination avanc√©e

üìä MONITORING:

Les nouveaux scripts g√©n√®rent automatiquement:
- Fichiers de logs dans logs/
- Sessions Instagram dans sessions/
- Statistiques d√©taill√©es
- R√©sum√©s d'ex√©cution

‚ö†Ô∏è POINTS D'ATTENTION:

1. Les anciens scripts sont sauvegard√©s dans backup_old_scripts/
2. Testez les nouveaux scripts avant de supprimer les anciens
3. Mettez √† jour vos scripts d'automatisation
4. Consultez le README.md pour plus de d√©tails

üöÄ PROCHAINES √âTAPES:

1. Tester les nouveaux scripts
2. Mettre √† jour vos automatisations
3. Supprimer les anciens scripts si tout fonctionne
4. Configurer le monitoring si n√©cessaire
"""

    print(guide)


def main():
    """Fonction principale"""
    parser = argparse.ArgumentParser(description="Migration des scripts Instagram")
    parser.add_argument("--migrate", action="store_true", help="Effectuer la migration")
    parser.add_argument("--guide", action="store_true", help="Afficher le guide de migration")

    args = parser.parse_args()

    if args.migrate:
        migrate_old_scripts()
    elif args.guide:
        show_migration_guide()
    else:
        print("Script de migration des scripts Instagram")
        print("Utilisez --migrate pour effectuer la migration")
        print("Utilisez --guide pour afficher le guide de migration")


if __name__ == "__main__":
    main()
