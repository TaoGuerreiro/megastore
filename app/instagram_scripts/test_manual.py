#!/usr/bin/env python3
# frozen_string_literal: true
"""
Script de test manuel pour les scripts Instagram
Permet de tester les scripts de mani√®re interactive
"""

import sys
import json
import tempfile
import os
from pathlib import Path

# Ajouter le r√©pertoire parent au path pour les imports
sys.path.append(str(Path(__file__).parent))

from core import ConfigLoader, ErrorHandler


def test_script_interactive(script_name, *args):
    """Tester un script de mani√®re interactive"""
    print(f"\nüß™ Test de {script_name}")
    print("=" * 50)

    # Demander les credentials
    username = input("Username Instagram (ou 'test' pour utiliser des donn√©es de test): ").strip()
    password = input("Password Instagram (ou 'test' pour utiliser des donn√©es de test): ").strip()

    if username == "test" or password == "test":
        username = "test_user"
        password = "test_password"
        print("‚ö†Ô∏è  Utilisation de donn√©es de test")

    # Cr√©er le fichier de config
    config = {
        "username": username,
        "password": password,
        "challenge_config": {
            "two_captcha_api_key": "test_key",
            "challenge_email": {
                "email": "test@example.com",
                "password": "test_password",
                "imap_server": "imap.gmail.com"
            }
        }
    }

    config_file = tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False)
    config_file.write(json.dumps(config, indent=2))
    config_file.close()

    try:
        # Construire la commande
        script_path = Path(__file__).parent / "scripts" / script_name
        python_executable = "python3" if os.name != "nt" else "python"

        cmd = [python_executable, str(script_path), config_file.name] + list(args)

        print(f"üöÄ Ex√©cution: {' '.join(cmd)}")
        print("-" * 50)

        # Ex√©cuter le script
        import subprocess
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=60)

        print("üì§ Sortie standard:")
        print(result.stdout)

        if result.stderr:
            print("‚ö†Ô∏è  Erreurs:")
            print(result.stderr)

        print(f"üìä Code de retour: {result.returncode}")

        if result.returncode == 0:
            print("‚úÖ Script ex√©cut√© avec succ√®s")
        else:
            print("‚ùå Script a √©chou√©")

    except subprocess.TimeoutExpired:
        print("‚è∞ Timeout - le script a pris trop de temps")
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
    finally:
        # Nettoyer
        os.unlink(config_file.name)


def test_fetch_user_id():
    """Test de fetch_user_id.py"""
    handle = input("Handle √† tester (d√©faut: instagram): ").strip() or "instagram"
    test_script_interactive("fetch_user_id.py", handle)


def test_search_hashtags():
    """Test de search_hashtags.py"""
    query = input("Requ√™te de recherche (d√©faut: fashion): ").strip() or "fashion"
    limit = input("Limite (d√©faut: 5): ").strip() or "5"
    test_script_interactive("search_hashtags.py", query, "--limit", limit)


def test_send_message():
    """Test de send_message.py"""
    recipient_id = input("ID du destinataire (d√©faut: 999999999 pour test): ").strip() or "999999999"
    message = input("Message (d√©faut: Test message): ").strip() or "Test message"
    test_script_interactive("send_message.py", recipient_id, message)


def test_fetch_messages():
    """Test de fetch_messages.py"""
    recipient_id = input("ID du destinataire (d√©faut: 999999999 pour test): ").strip() or "999999999"
    hours_back = input("Heures en arri√®re (d√©faut: 24): ").strip() or "24"
    test_script_interactive("fetch_messages.py", recipient_id, "--hours-back", hours_back)


def test_fetch_followers():
    """Test de fetch_followers.py"""
    target_user = input("Utilisateur cible (d√©faut: instagram): ").strip() or "instagram"
    limit = input("Limite (d√©faut: 10): ").strip() or "10"
    test_script_interactive("fetch_followers.py", target_user, "--limit", limit)


def test_like_posts():
    """Test de like_posts.py"""
    print("Mode de test:")
    print("1. Hashtag")
    print("2. Utilisateur")
    choice = input("Choix (1-2, d√©faut: 1): ").strip() or "1"

    if choice == "1":
        hashtag = input("Hashtag (d√©faut: fashion): ").strip() or "fashion"
        amount = input("Nombre de posts (d√©faut: 2): ").strip() or "2"
        test_script_interactive("like_posts.py", "--hashtag", hashtag, "--amount", amount)
    else:
        user = input("Utilisateur (d√©faut: instagram): ").strip() or "instagram"
        amount = input("Nombre de posts (d√©faut: 2): ").strip() or "2"
        test_script_interactive("like_posts.py", "--user", user, "--amount", amount)


def test_engagement():
    """Test de engagement.py"""
    print("‚ö†Ô∏è  Test d'engagement - attention aux limites Instagram!")
    confirm = input("Continuer? (y/N): ").strip().lower()

    if confirm == "y":
        # Cr√©er une config d'engagement simple
        config = {
            "username": "test_user",
            "password": "test_password",
            "hashtags": [{"hashtag": "fashion"}],
            "targeted_accounts": [{"account": "instagram"}],
            "challenge_config": {}
        }

        config_file = tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False)
        config_file.write(json.dumps([config], indent=2))
        config_file.close()

        try:
            script_path = Path(__file__).parent / "scripts" / "engagement.py"
            python_executable = "python3" if os.name != "nt" else "python"

            cmd = [python_executable, str(script_path), config_file.name]

            print(f"üöÄ Ex√©cution: {' '.join(cmd)}")

            import subprocess
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=300)

            print("üì§ Sortie standard:")
            print(result.stdout)

            if result.stderr:
                print("‚ö†Ô∏è  Erreurs:")
                print(result.stderr)

        except Exception as e:
            print(f"‚ùå Erreur: {e}")
        finally:
            os.unlink(config_file.name)
    else:
        print("‚ùå Test annul√©")


def check_environment():
    """V√©rifier l'environnement"""
    print("üîç V√©rification de l'environnement...")

    # V√©rifier Python
    python_version = sys.version
    print(f"‚úÖ Python: {python_version}")

    # V√©rifier les modules requis
    required_modules = [
        'instagrapi',
        'requests',
        'json',
        'argparse',
        'pathlib'
    ]

    missing_modules = []
    for module in required_modules:
        try:
            __import__(module)
            print(f"‚úÖ {module}")
        except ImportError:
            print(f"‚ùå {module} manquant")
            missing_modules.append(module)

    # V√©rifier les scripts
    scripts_dir = Path(__file__).parent / "scripts"
    required_scripts = [
        "fetch_user_id.py",
        "search_hashtags.py",
        "send_message.py",
        "fetch_messages.py",
        "fetch_followers.py",
        "like_posts.py",
        "engagement.py"
    ]

    print("\nüìÅ Scripts:")
    for script in required_scripts:
        script_path = scripts_dir / script
        if script_path.exists():
            print(f"‚úÖ {script}")
        else:
            print(f"‚ùå {script} manquant")

    if missing_modules:
        print(f"\n‚ö†Ô∏è  Modules manquants: {', '.join(missing_modules)}")
        print("Installez-les avec: pip install " + " ".join(missing_modules))


def main():
    """Menu principal"""
    print("üß™ Test Manuel des Scripts Instagram")
    print("=" * 50)

    while True:
        print("\nüìã Menu:")
        print("1. V√©rifier l'environnement")
        print("2. Test fetch_user_id.py")
        print("3. Test search_hashtags.py")
        print("4. Test send_message.py")
        print("5. Test fetch_messages.py")
        print("6. Test fetch_followers.py")
        print("7. Test like_posts.py")
        print("8. Test engagement.py")
        print("9. Quitter")

        choice = input("\nChoix (1-9): ").strip()

        if choice == "1":
            check_environment()
        elif choice == "2":
            test_fetch_user_id()
        elif choice == "3":
            test_search_hashtags()
        elif choice == "4":
            test_send_message()
        elif choice == "5":
            test_fetch_messages()
        elif choice == "6":
            test_fetch_followers()
        elif choice == "7":
            test_like_posts()
        elif choice == "8":
            test_engagement()
        elif choice == "9":
            print("üëã Au revoir!")
            break
        else:
            print("‚ùå Choix invalide")


if __name__ == "__main__":
    main()
