#!/usr/bin/env python3
# frozen_string_literal: true
"""
D√©monstration de la gestion des challenges Instagram
"""

import os
import sys
import json
import time
from datetime import datetime

sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from core.client import InstagramClient
from services.challenge_service import ChallengeService

def demo_challenge_service():
    """D√©monstration du service de challenge"""
    print("üé≠ D√©monstration du service de challenge")
    print("=" * 50)

    # Configuration de d√©monstration
    demo_config = {
        "two_captcha_api_key": os.getenv("TWOCAPTCHA_API_KEY"),
        "challenge_email": {
            "email": "demo@example.com",
            "password": "demo_password",
            "imap_server": "imap.gmail.com"
        }
    }

    # Initialiser le service
    challenge_service = ChallengeService(demo_config)
    print("‚úÖ Service de challenge initialis√©")

    # Simuler diff√©rents types de challenges
    print("\nüîç Simulation des diff√©rents types de challenges:")

    # Test de g√©n√©ration de mot de passe
    new_password = challenge_service.change_password_handler("demo_user")
    print(f"   üìù Changement de mot de passe: {new_password}")

    # Test de r√©solution manuelle de CAPTCHA
    print("   üîí CAPTCHA: Mode manuel activ√© (fallback)")

    print("\n‚úÖ D√©monstration termin√©e")

def demo_client_with_challenges():
    """D√©monstration du client avec gestion des challenges"""
    print("\nüé≠ D√©monstration du client Instagram avec challenges")
    print("=" * 50)

    # Demander les identifiants de test
    username = input("Nom d'utilisateur Instagram (ou 'demo' pour simuler): ").strip()
    if username.lower() == 'demo':
        username = "demo_user"
        password = "demo_password"
        print("   Mode simulation activ√©")
    else:
        password = input("Mot de passe Instagram: ").strip()

    # Configuration de challenge
    challenge_config = {
        "two_captcha_api_key": os.getenv("TWOCAPTCHA_API_KEY"),
        "challenge_email": {
            "email": os.getenv("CHALLENGE_EMAIL", "demo@example.com"),
            "password": os.getenv("CHALLENGE_EMAIL_PASSWORD", "demo_password"),
            "imap_server": "imap.gmail.com"
        }
    }

    print(f"\nüîß Configuration de challenge:")
    print(f"   - 2captcha: {'‚úÖ Configur√©' if challenge_config['two_captcha_api_key'] else '‚ùå Non configur√©'}")
    print(f"   - Email: {'‚úÖ Configur√©' if challenge_config['challenge_email']['email'] != 'demo@example.com' else '‚ùå Non configur√©'}")

    try:
        print(f"\nüöÄ Initialisation du client pour {username}...")
        client = InstagramClient(username, password, challenge_config=challenge_config)
        print("‚úÖ Client initialis√© avec gestion des challenges")

        if username != "demo_user":
            # Test de connexion r√©elle
            try:
                user_info = client.client.user_info_by_username(username)
                print(f"‚úÖ Connexion r√©ussie!")
                print(f"   - Nom: {user_info.full_name}")
                print(f"   - Followers: {user_info.follower_count}")
            except Exception as e:
                print(f"‚ö†Ô∏è  Erreur de connexion: {e}")
                print("   (Cela peut √™tre normal si un challenge est demand√©)")

    except Exception as e:
        print(f"‚ùå Erreur lors de l'initialisation: {e}")
        return False

    return True

def demo_configuration_file():
    """D√©monstration avec fichier de configuration"""
    print("\nüé≠ D√©monstration avec fichier de configuration")
    print("=" * 50)

    config_file = "config_challenge_example.json"

    if not os.path.exists(config_file):
        print(f"‚ùå Fichier {config_file} non trouv√©")
        return False

    try:
        with open(config_file, 'r', encoding='utf-8') as f:
            config = json.load(f)

        print(f"‚úÖ Fichier de configuration charg√©: {len(config)} compte(s)")

        for i, account_config in enumerate(config, 1):
            username = account_config.get("username", "N/A")
            has_email = "challenge_email" in account_config
            has_sms = "challenge_sms" in account_config

            print(f"\nüì± Compte {i}: {username}")
            print(f"   - Email challenge: {'‚úÖ' if has_email else '‚ùå'}")
            print(f"   - SMS challenge: {'‚úÖ' if has_sms else '‚ùå'}")

            if has_email:
                email_config = account_config["challenge_email"]
                print(f"   - Email: {email_config.get('email', 'N/A')}")
                print(f"   - Serveur IMAP: {email_config.get('imap_server', 'N/A')}")

        return True

    except Exception as e:
        print(f"‚ùå Erreur lors du chargement: {e}")
        return False

def main():
    """Fonction principale de d√©monstration"""
    print("üé≠ D√©monstration de la gestion des challenges Instagram")
    print("=" * 60)

    # V√©rifier les variables d'environnement
    print("üîç V√©rification de la configuration:")
    twocaptcha_key = os.getenv("TWOCAPTCHA_API_KEY")
    challenge_email = os.getenv("CHALLENGE_EMAIL")

    print(f"   - TWOCAPTCHA_API_KEY: {'‚úÖ Configur√©' if twocaptcha_key else '‚ùå Non configur√©'}")
    print(f"   - CHALLENGE_EMAIL: {'‚úÖ Configur√©' if challenge_email else '‚ùå Non configur√©'}")

    if not twocaptcha_key:
        print("\nüí° Pour activer la r√©solution automatique de CAPTCHA:")
        print("   export TWOCAPTCHA_API_KEY=\"votre_cle_api\"")

    if not challenge_email:
        print("\nüí° Pour activer la r√©cup√©ration de codes par email:")
        print("   export CHALLENGE_EMAIL=\"votre.email@gmail.com\"")
        print("   export CHALLENGE_EMAIL_PASSWORD=\"votre_mot_de_passe\"")

    # D√©monstrations
    demo_challenge_service()

    # Demander si l'utilisateur veut tester avec un vrai compte
    print("\n" + "=" * 60)
    choice = input("Voulez-vous tester avec un vrai compte Instagram? (o/n): ").strip().lower()

    if choice in ['o', 'oui', 'y', 'yes']:
        demo_client_with_challenges()

    # D√©monstration du fichier de configuration
    demo_configuration_file()

    print("\n" + "=" * 60)
    print("üéâ D√©monstration termin√©e!")
    print("\nüìö Pour plus d'informations, consultez README_CHALLENGE.md")
    print("üß™ Pour les tests complets, utilisez test_challenge.py")

if __name__ == "__main__":
    main()
