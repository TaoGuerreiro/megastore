#!/usr/bin/env python3
# frozen_string_literal: true
"""
Service de gestion des challenges Instagram (CAPTCHA, SMS, Email)
"""

import os
import re
import time
import logging
import imaplib
import email
from typing import Optional, Dict, Any
from instagrapi.mixins.challenge import ChallengeChoice

try:
    from twocaptcha import TwoCaptcha
    TWOCAPTCHA_AVAILABLE = True
except ImportError:
    TWOCAPTCHA_AVAILABLE = False
    print("‚ö†Ô∏è  2captcha-python non install√©. Installation: pip install 2captcha-python")


class ChallengeService:
    """Service de gestion automatique des challenges Instagram"""

    def __init__(self, config: Dict[str, Any]):
        """
        Initialiser le service de challenge

        Args:
            config: Configuration contenant les param√®tres de challenge
        """
        self.config = config
        self.logger = logging.getLogger("ChallengeService")

        # Configuration 2captcha
        self.two_captcha_api_key = config.get("two_captcha_api_key")
        if self.two_captcha_api_key and TWOCAPTCHA_AVAILABLE:
            self.solver = TwoCaptcha(self.two_captcha_api_key)
        else:
            self.solver = None
            if not TWOCAPTCHA_AVAILABLE:
                self.logger.warning("2captcha-python non install√©. CAPTCHA manuel requis.")
            elif not self.two_captcha_api_key:
                self.logger.warning("Cl√© API 2captcha non configur√©e. CAPTCHA manuel requis.")

        # Configuration email pour les codes
        self.email_config = config.get("challenge_email", {})
        self.sms_config = config.get("challenge_sms", {})

    def challenge_code_handler(self, username: str, choice: ChallengeChoice) -> Optional[str]:
        """
        Handler principal pour tous les types de challenges

        Args:
            username: Nom d'utilisateur Instagram
            choice: Type de challenge demand√© par Instagram

        Returns:
            Code de r√©solution ou None si √©chec
        """
        self.logger.info(f"Challenge d√©tect√© pour {username}: {choice}")

        try:
            if choice == ChallengeChoice.SMS:
                return self._get_code_from_sms(username)
            elif choice == ChallengeChoice.EMAIL:
                return self._get_code_from_email(username)
            elif choice == ChallengeChoice.CAPTCHA:
                return self._solve_captcha(username)
            else:
                self.logger.warning(f"Type de challenge non g√©r√©: {choice}")
                return None
        except Exception as e:
            self.logger.error(f"Erreur lors de la r√©solution du challenge {choice}: {e}")
            return None

    def change_password_handler(self, username: str) -> str:
        """
        Handler pour le changement de mot de passe forc√©

        Args:
            username: Nom d'utilisateur Instagram

        Returns:
            Nouveau mot de passe g√©n√©r√©
        """
        import random
        import string

        # G√©n√©rer un mot de passe s√©curis√©
        chars = string.ascii_letters + string.digits + "!@#$%^&*"
        new_password = ''.join(random.choice(chars) for _ in range(12))

        self.logger.info(f"Nouveau mot de passe g√©n√©r√© pour {username}")
        return new_password

    def _get_code_from_email(self, username: str) -> Optional[str]:
        """
        R√©cup√©rer le code de v√©rification depuis l'email

        Args:
            username: Nom d'utilisateur Instagram

        Returns:
            Code √† 6 chiffres ou None
        """
        if not self.email_config:
            self.logger.error("Configuration email manquante pour la r√©cup√©ration de code")
            return None

        try:
            # Connexion IMAP
            mail = imaplib.IMAP4_SSL(self.email_config.get("imap_server", "imap.gmail.com"))
            mail.login(self.email_config["email"], self.email_config["password"])
            mail.select("inbox")

            # Rechercher les emails non lus
            result, data = mail.search(None, "(UNSEEN)")
            if result != "OK":
                self.logger.error("Erreur lors de la recherche d'emails")
                return None

            email_ids = data[0].split()

            # Parcourir les emails r√©cents (du plus r√©cent au plus ancien)
            for email_id in reversed(email_ids):
                result, data = mail.fetch(email_id, "(RFC822)")
                if result != "OK":
                    continue

                msg = email.message_from_bytes(data[0][1])

                # Extraire le contenu de l'email
                body = self._extract_email_body(msg)

                # Chercher un code √† 6 chiffres
                code_match = re.search(r'\b(\d{6})\b', body)
                if code_match:
                    code = code_match.group(1)
                    self.logger.info(f"Code trouv√© dans l'email: {code}")

                    # Marquer l'email comme lu
                    mail.store(email_id, "+FLAGS", "\\Seen")
                    mail.close()
                    mail.logout()

                    return code

            mail.close()
            mail.logout()
            self.logger.warning("Aucun code trouv√© dans les emails r√©cents")
            return None

        except Exception as e:
            self.logger.error(f"Erreur lors de la r√©cup√©ration du code email: {e}")
            return None

    def _extract_email_body(self, msg: email.message.Message) -> str:
        """Extraire le contenu texte d'un email"""
        body = ""

        if msg.is_multipart():
            for part in msg.walk():
                if part.get_content_type() == "text/plain":
                    try:
                        body += part.get_payload(decode=True).decode('utf-8', errors='ignore')
                    except:
                        pass
        else:
            try:
                body = msg.get_payload(decode=True).decode('utf-8', errors='ignore')
            except:
                pass

        return body

    def _get_code_from_sms(self, username: str) -> Optional[str]:
        """
        R√©cup√©rer le code de v√©rification depuis SMS
        Note: N√©cessite une configuration sp√©cifique selon le fournisseur

        Args:
            username: Nom d'utilisateur Instagram

        Returns:
            Code √† 6 chiffres ou None
        """
        if not self.sms_config:
            self.logger.error("Configuration SMS manquante pour la r√©cup√©ration de code")
            return None

        # Impl√©mentation d√©pend du service SMS utilis√©
        # Exemple avec Twilio ou autre service
        try:
            # TODO: Impl√©menter selon le service SMS configur√©
            self.logger.warning("R√©cup√©ration SMS non impl√©ment√©e")
            return None
        except Exception as e:
            self.logger.error(f"Erreur lors de la r√©cup√©ration du code SMS: {e}")
            return None

    def _solve_captcha(self, username: str) -> Optional[str]:
        """
        R√©soudre automatiquement un CAPTCHA

        Args:
            username: Nom d'utilisateur Instagram

        Returns:
            Solution du CAPTCHA ou None
        """
        if not self.solver:
            self.logger.warning("Service de r√©solution CAPTCHA non disponible")
            return self._manual_captcha_solve(username)

        try:
            # Note: instagrapi g√®re automatiquement la r√©cup√©ration de l'image CAPTCHA
            # Cette m√©thode sera appel√©e par instagrapi quand il a besoin de r√©soudre un CAPTCHA

            # Pour les CAPTCHA reCAPTCHA
            if hasattr(self, 'recaptcha_sitekey') and hasattr(self, 'recaptcha_url'):
                result = self.solver.recaptcha(
                    sitekey=self.recaptcha_sitekey,
                    url=self.recaptcha_url
                )
                return result['code']

            # Pour les CAPTCHA image classiques
            # (instagrapi g√®re automatiquement la r√©cup√©ration de l'image)
            self.logger.info("CAPTCHA d√©tect√©, r√©solution automatique en cours...")

            # Retourner None pour que instagrapi utilise sa r√©solution automatique
            # ou impl√©menter une logique sp√©cifique selon le type de CAPTCHA
            return None

        except Exception as e:
            self.logger.error(f"Erreur lors de la r√©solution automatique du CAPTCHA: {e}")
            return self._manual_captcha_solve(username)

    def _manual_captcha_solve(self, username: str) -> Optional[str]:
        """
        R√©solution manuelle du CAPTCHA (fallback)

        Args:
            username: Nom d'utilisateur Instagram

        Returns:
            Solution du CAPTCHA saisie manuellement
        """
        print(f"\nüîí CAPTCHA d√©tect√© pour {username}!")
        print("Veuillez r√©soudre le CAPTCHA manuellement dans votre navigateur.")
        print("1. Ouvrez Instagram dans votre navigateur")
        print("2. Connectez-vous avec le compte concern√©")
        print("3. R√©solvez le CAPTCHA affich√©")
        print("4. Une fois r√©solu, le script continuera automatiquement")

        # Attendre que l'utilisateur r√©solve le CAPTCHA
        input("Appuyez sur Entr√©e une fois le CAPTCHA r√©solu...")

        return "MANUAL_RESOLVED"

    def setup_challenge_handlers(self, client):
        """
        Configurer les handlers de challenge sur le client instagrapi

        Args:
            client: Instance du client instagrapi
        """
        client.challenge_code_handler = self.challenge_code_handler
        client.change_password_handler = self.change_password_handler

        self.logger.info("Handlers de challenge configur√©s sur le client")
