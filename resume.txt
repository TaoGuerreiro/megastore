# frozen_string_literal: true

##
# base class for https://viewcomponent.org/
#
# to generate a new component: https://viewcomponent.org/guide/generators.html
# (by default, sidecar is set to true)
class ApplicationComponent < ViewComponent::Base
end

--- End of ./app/components/application_component.rb ---
div class="#{AVATAR_CLASSES} #{@classes}"
  - if @user.avatar.attached?
    = image_tag(@user.avatar.variant(resize_to_limit: [AVATAR_SIZE, AVATAR_SIZE]))
  - elsif @user.initials
    span.p-2 = @user.initials
  - else
    = image_tag("default-avatar.png", alt: "Default profil photo", height: AVATAR_SIZE, width: AVATAR_SIZE)

--- End of ./app/components/avatar/component.html.slim ---
# frozen_string_literal: true
module Avatar
  class Component < ViewComponent::Base
    AVATAR_CLASSES = <<-TXT.squish
      rounded-full overflow-hidden
      bg-black-200 border-2 border-primary
      flex items-center justify-center w-12 h-12
    TXT

    AVATAR_SIZE = 200

    def initialize(user:, classes: nil)
      super
      @user = user
      @classes = classes
    end
  end
end

--- End of ./app/components/avatar/component.rb ---
.rounded-lg.hover:scale-105.transition.relative.group.opacity-100 data-controller='card' data-action="click->card#show"
  / data-replace="{ 'opacity-0': 'opacity-100' }"
  .text-center.text-xs.md:text-3xl.text-light.font-bold.uppercase.group-hover:opacity-100.group-hover:shadow-xl.opacity-0.absolute.top-0.bottom-0.left-0.right-0.rounded-lg.hover:shadow-xl.transition.flex.items-center.justify-center class="bg-secondary/90"
    = title
  = image_tag images[0], class: "cursor-pointer max-w-full rounded-lg group-hover:opacity-10 transition"
  template data-card-target="template"
    .md:px-24.md:py-12.relative.w-screen.h-screen.backdrop-blur-sm.bg-primary/50 data-controller='card'
      i.fa-solid.hover:scale-110.fa-xmark.right-10.top-10.text-3xl.text-contrast.absolute.cursor-pointer.z-50 data-action="click->card#quit"
      .flex.w-full.items-center.h-full
        - if images.count > 1
          i.fa-solid.hover:scale-110.pl-2.fa-chevron-left.text-3xl.text-contrast.cursor-pointer data-action="click->card#previous"
        #images.w-full.h-full.relative.grow data-card-target="images"
          - images.each do |image|
            = link_to link, target: "_blank" do
              = image_tag image, class: "px-2 opacity-0 max-h-[calc(100vh-96px)] cursor-pointer rounded-lg absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2"
        - if images.count > 1
          i.fa-solid.hover:scale-110.pr-2.fa-chevron-right.text-3xl.text-contrast.cursor-pointer data-action="click->card#next"

--- End of ./app/components/cards/card_component.html.slim ---
# frozen_string_literal: true

class Cards::CardComponent < ViewComponent::Base
  attr_accessor :images, :link, :title

  def initialize(data = {})
    @images = data[:images]
    @link = data[:link] || nil
    @title = data[:title] || nil
  end
end

--- End of ./app/components/cards/card_component.rb ---
import { Controller } from "@hotwired/stimulus"

// Connects to data-controller="card"
export default class extends Controller {
  static targets = ["template", "images"]
  connect() {
    if (this.hasImagesTarget) {
      this.imagesTarget.firstChild.firstChild.classList.remove("opacity-0")
    }
  }

  show() {
    const template = this.templateTarget.content.cloneNode(true);
    // console.log(template);
    document.querySelector("#modal").classList.remove("hidden")
    document.querySelector("#modal").appendChild(template)
  }

  quit() {
    document.querySelector("#modal").classList.add("hidden")
    document.querySelector("#modal").innerHTML = ""
  }

  next() {
    console.log("next");
    const imagesContainer = this.imagesTarget;
    const firstImage = imagesContainer.firstChild;
    const secondImage = imagesContainer.firstChild.nextSibling;

    // Déplacer la première image vers la fin
    secondImage.firstChild.classList.add("opacity-100")
    secondImage.firstChild.classList.remove("opacity-0")
    imagesContainer.removeChild(firstImage);
    imagesContainer.appendChild(firstImage);
    firstImage.firstChild.classList.add("opacity-0")
    firstImage.firstChild.classList.remove("opacity-100")
  }

  previous() {
    console.log("previous");
    const imagesContainer = this.imagesTarget;
    const lastImage = imagesContainer.lastChild;
    const firstImage = imagesContainer.firstChild;

    // Déplacer la première image vers la fin
    firstImage.firstChild.classList.add("opacity-0")
    firstImage.firstChild.classList.remove("opacity-100")
    imagesContainer.removeChild(lastImage);
    imagesContainer.insertBefore(lastImage, firstImage);
    lastImage.firstChild.classList.add("opacity-100")
    lastImage.firstChild.classList.remove("opacity-0")
  }
}

--- End of ./app/components/cards/card_controller.js ---
li
  = link_to @path, class: "bg-midgray text-white group flex items-center gap-x-3 rounded-md p-2 text-sm leading-6 font-semibold" do
    div class="#{@icon_classes} text-light"
    = @title

--- End of ./app/components/menu_item/component.html.slim ---
# frozen_string_literal: true

class MenuItem::Component < ViewComponent::Base
  def initialize(path:, title:, icon_classes:)
    @path = path
    @title = title
    @icon_classes = icon_classes
  end
end

--- End of ./app/components/menu_item/component.rb ---
.max-w-sm.w-full.text-secondary.bg-contour.shadow-lg.rounded-lg.pointer-events-auto.mt-0.sm:mt-4.hidden data-notification-action-url="#{ @data.dig(:action, :url) }" data-notification-action-method="#{ @data.dig(:action, :method) }" data-notification-timeout="#{ @data[:timeout] }" data-controller="notification"
  .rounded-lg.shadow-xs.overflow-hidden
    .p-4
      .flex.items-start
        .flex-shrink-0
          . class="h-6 w-6 #{@icon_color_class}"
            i class="fa #{@icon_class}"
        .ml-3.w-0.flex-1 class="pt-0.5"
          p.text-sm.leading-5.font-medium.text-contrast
            = @data[:title]
          - if @data[:body].present?
            p.mt-1.text-sm.leading-5.text-content
              = @data[:body]
          - if @data[:action].present?
            .mt-2 data-notification-target="buttons"
              button data-action="notification#close" class="ml-6 text-sm leading-5 font-medium text-contrast hover:text-content focus:outline-none focus:underline transition ease-in-out duration-150"
                = t('.dismiss')
        .ml-4.flex-shrink-0.flex
          button class="inline-flex text-content focus:outline-none focus:text-content transition ease-in-out duration-150" data-action="notification#close"
            i.fa.solid.fa-xmark.text-xl
    - if @data[:countdown]
      . class="bg-tertiary rounded-lg h-1 w-0" data-notification-target="countdown"

--- End of ./app/components/notifications/component.html.slim ---
# frozen_string_literal: true
module Notifications
  class Component < ViewComponent::Base
    def initialize(type:, data:)
      super
      @type = type
      @data = prepare_data(data)
      @icon_class = icon_class
      @icon_color_class = icon_color_class

      @data[:timeout] ||= 5
    end

    private

    def icon_class
      case @type
      when "success"
        "fa-check-square"
      when "error" || "alert"
        "fa-exclamation-square"
      else
        "fa-info-square"
      end
    end

    def icon_color_class
      case @type
      when "success"
        "text-green-400"
      when "error"
        "text-red-800"
      when "alert"
        "text-red-400"
      else
        "text-content"
      end
    end

    def prepare_data(data)
      case data
      when Hash
        data
      else
        { title: data }
      end
    end
  end
end

--- End of ./app/components/notifications/component.rb ---
import { Controller } from "@hotwired/stimulus"

// Connects to data-controller="card"
export default class extends Controller {
  static targets = ["buttons", "countdown"]

  connect() {
    const timeoutSeconds = parseInt(this.data.get("timeout"));
    if (!this.isPreview) {
      setTimeout(() => {
        this.element.classList.remove('hidden');
        this.element.classList.add('transform', 'text-amber-500', 'ease-out', 'duration-300', 'transition', 'sm:translate-y-2', 'opacity-0', 'sm:translate-y-0', 'sm:translate-x-2');

        // Trigger transition
        setTimeout(() => {
          this.element.classList.remove('opacity-0');
          this.element.classList.add('translate-y-0', 'opacity-100', 'sm:translate-x-0');
        }, 100);

        // Trigger countdown
        if (this.hasCountdownTarget) {
          this.countdownTarget.style.animation = 'notification-countdown linear ' + timeoutSeconds + 's';
        }

      }, 500);
      this.timeoutId = setTimeout(() => {
        this.close();
      }, timeoutSeconds * 1000 + 500);
    }
  }

  run(e) {
    e.preventDefault();
    this.stop();
    let _this = this;
    this.buttonsTarget.innerHTML = '<span class="text-sm leading-5 font-medium text-grey-700">Processing...</span>';

    // Call the action
    fetch(this.data.get("action-url"), {
      method: this.data.get("action-method").toUpperCase(),
      dataType: 'script',
      credentials: "include",
      headers: {
        "X-CSRF-Token": this.csrfToken
      },
    })
      .then(function (response) {
        let content;

        // Example of the response, content should be provided from the controller
        if (response.status === 200) {
          content = '<span class="text-sm leading-5 font-medium text-green-700">Done!</span>'
        } else {
          content = '<span class="text-sm leading-5 font-medium text-red-700">Error!</span>'
        }

        // Set new content
        _this.buttonsTarget.innerHTML = content;

        // Close
        setTimeout(() => {
          _this.close();
        }, 1000);
      });
  }

  stop() {
    clearTimeout(this.timeoutId)
    this.timeoutId = null
  }

  close() {
    // Remove with transition
    this.element.classList.remove('transform', 'ease-out', 'duration-300', 'translate-y-2', 'opacity-0', 'sm:translate-y-0', 'sm:translate-x-2', 'translate-y-0', 'sm:translate-x-0');
    this.element.classList.add('ease-in', 'duration-100')

    // Trigger transition
    setTimeout(() => {
      this.element.classList.add('opacity-0');
    }, 100);

    // Remove element after transition
    setTimeout(() => {
      this.element.remove();
    }, 300);
  }

  get isPreview() {
    return document.documentElement.hasAttribute('data-turbolinks-preview')
  }

  get csrfToken() {
    const element = document.head.querySelector('meta[name="csrf-token"]')
    return element.getAttribute("content")
  }
}

--- End of ./app/components/notifications/notification_controller.js ---
.relative data-controller="#{js_controller}"
  - if @item.is_a?(OrderIntent)
    input[type="radio" id="shipping_method_#{shipping_method.id}" name="order_intent[shipping_method]" value=shipping_method.id data-action="change->autosave#save" class="hidden peer" multiple=true checked=(checked)]
  - else
    input[type="checkbox" id="shipping_method_#{shipping_method.id}" name="item[shipping_method_ids][]" value=shipping_method.id data-action="change->autosave#save" class="hidden peer" multiple=true checked=(checked)]
  label[for="shipping_method_#{shipping_method.id}" class="block py-3 px-2 first:mx-0 mx-2 my-2 border rounded-md cursor-pointer text-content bg-contour peer-checked:bg-tertiary peer-checked:text-white transition-colors duration-300"]
    span.flex.flex-1
      span.flex.flex-col
        span#delivery-method-0-label.block.text-sm.font-medium.text-contrast
          - if @item.is_a?(OrderIntent)
            p.truncate
              | #{t(shipping_method.service_name)}
          - else
            p.truncate
              - if shipping_method.name.length > 27
                | #{shipping_method.name.first(27)}...
              - else
                = shipping_method.name
        span#delivery-method-0-description-0.mt-1.flex.items-center.text-sm.text-midgray data-controller="info-circle"
          . #{shipping_method.description.first(15)}
          = render Tooltip::Component.new(message: shipping_method.description)
        span#delivery-method-0-description-1.mt-6.text-sm.font-medium.text-contrast
          | #{shipping_method.price} €
  span.hidden.peer-checked:block.absolute.right-10.top-1/2.-translate-y-1/2
    i.fa-solid.fa-badge-check.text-3xl.text-primary
  - if field
    .hidden = field.submit "Select volume", formmethod: "post", formaction: shipping_method_checkout_path(id: field.object), data: { "autosave-target": "button" }

--- End of ./app/components/shipping_method/component.html.slim ---
class ShippingMethod::Component < ViewComponent::Base
  def initialize(field:, shipping_method:)
    @field = field
    @shipping_method = shipping_method
    @item = field.object
  end
  attr_reader :field, :shipping_method

  def checked
    if @item.is_a?(OrderIntent)
      @item.shipping_method == @shipping_method
    elsif @item.is_a?(Item)
      @item.shipping_methods.pluck(:id).include?(shipping_method.id)
    else
      false
    end
  end

  def js_controller
    "autosave" if @item.is_a?(OrderIntent)
  end
end

--- End of ./app/components/shipping_method/component.rb ---
.flex.gap-4.text-2xl.items-center
  - if Current.store.instagram_url.present?
    = link_to Current.store.instagram_url, target: "_blank" do
      i.fa-brands.fa-instagram.hover:text-primary class=(@color)
  - if Current.store.facebook_url.present?
    = link_to Current.store.facebook_url, target: "_blank" do
      i.fa-brands.fa-facebook.hover:text-primary class=(@color)

--- End of ./app/components/social_links/component.html.slim ---
# frozen_string_literal: true

class SocialLinks::Component < ViewComponent::Base
  def initialize(color: "text-constrast")
    @color = color
  end
end

--- End of ./app/components/social_links/component.rb ---
div.ml-2.text-primary.absolute.group.relative[
  data-controller="tooltip"
  data-tooltip-content-value=(@message)]
  i.fa-solid.fa-info-circle

--- End of ./app/components/tooltip/component.html.slim ---
class Tooltip::Component < ViewComponent::Base
  def initialize(message:)
    @message = message
  end
end

--- End of ./app/components/tooltip/component.rb ---
import { Controller } from "@hotwired/stimulus"
import tippy from 'tippy.js';

export default class extends Controller {
  static values = {
    content: String,
  }

  connect() {
    tippy(this.element, {
      content: this.contentValue,
    });
  }
}

--- End of ./app/components/tooltip/tooltip_controller.js ---
= turbo_frame_tag "modal" do
  = tag.div data: { controller: "turbo-modal",
                    turbo_modal_target: "modal",
                    action: "turbo:submit-end->turbo-modal#submitEnd keyup@window->turbo-modal#closeWithKeyboard click@window->turbo-modal#closeBackground" },
                    class: "overflow-y-scroll py-12 backdrop-blur-sm fixed top-0 bottom-0 overflow-y-scroll right-0  w-screen break-words z-[1000] md:flex items-center justify-center" do
    .bg-light.rounded-lg.shadow-lg.overflow-y-scroll.w-full.max-w-4xl.px-6.py-6.relative.border.border-contour.md:mt-12
      h2.text-2xl.mb-4 = @title
      = content
      = button_tag "Close", data: { action: "turbo-modal#hideModal" }, type: "button", class: "absolute top-6 right-6" do
        i.fa-solid.fa-times.text-2xl

--- End of ./app/components/turbo_modal/component.html.slim ---
# frozen_string_literal: true

class TurboModal::Component < ViewComponent::Base
  include Turbo::FramesHelper

  def initialize(title:)
    @title = title
  end

end

--- End of ./app/components/turbo_modal/component.rb ---
module Admin
  class AccountsController < ApplicationController
    before_action :authenticate_user!
    before_action :set_user

    layout "admin"

    def show; end

    def edit; end

    def update
      if @user.update(user_params)
        redirect_to admin_account_path, notice: "Account updated successfully"
      else
        render :edit, status: :unprocessable_entity, notice: "Account could not be updated"
      end
    end

    private

    def set_user
      @user = current_user
      authorize! @user
    end

    def user_params
      if params[:user][:password].blank? && params[:user][:password_confirmation].blank?
        params.require(:user).permit(
          :first_name,
          :last_name,
          :username,
          :email,
          :avatar,
        )
      else
        params.require(:user).permit(
          :first_name,
          :last_name,
          :username,
          :email,
          :avatar,
          :password,
          :password_confirmation,
          :avatar
        )
      end
    end
  end
end

--- End of ./app/controllers/admin/accounts_controller.rb ---
module Admin
  class BulkEditItemsController < ApplicationController
    def online
      items = Item.where(id: params[:item_ids].split(','))
      items.update_all(status: :active)
      redirect_to admin_items_path
    end

    def offline
      items = Item.where(id: params[:item_ids].split(','))
      items.update_all(status: :offline)
      redirect_to admin_items_path
    end
  end
end

--- End of ./app/controllers/admin/bulk_edit_items_controller.rb ---
module Admin
  class CategoriesController < ApplicationController
    before_action :authenticate_user!
    before_action :set_category, only: %i[edit update destroy]
    before_action :set_store, only: %i[new create edit update destroy]

    layout "admin"

    def new
      @category = Current.store.categories.build
      authorize! @category
    end

    def create
      @category = Current.store.categories.build(category_params)
      authorize! @category

      if @category.save
        respond_to do |format|
          format.html { redirect_to admin_store_path, notice: "Category was successfully created." }
          format.turbo_stream
        end
      else
        render :new
      end
    end

    def edit; end

    def update
      if @category.update(category_params)
        redirect_to admin_store_path, notice: "Category was successfully updated."
      else
        render :edit
      end
    end

    def destroy
      if @category.destroy
        flash[:notice] = "Category was successfully destroyed."
        respond_to do |format|
          format.html { redirect_to admin_store_path, notice: "Category was successfully destroyed." }
          format.turbo_stream
        end
      else
        redirect_to admin_store_path, alert: "Category was not destroyed."
      end
    end

    private

    def set_category
      @category = Current.store.categories.find(params[:id])
      authorize! @category
    end

    def set_store
      @store = Current.store
    end

    def category_params
      params.require(:category).permit(:name)
    end
  end
end

--- End of ./app/controllers/admin/categories_controller.rb ---
module Admin
  class ItemsController < ApplicationController
    layout "admin"
    before_action :set_shipping_methods, only: [:new, :edit, :create, :update]
    before_action :set_specifications, only: [:new, :edit]

    def index
      @items = filterable(Item, authorized_scope(Item.includes(:photos, :category)))
      authorize! @items
    end

    def new
      @item = Item.new
      authorize! @item
    end

    def create
      @item = Item.new(item_params)
      authorize! @item

      @item.store = current_user.stores.first
      if @item.save
        redirect_to admin_items_path, notice: "Item was successfully created."
      else
        render :new, status: :unprocessable_entity, notice: "Item could not be created."
      end
    end

    def edit
      @item = Item.find(params[:id])
      authorize! @item
    end

    def update
      @item = Item.find(params[:id])
      authorize! @item
      if @item.update(item_params)
        redirect_to admin_items_path, notice: "Item was successfully updated."
      else
        render :edit, status: :unprocessable_entity, notice: "Item could not be updated."
      end
    end

    def destroy
      @item = Item.find(params[:id])
      authorize! @item

      @item.destroy
      redirect_to admin_items_path, notice: "Item was successfully destroyed."
    end

    def remove_photo
      @item = Item.find(params[:id])
      authorize! @item

      # photo = @item.photos.find_by(key: params[:key])
      @photo = @item.photos.attachments.find(params[:photo_id])
      @photo.purge


      respond_to do |format|
        format.html { redirect_to edit_admin_item_path(@item), notice: "Photo was successfully removed." }
        format.turbo_stream
      end
    end

    def archive
      @item = Item.find(params[:id])
      authorize! @item

      @item.archive!
      redirect_to admin_items_path, notice: "Item was successfully archived."
    end

    def unarchive
      @item = Item.find(params[:id])
      authorize! @item

      @item.update(status: :offline)
      redirect_to admin_items_path, notice: "Item was successfully unarchived."
    end

    private

    def set_shipping_methods
      @shipping_methods = authorized_scope(ShippingMethod.all)
    end

    def set_specifications
      @specifications = authorized_scope(Specification.all)
    end

    def item_params
      params.require(:item).permit(:name, :description, :price, :image, :stock, :length, :width, :height, :weight, :category_id, :active, :status, photos: [], shipping_method_ids: [], specification_ids: []).tap do |permitted_params|
        manage_status(permitted_params)
        manage_photos(permitted_params)
        convert_dimensions(permitted_params)
      end
    end

    def manage_status(permitted_params)
      return if permitted_params[:active].nil? || @item&.archived?

      permitted_params[:status] = permitted_params[:active] == "1" ? :active : :offline
    end

    def manage_photos(permitted_params)
      if permitted_params[:photos].reject(&:blank?).first.blank?
        permitted_params.delete(:photos)
      end
    end

    def convert_dimensions(permitted_params)
      [:length, :width, :height].each do |dimension|
        if permitted_params[dimension].present?
          permitted_params[dimension] = permitted_params[dimension].gsub(',', '.').to_f * 10
        end
      end
    end
  end
end

--- End of ./app/controllers/admin/items_controller.rb ---
module Admin
  class OrdersController < ApplicationController
    layout "admin"

    def index
      @orders = authorized_scope(Order.all)
      authorize! @orders
    end

    def show
      @order = Order.find(params[:id])
    end

    def edit
      @order = Order.find(params[:id])
      # @order.update(status: params[:status])
      # redirect_to admin_orders_path
    end

    def update
      @order = Order.find(params[:id])
      if @order.update(order_params)
        respond_to do |format|
          format.html { redirect_to admin_orders_path, notice: "Order was successfully updated." }
          format.turbo_stream
        end
      else
        respond_to do |format|
          format.html { render :edit, status: :unprocessable_entity }
          format.turbo_stream { render turbo_stream: turbo_stream.replace(dom_id(@order), partial: "admin/orders/form", locals: { order: @order })}
        end
      end
    end

    def destroy
      @order = Order.find(params[:id])
      if @order.destroy && !@order.paid?
        redirect_to admin_orders_path, notice: "Order was successfully destroyed."
      else
        redirect_to admin_orders_path, notice: "Order was not destroyed."
      end
    end

    private

    def order_params
      params.require(:order).permit(:status)
    end
  end
end

--- End of ./app/controllers/admin/orders_controller.rb ---
module Admin
  class ShippingMethodsController < ApplicationController
    before_action :authenticate_user!
    before_action :set_shipping_method, only: %i[edit update destroy]
    before_action :set_store, only: %i[new create edit update destroy]

    layout "admin"

    def new
      @shipping_method = Current.store.shipping_methods.build
      authorize! @shipping_method
    end

    def create
      @shipping_method = Current.store.shipping_methods.build(shipping_method_params)
      authorize! @shipping_method

      if @shipping_method.save
        respond_to do |format|
          format.html { redirect_to admin_store_path, notice: "Shipping method was successfully created." }
          format.turbo_stream
        end
      else
        render :new
      end
    end

    def edit; end

    def update
      if @shipping_method.update(shipping_method_params)
        respond_to do |format|
          format.html { redirect_to admin_store_path, notice: "Shipping method was successfully updated." }
          format.turbo_stream
        end
      else
        render :edit
      end
    end

    def destroy
      if @shipping_method.destroy
        flash[:notice] = "Shipping method was successfully destroyed."
        respond_to do |format|
          format.html { redirect_to admin_store_path, notice: "Shipping method was successfully destroyed." }
          format.turbo_stream
        end
      else
        redirect_to admin_store_path, alert: "Shipping method was not destroyed."
      end
    end

    private

    def set_shipping_method
      @shipping_method = Current.store.shipping_methods.find(params[:id])
      authorize! @shipping_method
    end

    def set_store
      @store = Current.store
    end

    def shipping_method_params
      params.require(:shipping_method).permit(:name, :description, :price, :max_weight, :service_name)
    end
  end
end

--- End of ./app/controllers/admin/shipping_methods_controller.rb ---
module Admin
  class SpecificationsController < ApplicationController
    before_action :authenticate_user!
    before_action :set_specification, only: %i[edit update destroy]
    before_action :set_store, only: %i[new create edit update destroy]

    layout "admin"

    def new
      @specification = Current.store.specifications.build
      authorize! @specification
    end

    def create
      @specification = Current.store.specifications.build(specification_params)
      authorize! @specification

      if @specification.save
        respond_to do |format|
          format.html { redirect_to admin_store_path, notice: "Shipping method was successfully created." }
          format.turbo_stream
        end
      else
        render :new
      end
    end

    def edit; end

    def update
      if @specification.update(specification_params)
        respond_to do |format|
          format.html { redirect_to admin_store_path, notice: "Shipping method was successfully updated." }
          format.turbo_stream
        end
      else
        render :edit
      end
    end

    def destroy
      if @specification.destroy
        flash[:notice] = "Shipping method was successfully destroyed."
        respond_to do |format|
          format.html { redirect_to admin_store_path, notice: "Shipping method was successfully destroyed." }
          format.turbo_stream
        end
      else
        redirect_to admin_store_path, alert: "Shipping method was not destroyed."
      end
    end

    private

    def set_specification
      @specification = Current.store.specifications.find(params[:id])
      authorize! @specification
    end

    def set_store
      @store = Current.store
    end

    def specification_params
      params.require(:specification).permit(:name)
    end
  end
end

--- End of ./app/controllers/admin/specifications_controller.rb ---
module Admin
  class StoresController < ApplicationController
    before_action :authenticate_user!
    layout "admin"

    def show
      @store = Current.store
      authorize! @store
      @categories = Current.store.categories
      @shipping_methods = Current.store.shipping_methods
      @specifications = Current.store.specifications
    end

    def edit
      @store = Current.store
      authorize! @store
    end

    def update
      @store = Store.find(params[:id])
      authorize! @store
      if @store.update(store_params)
        respond_to do |format|
          format.html { redirect_to admin_store_path(@store), notice: "Store was successfully updated." }
          format.turbo_stream
        end
      else
        render :edit
      end
    end

    private

    def store_params
      params.require(:store).permit(:name, :meta_title, :meta_description, :about, :facebook_url, :instagram_url, :stripe_webhook_secret_key, :stripe_secret_key, :stripe_publishable_key, :holiday, :holiday_sentence)
    end
  end
end

--- End of ./app/controllers/admin/stores_controller.rb ---
class ApplicationController < ActionController::Base
  include Filterable::FilterableRequest
  before_action :set_current_store, :clean_checkout_cart

  def default_url_options
    { host: Current.store.domain || "localhost:3000" }
  end

  rescue_from ActionPolicy::Unauthorized do |exception|
    redirect_to root_path, alert: t("forbidden_action")
  end

  private

  def after_sign_in_path_for(resource)
    Current.store = Store.find_by(domain: request.domain)

    admin_orders_path
  end

  def set_current_store
    Current.store = Store.find_by(domain: request.domain)
  end

  def clean_checkout_cart
    return if current_user

    if Item.where(id: session[:checkout_items]).blank?
      session.clear
      session[:checkout_items] = []
    end
  end
end

--- End of ./app/controllers/application_controller.rb ---
class CheckoutsController < ApplicationController
  before_action :set_order_intent, only: [:show, :shipping_method, :comfirm_payment]
  before_action :set_order, only: [:show, :shipping_method, :comfirm_payment]

  def add
    session[:checkout_items] = session[:checkout_items] || []
    @item = Item.find(params[:item_id])

    session[:checkout_items] << @item.id
    set_virtual_stock
    respond_to do |format|
      format.html { redirect_to item_path(@item), notice: "#{@item.name} ajouté au panier" }
      format.turbo_stream
    end
  end

  def remove
    session[:checkout_items] = session[:checkout_items] || []
    @item = Item.find(params[:item_id])
    session[:checkout_items].delete_at session[:checkout_items].index @item.id
    @opened = true

    set_virtual_stock
    respond_to do |format|
      format.html { redirect_to item_path(@item), notice: "#{@item.name} supprimé panier" }
      format.turbo_stream
    end
  end

  def show
    StripeConfigurationService.setup
    @items = Checkout.new(session[:checkout_items]).cart
    @order_intent = OrderIntent.new
  end

  def shipping_method
    @order.shipping_method = ShippingMethod.find(params[:order_intent][:shipping_method])
    @order_intent.shipping_method = ShippingMethod.find(params[:order_intent][:shipping_method])

    respond_to do |format|
      format.html { render "checkouts/show", status: :unprocessable_entity }
      format.turbo_stream
    end
  end

  def comfirm_payment
    unless @order_intent.valid?
      respond_to do |format|
        format.html { render "checkouts/show", status: :unprocessable_entity }
        format.turbo_stream
      end
      return
    end

    @order.assign_attributes(
      shipping_address: order_intent_params[:address],
      status: "confirmed",
      shipping_method: ShippingMethod.find(order_intent_params[:shipping_method]),
      user: user
    )

    # Enregistrez l'objet @order en premier
    if @order.save
      session = Stripe::Checkout::Session.create(
        payment_method_types: ['card'],
        customer_email: @order_intent.email,
        line_items: [{
          name: @order.order_items.first.item.name,
          images: nil,
          amount: @order.total_price_cents,
          currency: 'eur',
          quantity: 1
        }],
        success_url: order_url(@order),
        cancel_url: order_url(@order)
      )

      @order.update(checkout_session_id: session.id)

      respond_to do |format|
        format.html { render "checkouts/show", status: :unprocessable_entity }
        format.turbo_stream
      end
    else
      # Gérez l'erreur d'enregistrement de @order ici
      respond_to do |format|
        format.html { render "checkouts/show", status: :unprocessable_entity }
        format.turbo_stream
      end
    end
  end


  private

  def user
    User.find_or_create_by(email: order_intent_params[:email]) do |user|
      user.first_name = order_intent_params[:first_name]
      user.last_name = order_intent_params[:last_name]
      user.password = SecureRandom.hex(10)
    end
  end

  def set_order_intent
    @items = Checkout.new(session[:checkout_items]).cart
    @order_intent = OrderIntent.new(order_intent_params)
  end

  def set_order
    @total = Checkout.new(session[:checkout_items]).sum
    @order = Order.new({
        amount: @total,
        order_items: @items.map { |item| OrderItem.new(item: item[:item], quantity: item[:number]) }
    })
  end

  def order_intent_params
    return {} unless params[:order_intent]

    params.require(:order_intent).permit(:email, :first_name, :last_name, :address, :phone, :shipping_method)
  end

  def set_virtual_stock
    @item = Item.find(params[:item_id])
    cart_stock = Checkout.new(session[:checkout_items]).cart.find { |item| item[:item].id == @item.id }&.[](:number) || 0
    @virtual_stock = @item.stock - cart_stock
  end
end

--- End of ./app/controllers/checkouts_controller.rb ---


--- End of ./app/controllers/concerns/.keep ---
# frozen_string_literal: true

module Filterable
  class FiltersController < ApplicationController
    def create
      model = filterable_context.model
      filters = Filter.parse(model, filterable_params.fetch(:filters, []))
      filters << model.filterable.filter_placeholder

      render html: render_to_string(
        Components::FiltersFormComponent.new(filters: filters, filterable_context: filterable_context)
      )
    end

    def show
      model = filterable_context.model
      @filters = Filter.parse(model, filterable_params.fetch(:filters, []))

      column_update_trigger if trigger?("column_update")

      respond_to do |format|
        format.turbo_stream do
          render Components::ShowTurboStreamComponent.new(filters: @filters, filterable_context: filterable_context)
        end
      end
    end

    private

    def filterable_context
      @filterable_context ||= Context.new(
        params[:filterable_model_name].constantize,
        filterable_params[:context_name],
        URI.parse(filterable_params[:submit_path]).path,
        current_user
      )
    end

    def trigger?(trigger_name)
      params[:trigger].present? && params[:trigger].include?(trigger_name)
    end

    def column_update_trigger
      match_data = params[:trigger].match(/\Acolumn_update_(?<index>\d+)\z/)
      column_index = match_data[:index].to_i
      updated_filter = @filters[column_index]

      updated_filter.set_to_default_operator!
    end
  end
end

--- End of ./app/controllers/filterable/filters_controller.rb ---
# frozen_string_literal: true

module Filterable
  class ViewsController < ApplicationController
    def create
      view = Filterable::View.create!(fitlerable_view_params)

      redirect_to view.to_path(filterable_params[:submit_path])
    end

    def destroy
      view = Filterable::View.find(params[:id])

      view.destroy

      redirect_back_or_to(request.referer)
    end

    private

    def fitlerable_view_params
      params.require(:filterable_view).
        permit(:title, :model, :owner_type, :owner_id, :context_name).
        merge(query: filterable_params)
    end
  end
end

--- End of ./app/controllers/filterable/views_controller.rb ---
class ItemsController < ApplicationController
  before_action :set_virtual_stock, only: [:show]

  def show
    @item = Item.find(params[:id])
  end

  private

  # This method is used to calculate the virtual stock of an item.
  def set_virtual_stock
    @item = Item.find(params[:id])
    cart_stock = Checkout.new(session[:checkout_items]).cart.find { |item| item[:item].id == @item.id }&.[](:number) || 0
    @virtual_stock = @item.stock - cart_stock
  end
end

--- End of ./app/controllers/items_controller.rb ---
class OrdersController < ApplicationController

  def show
    @order = Order.find(params[:id])
    @items = Checkout.new(@order.items.pluck(:id)).cart

    if @order.paid?
      session.clear
      session[:checkout_items] = []
    end
  end
end

--- End of ./app/controllers/orders_controller.rb ---
class PagesController < ApplicationController
  layout "application"

  def home
    @items = Current.store.items.where(status: :active)
    render "#{Current.store.slug}/home"
  end

  def contact
    @contact = Contact.new
    render "#{Current.store.slug}/contact"
  end

  def send_message
    @contact = Contact.new(contact_params)

    if @contact.valid?
      begin
        ContactMailer.with(contact: @contact).new_message_from_store.deliver_now
        redirect_to root_path, notice: "Message bien envoyé", status: :see_other
      rescue => e
        flash[:error] = "Une erreur est survenue lors de l'envoi du message. Veuillez réessayer."
        render "#{Current.store.slug}/contact", status: :unprocessable_entity
      end
    else
      render "#{Current.store.slug}/contact", status: :unprocessable_entity
    end
  end

  def about
    render template: "#{Current.store.slug}/about"
  end

  private

  def contact_params
    params.require(:contact).permit(:email, :full_name, :content)
  end
end

--- End of ./app/controllers/pages_controller.rb ---
class StoresController < ApplicationController
  before_action  :set_store, :set_filters

  def show
    if params[:filters]
      @items = @store.items.includes(:category).where(category: {name: selected_filters}, status: :active).order(created_at: :desc)
    else
      @items = @store.items.where(status: :active).order(created_at: :desc)
    end
  end

  private

  def set_filters
    if params[:filters]
      session[:filters] = params.require(:filters).permit(@store.categories.pluck(:name)).to_h { |key, value| [key, value.to_i] }
    else
      session[:filters]  = @store.categories.pluck(:name).map { |name| [name, 1] }.to_h
    end
  end

  def set_store
    @store = Current.store
  end

  def selected_filters
    session[:filters].select { |k, v| v == "1" }.keys
  end
end

--- End of ./app/controllers/stores_controller.rb ---
module ApplicationHelper
  include Filterable::FilterableHelper

  def home?(params)
    params[:controller] == "pages" && params[:action] == "home"
  end
end

--- End of ./app/helpers/application_helper.rb ---
module MetaTagsHelper
  def meta_title
    content_for?(:meta_title) ? content_for(:meta_title) : Current.store.meta_title
  end

  def meta_description
    content_for?(:meta_description) ? content_for(:meta_description) : Current.store.meta_description
  end

  def meta_image
    meta_image = (content_for?(:meta_image) ? content_for(:meta_image) : Current.store.meta_image)
    # little twist to make it work equally with an asset or a url
    meta_image.starts_with?("http") ? meta_image : image_url(meta_image)
  end
end

--- End of ./app/helpers/meta_tags_helper.rb ---
module PagesHelper
  def images_from_directory(folder)
    Dir.glob("app/assets/images/#{Current.store.slug}/#{folder}/*").map {|path| path.gsub("app/assets/images/", "")}
  end
end

--- End of ./app/helpers/pages_helper.rb ---
// Entry point for the build script in your package.json
import "@hotwired/turbo-rails"
import "./controllers"
import "trix"
import "@rails/actiontext"

--- End of ./app/javascript/application.js ---
function baseFetch(url, method, body = null) {
  fetch(url, {
    method,
    headers: {
      'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.getAttribute('content'),
      'X-Requested-With': 'XMLHttpRequest',
      'Content-Type': 'application/json'
    },
    body
  })
}

export function cookieSetter(name, value) {
  baseFetch('/cookies', 'POST', JSON.stringify({ name, value }))
}

export function cookieRemover(name) {
  baseFetch(`/cookies/${name}`, 'DELETE')
}

--- End of ./app/javascript/components/cookie.js ---
export const loader = `
<div class="flex justify-center items-center">
  <div class="animate-spin inline-block w-4 h-4 border-2 border-r-transparent rounded-full"></div>
  <span class="sr-only">Loading...</span>
</div>
`

export const loaderLg = `
<div class="flex justify-center items-center">
  <div class="animate-spin inline-block w-12 h-12 border-4 border-r-transparent rounded-full"></div>
  <span class="sr-only">Loading...</span>
</div>
`

--- End of ./app/javascript/components/loader.js ---
import { loaderLg } from 'components/loader'

export default class Modal {
  #refresh
  #remoteId
  #remotePath
  #noBackground

  constructor(content, options = {}) {
    this.content = content
    this.#refresh = options.refresh || false
    this.#remoteId = options.remoteId
    this.#remotePath = options.remotePath
    this.#remotePath = options.remotePath
    this.#noBackground = options.noBackground || false
  }

  open() {
    if (!this.element || this.#refresh) {
      this.#build()
    }
    document.body.appendChild(this.element)
  }

  close() {
    setTimeout(() => this.element.remove())
  }

  #build() {
    if (this.#remoteId) {
      this.content = `
      <turbo-frame loading="lazy" id="${this.#remoteId}" src="${this.#remotePath}">
        <div class="p-10 flex justify-center items-center">${loaderLg}</div>
      </turbo-frame>
      `
    }

    this.element = this.#cloneTemplate()

    if (this.#noBackground) {
      const wrapper = this.element.querySelector('[data-modal="wrapper"]');

      ['bg-white', 'shadow-xl', 'px-4', 'pt-5', 'pb-4', 'sm:p-6']
        .forEach(cssClass => wrapper.classList.remove(cssClass))
    }

    this.#insertContent()

    // Listen for clicks on modal for elements having the data-modal="close" attribute
    // This is done this way so the content of the modal can be change, by turbo for example,
    // without having to add again some event listeners
    // This is pretty much the way some Rails-ujs events were catched
    this.element.addEventListener('click', (event) => {
      // loop stops at most when reaching the modal element itself
      let target = event.target
      while (target !== this.element) {
        const modalOption = target.dataset.modal
        if (modalOption) {
          const [action, modifier] = modalOption.split(":")
          if (action === "close") {
            if (modifier === "prevent") {
              event.preventDefault()
            }

            return this.close()
          }
        }

        target = target.parentElement
      }
    })
  }

  #cloneTemplate() {
    const modalTemplate = document.getElementById('modal-template')
    return modalTemplate.content.firstElementChild.cloneNode(true)
  }

  #insertContent() {
    const contentElement = this.element.querySelector('.modal-content')
    contentElement.innerHTML = this.content
  }
}

--- End of ./app/javascript/components/modal.js ---
import { Controller } from "@hotwired/stimulus"

// Connects to data-controller="autosave"
export default class extends Controller {
  static targets = ["button"]

  scale(event) {
    event.currentTarget.classList.remove("w-1/6", "grow", "grayscale");
    event.currentTarget.classList.add("w-1/2");
  }

  unscale(event) {
    event.currentTarget.classList.add("w-1/6", "grow", "grayscale");
    event.currentTarget.classList.remove("w-1/2");
  }
}

--- End of ./app/javascript/controllers/anemone/hover_controller.js ---
import { Application } from "@hotwired/stimulus"

const application = Application.start()

// Configure Stimulus development experience
application.debug = false
window.Stimulus   = application

export { application }

--- End of ./app/javascript/controllers/application.js ---
import { Controller } from "@hotwired/stimulus"

// Connects to data-controller="autosave"
export default class extends Controller {
  static targets = ["button"]

  save() {
    console.log("save");
    this.buttonTarget.click()
  }
}

--- End of ./app/javascript/controllers/autosave_controller.js ---
import { Controller } from "@hotwired/stimulus"

export default class extends Controller {
  static targets = [ "input", "container"]

  connect() {
    this.inputTarget.value = ""
    this.items = []
  }
  select(event) {
    this.containerTarget.classList.remove("hidden");


    if (event.currentTarget.checked) {
      this.items.push(event.currentTarget.id)
    } else {
      this.items = this.items.filter(item => item != event.currentTarget.id)
    }
    this.inputTargets.forEach(input => input.value = this.items.join(","))

    if (this.items.length === 0) {
      this.containerTarget.classList.add("hidden");
    }
  }
}

--- End of ./app/javascript/controllers/bulk_edit_items_controller.js ---
import { Controller } from "@hotwired/stimulus"
import { loader } from "../components/loader"

export default class extends Controller {
  static values = {
    filtersPath: String
  }

  static targets = ['submitBtn', 'conjonction']

  updateColumn({ params }) {
    this.submitBtnTarget.innerHTML = loader
    this.#getValueInput(params.index).disabled = true

    this.#refreshForm(`column_update_${params.index}`)
  }

  updateOperator({ target, params }) {
    const selectedOptions = target.options[target.selectedIndex];
    const operatorNeedsInput = selectedOptions.dataset.needsInput === "true";

    const valueInput = this.#getValueInput(params.index)
    if (operatorNeedsInput) {
      valueInput.style.removeProperty('display')
      valueInput.disabled = false
    } else {
      valueInput.disabled = true
      valueInput.style.display = 'none'
    }
  }

  updateConjonction({ target: { options, selectedIndex }}) {
    const conjonctionText = options[selectedIndex].text
    this.conjonctionTargets.forEach((conjonctionTarget) => {
      conjonctionTarget.innerText = conjonctionText
    })
  }

  removeFilter(event) {
    event.stopPropagation()
    event.currentTarget.parentElement.parentElement.remove()
    this.#refreshForm()
  }

  #getValueInput(index) {
    return this.element.querySelector(`[data-value-input-index="${index}"]`)
  }

  #refreshForm(trigger) {
    const url = new URL(window.origin + this.filtersPathValue)
    const formData = new FormData(this.element)
    for (const [key, value] of formData.entries()) { url.searchParams.append(key, value) }
    for (const field of this.element.elements) { field.disabled = true }

    if (trigger) {
      url.searchParams.append("trigger", trigger)
    }

    fetch(url)
      .then(response => response.text())
      .then(html => Turbo.renderStreamMessage(html))
  }
}

--- End of ./app/javascript/controllers/filterable_controller.js ---
import { Controller } from "@hotwired/stimulus"

export default class extends Controller {
  #SORT_INPUT_ID = "filterable_sort"

  static values = {
    formId: String,
    columnName: String,
  }

  sortColumn() {
    const previousSort = this.#filterableFormElement.querySelector(`#${this.#SORT_INPUT_ID}`)
    let order = 'asc'
    if (previousSort && previousSort.dataset.columnName === this.columnNameValue) {
      order = previousSort.value === 'asc' ? 'desc' : 'asc'
    }
    previousSort?.remove()

    this.#filterableFormElement.insertAdjacentHTML("afterbegin", `
    <input type="hidden"
           value="${order}"
           data-column-name="${this.columnNameValue}"
           autocomplete="off"
           name="filterable[sort][${this.columnNameValue}]"
           id="${this.#SORT_INPUT_ID}">
    `)
    this.#filterableFormElement.submit()
  }

  get #filterableFormElement() {
    return document.getElementById(this.formIdValue)
  }
}

--- End of ./app/javascript/controllers/filterable_sort_controller.js ---
import { Controller } from "@hotwired/stimulus";

export default class extends Controller {
  static targets = ["filtersForm", "closeFiltersFormBtn", "viewsList"]

  static classes = ["hidden"]

  openViews(event) {
    event.stopPropagation();

    if (this._viewsListOpened) {
      return this.closeViews(event);
    }

    this._viewsListOpened = true;
    this.viewsListTarget.classList.remove(this.hiddenClass);
    this.closeViewsListOnClickOutside = this.closeViews.bind(this);
    window.addEventListener("click", this.closeViewsListOnClickOutside);
  }

  closeViews(event) {
    if (this.viewsListTarget.contains(event.target)) {
      return;
    }
    this._viewsListOpened = false;
    this.viewsListTarget.classList.add(this.hiddenClass);
    window.removeEventListener("click", this.closeViewsListOnClickOutside);
    this.closeViewsListOnClickOutside = null;
  }

  openFilters(event) {
    event.stopPropagation();

    if (this._filtersFormOpened) {
      return this.closeFilters(event);
    }

    this._filtersFormOpened = true;
    this.filtersFormTarget.classList.remove(this.hiddenClass);
    this.closeFiltersFormOnClickOutside = this.closeFilters.bind(this);
    window.addEventListener("click", this.closeFiltersFormOnClickOutside);
  }

  closeFilters(event) {
    if (this.filtersFormTarget.contains(event.target) && event.target !== this.closeFiltersFormBtnTarget) {
      return;
    }
    this._filtersFormOpened = false;
    this.filtersFormTarget.classList.add(this.hiddenClass);
    window.removeEventListener("click", this.closeFiltersFormOnClickOutside);
    this.closeFiltersFormOnClickOutside = null;
  }
}

--- End of ./app/javascript/controllers/filterable_wrapper_controller.js ---
// This file is auto-generated by ./bin/rails stimulus:manifest:update
// Run that command whenever you add a new controller or create them with
// ./bin/rails generate stimulus controllerName

import { application } from "./application"

import TrixController from "./trix_controller"
application.register("trix", TrixController)

import AutosaveController from "./autosave_controller"
application.register("autosave", AutosaveController)

import SearchController from "./search_controller"
application.register("search", SearchController)

import TurboModalController from "./turbo_modal_controller"
application.register("turbo-modal", TurboModalController)

import PhotoUploadController from "./photo_upload_controller"
application.register("photo-upload", PhotoUploadController)

import PhotoSwitchController from "./photo_switch_controller"
application.register("photo-switch", PhotoSwitchController)

import CardController from "../../components/cards/card_controller"
application.register("card", CardController)

import NotificationController from "../../components/notifications/notification_controller"
application.register("notification", NotificationController)

import TooltipController from "../../components/tooltip/tooltip_controller"
application.register("tooltip", TooltipController)

import FilterableController from "./filterable_controller"
application.register("filterable", FilterableController)

import FilterableWrapperController from "./filterable_wrapper_controller"
application.register("filterable-wrapper", FilterableWrapperController)

import FilterableSortController from "./filterable_sort_controller"
application.register("filterable-sort", FilterableSortController)

import BulkEditItemsController from "./bulk_edit_items_controller"
application.register("bulk-edit-items", BulkEditItemsController)

import SelectController from "./select_controller"
application.register("select", SelectController)

// UNSAFE

import ScrollController from "./unsafe/scroll_controller"
application.register("scroll", ScrollController)


// SALOME

import HoverController from "./anemone/hover_controller"
application.register("hover", HoverController)

--- End of ./app/javascript/controllers/index.js ---
import { Controller } from "@hotwired/stimulus"

export default class extends Controller {
  static targets = [ "photo" ]

  switch(event) {
    const photoSrc = event.currentTarget.src;
    this.photoTarget.src = photoSrc;
  }
}

--- End of ./app/javascript/controllers/photo_switch_controller.js ---
import { Controller } from "@hotwired/stimulus"

export default class extends Controller {
  static targets = ["photosContainer"]

  connect() {
    this.outputTarget = document.getElementById('photos-container')
  }

  show(e) {
    const input = e.target;
    const files = input.files;
    if (!files) return;

    // Videz le conteneur de photos pour les nouvelles images chargées
    this.photosContainerTarget.innerHTML = '';

    Array.from(files).forEach((file) => {
      const reader = new FileReader();

      reader.onload = (event) => {
        const mainDiv = document.createElement('div');
        mainDiv.className = 'inline-block w-20 h-20 mr-4 bg-contrast rounded-xl relative'; // Ajoutez des classes de style ici

        const imgElement = document.createElement('img');
        imgElement.src = event.target.result;
        imgElement.className = 'w-full h-full object-cover rounded-xl'; // Ajoutez des classes de style ici

        mainDiv.appendChild(imgElement)
        this.photosContainerTarget.appendChild(mainDiv);
      };

      reader.readAsDataURL(file);
    });
  }
}

--- End of ./app/javascript/controllers/photo_upload_controller.js ---
import { Controller } from "@hotwired/stimulus"

export default class extends Controller {
  static targets = ["input", "list"]

  connect() {
    console.log('test');
  }

  fetchAddreses = (event) => {
    const { value } = event.currentTarget;
    const url = `https://api.mapbox.com/geocoding/v5/mapbox.places/${value}.json?types=address&country=fr&autocomplete=true&access_token=${this.authToken}`

    fetch(url)
      .then(response => response.json())
      .then((data) => {
        this.listTarget.innerHTML = "";
        this.listTarget.insertAdjacentHTML('beforeend', this.renderList(data.features));
      })
  }

  renderList = (addresses) => {
    const html = `<ul class="z-50 overflow-hidden opacity-100 shadow-lg text-contrast bg-contour border border-light">` +
      addresses.map((address, index) =>
        `<li data-action="click->search#setAddress" class=" !z-50 py-2 px-3 cursor-pointer address last:rounded-b-lg first:rounded-t-lg hover:rounded-lg hover:bg-content list-group-item address" id="address_${index}" data-address="${address.place_name}">${address.place_name}</li>`
      ).join('') +
      `</ul>`
    return html
  }

  setAddress = (event) => {
    const { innerText } = event.target;
    this.inputTarget.value = innerText;
    this.closeList()
  }

  resetInput = () => {
    if (this.hasListTarget) {
      this.closeList()
    }
    this.inputTarget.value = "";
    this.inputTarget.focus()
  }

  closeList = () => {
    this.listTarget.innerHTML = ""
  }

  navigate = (event) => {
    let { currentTarget } = this;
    if (currentTarget === undefined) {
      currentTarget = -1;
    }
    const addresses = document.querySelectorAll(".address");
    const max = addresses.length;
    const { key } = event;

    if (key === "ArrowUp") {
      this.removeFocus(addresses);
      currentTarget
      currentTarget--;
      currentTarget = currentTarget <= -1 ? max - 1 : currentTarget;
      addresses[currentTarget].classList.toggle('bg-blue-bici', true);
      addresses[currentTarget].classList.toggle('text-contrast', true);
    } else if (key === "ArrowDown") {
      this.removeFocus(addresses);
      currentTarget++;
      currentTarget = currentTarget > max - 1 ? 0 : currentTarget;
      addresses[currentTarget].classList.toggle('bg-blue-bici', true);
      addresses[currentTarget].classList.toggle('text-contrast', true);
    } else if (key === "Enter") {
      event.preventDefault();
      const input = addresses[currentTarget];
      if (!input) {
        return;
      }
      const address = input.innerText;
      this.inputTarget.value = address;
      this.closeList();
    }
    this.currentTarget = currentTarget;
  }

  removeFocus = (addresses) => {
    addresses.forEach((address) => {
      address.classList.toggle('bg-blue-bici', false);
      address.classList.toggle('text-contrast', false);
    })
  }

  get authToken() {
    return document.head.querySelector('meta[name="mapbox_token"]').content;
  }
}

--- End of ./app/javascript/controllers/search_controller.js ---
import { Controller } from '@hotwired/stimulus'
import TomSelect from "tom-select";

export default class extends Controller {
  connect() {
    console.log("oui");
    this.element.classList.remove("form-input")
    new TomSelect(this.element, {
      // options de Tom Select
      plugins: {
        remove_button:{
          title:'Remove this item',
        }
      },
    });
  }
}

--- End of ./app/javascript/controllers/select_controller.js ---
import { Controller } from '@hotwired/stimulus'
import Trix from 'trix'

// Connects to data-controller="trix"
export default class extends Controller {
  static targets = ['editor', 'foregroundColorPicker', 'backgroundColorPicker']

  connect () {
    this.initTrix()
    this.reloadOriginalContent()
  }

  initTrix () {
    if (this.hasForegroundColorPickerTarget) { return }

    Trix.config.blockAttributes.heading1.tagName = 'h3'
    this.addForegroundButtonInToolbar()
    this.addBackgroundButtonInToolbar()
    this.addTextAlignCenterButtonInToolbar()
  }

  reloadOriginalContent () {
    this.editorTarget.reset()
  }

  openForegroundColorPicker () {
    this.foregroundColorPickerTarget.click()
  }

  openBackgroundColorPicker () {
    this.backgroundColorPickerTarget.click()
  }

  foregroundColorChanged () {
    this.editorTarget.editor.activateAttribute('foregroundColor', this.foregroundColorPickerTarget.value)
  }

  backgroundColorChanged () {
    this.editorTarget.editor.activateAttribute('backgroundColor', this.backgroundColorPickerTarget.value)
  }

  addForegroundButtonInToolbar () {
    Trix.config.textAttributes.foregroundColor = {
      styleProperty: 'color',
      inheritable: true
    }

    this.element
      .querySelector('.trix-button-group.trix-button-group--text-tools')
      .insertAdjacentHTML('beforeend', this.foregroundColorButtons)
  }

  addBackgroundButtonInToolbar () {
    Trix.config.textAttributes.backgroundColor = {
      styleProperty: 'backgroundColor',
      inheritable: true
    }

    this.element
      .querySelector('.trix-button-group.trix-button-group--text-tools')
      .insertAdjacentHTML('beforeend', this.backgroundColorButtons)
  }

  addTextAlignCenterButtonInToolbar () {
    Trix.config.blockAttributes.textAlignCenter = {
      tagName: 'centered-div'
    }

    this.element
      .querySelector('.trix-button-group.trix-button-group--block-tools')
      .insertAdjacentHTML('beforeend', this.textAlignButtons)
  }

  get foregroundColorButtons () {
    return `<input type="color" style="width:0;height:0;padding:0;margin-top:20px;visibility:hidden"
                   data-trix-target="foregroundColorPicker" data-action="trix#foregroundColorChanged">
            <button type="button" class="trix-button" data-action="click->trix#openForegroundColorPicker" title="Text color">
              <span class="icon"><i class="fas fa-palette fa-lg"></i></span>
            </button>`
  }

  get backgroundColorButtons () {
    return `<input type="color" style="width:0;height:0;padding:0;margin-top:20px;visibility:hidden"
                   data-trix-target="backgroundColorPicker" data-action="trix#backgroundColorChanged">
            <button type="button" class="trix-button" data-action="click->trix#openBackgroundColorPicker" title="Text background color">
              <span class="icon"><i class="fas fa-fill-drip fa-lg"></i></span>
            </button>`
  }

  get textAlignButtons () {
    return `<button type="button" class="trix-button" data-trix-attribute="textAlignCenter">
              <span class="icon"><i class="fas fa-align-center fa-lg"></i></span>
            </button>`
  }
}

--- End of ./app/javascript/controllers/trix_controller.js ---
import { Controller } from "@hotwired/stimulus"

export default class extends Controller {
  static targets = ["modal"]

  // hide modal
  // action: "turbo-modal#hideModal"
  hideModal() {
    this.element.parentElement.removeAttribute("src")
    // Remove src reference from parent frame element
    // Without this, turbo won't re-open the modal on subsequent click
    this.modalTarget.remove()
  }

  // hide modal on successful form submission
  // action: "turbo:submit-end->turbo-modal#submitEnd"
  submitEnd(e) {
    if (e.detail.success) {
      this.hideModal()
    }
  }

  // hide modal when clicking ESC
  // action: "keyup@window->turbo-modal#closeWithKeyboard"
  closeWithKeyboard(e) {
    if (e.code == "Escape") {
      this.hideModal()
    }
  }

  // hide modal when clicking outside of modal
  // action: "click@window->turbo-modal#closeBackground"
  closeBackground(e) {
    if (e && this.modalTarget.contains(e.target)) {
      return
    }
    this.hideModal()
  }
}

--- End of ./app/javascript/controllers/turbo_modal_controller.js ---
import { Controller } from "@hotwired/stimulus"

export default class extends Controller {
  static targets = ["head", "links"]

  scroll(event) {
    if (this.hasLinksTarget && this.hasHeadTarget) {
      if (event.target.defaultView.pageYOffset > (this.headTarget.offsetHeight)) {
        this.headTarget.classList.add("opacity-0");
        this.linksTarget.classList.remove("hidden");
      } else {
        this.linksTarget.classList.add("hidden");
        this.headTarget.classList.remove("opacity-0");
      }
    }
  }
}

--- End of ./app/javascript/controllers/unsafe/scroll_controller.js ---
class ApplicationRecord < ActiveRecord::Base
  primary_abstract_class
end

--- End of ./app/models/application_record.rb ---
# app/models/category.rb
class Category < ApplicationRecord
  belongs_to :store
end

--- End of ./app/models/category.rb ---
class Checkout
  def initialize(ids)
    @ids = ids
  end

  def cart
    return [] if @ids.nil?

    unique_ids = @ids.uniq
    cart = unique_ids.map do |id|
      next unless Item.where(id: id).present?

      {
        item: Item.find(id),
        number: @ids.count(id)
      }
    end

    cart.first.blank? ? [] : cart
  end

  def sum
    return if @ids.nil?

    unique_ids = @ids.uniq
    sum = 0
    unique_ids.map do |id|
      next unless Item.where(id: id).present?

      sum += Item.find(id).price_cents * @ids.count(id)
    end
    sum / 100.00
  end

  def weight
    return if @ids.nil?

    weight = 0
    @ids.map do |id|
      next unless Item.where(id: id).present?

      weight += Item.find(id).weight
    end
    weight
  end

  def all
    Item.where(id: @ids)
  end
end

--- End of ./app/models/checkout.rb ---


--- End of ./app/models/concerns/.keep ---
# frozen_string_literal: true

##
# == Presentable
#
# This module intend to make the use of {presenters}[https://nithinbekal.com/posts/rails-presenters/]
# as non-intrusive as possible.
# To use it, you need to first create a presenter class in the app/presenters folder.
# Then, include Presentable into the desired class to be presented.
# The presenter class name is inferred from the base class name ; however, if your presenter
# has a custom name, you can change this behavior. See +.presenter+
# Basic usage could be:
#
#   class OrderPresenter < BasePresenter
#     def human_checked_at
#       I18n.l __getobj__.checked_at, format: "%a, %d %B"
#     end
#   end
#
#   class Order
#     include Presentable
#
#     # [...]
#   end
#
#   Order.presenter # => OrderPresenter
#
#   order = Order.find(10) # => #<Order id: 10, checked_at: Wed, 13 Apr 2022 10:30:39.580874000 CEST +02:00>
#
#   order.presented.human_checked_at # => "mer, 13 avril"
#
# See BasePresenter for implementation details.
module Presentable
  extend ActiveSupport::Concern

  included do
    ##
    # Returns presented object, wrap with the class' presenter.
    def presented
      @presented ||= self.class.presenter.new(self)
    end

    ##
    # :singleton-method: presenter
    # Returns the presenter class. Can be overwritten if the
    # presenter's name can't be inferred  from the class' name
    #   class Order
    #     include Presentable
    #   end
    #
    #   Order.presenter # => OrderPresenter
    #
    # In this case, Order.presenter is defined as
    #   class Order
    #     def self.presenter
    #       OrderPresenter
    #     end
    #   end

    # :nodoc: .presenter definition
    class_eval(<<~RUBY, __FILE__, __LINE__ + 1)
      def self.presenter = ::#{name}Presenter # => e.g: def self.presenter = OrderPresenter
    RUBY
  end
end

--- End of ./app/models/concerns/presentable.rb ---
class Contact
  include ActiveModel::Model

  attr_accessor :email, :full_name, :nickname, :content

  def initialize(attr = {})
    @email = attr[:email]
    @full_name = attr[:full_name]
    @content = attr[:content]
  end

  validates :email, presence: true
  validates :content, presence: true
  validates :full_name, presence: true
end

--- End of ./app/models/contact.rb ---
class Current < ActiveSupport::CurrentAttributes
  attribute :store
end

--- End of ./app/models/current.rb ---
# app/models/item.rb
class Item < ApplicationRecord
  include Filterable
  extend Enumerize

  attr_accessor :active

  belongs_to :store
  belongs_to :category
  has_many :item_specifications, dependent: :destroy
  has_many :specifications, through: :item_specifications
  has_many :order_items, dependent: :destroy
  has_many :orders, through: :order_items
  has_many :item_shipments, dependent: :destroy
  has_many :shipping_methods, through: :item_shipments
  has_many_attached :photos

  STATUSES = ["active", "archived", "offline"].freeze
  enumerize :status, in: STATUSES, default: :active, predicates: true

  monetize :price_cents

  filterable do
    columns :name
    columns :description
    columns :price_cents
    columns :stock
    association :category, label_method: :name
  end

  validates :name, presence: true
  validates :description, presence: true
  validates :price, presence: true
  validates :stock, presence: true
  validates :weight, presence: true

  scope :active, -> { where(status: :active) }
  scope :archived, -> { where(status: :archived) }
  scope :offline, -> { where(status: :offline) }

  def self.with_archived
    unscoped.order(:status, :name)
  end

  def soldout?
    stock == 0
  end

  def active?
    status == "active"
  end

  def archived?
    status == "archived"
  end

  def archive!
    update(status: :archived)
  end

  def destroyabled?
    order_items.empty?
  end
end

--- End of ./app/models/item.rb ---
class ItemShipment < ApplicationRecord
  belongs_to :item
  belongs_to :shipping_method
end

--- End of ./app/models/item_shipment.rb ---
class ItemSpecification < ApplicationRecord
  belongs_to :item
  belongs_to :specification
end

--- End of ./app/models/item_specification.rb ---
# app/models/item.rb
class Order < ApplicationRecord
  extend Enumerize
  include Presentable

  belongs_to :user
  belongs_to :shipping_method
  has_many :order_items, dependent: :destroy
  has_many :items, through: :order_items

  monetize :amount_cents

  STATUSES = ["pending", "confirmed", "paid", "canceled", "refunded", "sent"].freeze

  enumerize :status, in: STATUSES, default: "pending", predicates: true

  validates :amount, presence: true
  validates :status, presence: true
  validates :shipping_address, presence: true
  validates :shipping_method, presence: true

  def total_price
    if shipping_method.present?
      amount + shipping_method.price
    else
      amount
    end
  end

  def total_price_cents
    if shipping_method.present?
      amount_cents + shipping_method.price_cents
    else
      amount_cents
    end
  end

  def store
    items.first.store
  end
end

--- End of ./app/models/order.rb ---
class OrderIntent
  include ActiveModel::Model

  attr_accessor :email, :first_name, :last_name, :address, :phone, :shipping_method

  def initialize(attr = {})
    @email = attr[:email]
    @first_name = attr[:first_name]
    @last_name = attr[:last_name]
    @address = attr[:address]
    @phone = attr[:phone]
    @shipping_method = attr[:shipping_method]
  end

  validates :email, presence: true
  validates :first_name, presence: true
  validates :last_name, presence: true
  validates :address, presence: true
  validates :phone, presence: true
  validates :shipping_method, presence: true
end

--- End of ./app/models/order_intent.rb ---
class OrderItem < ApplicationRecord
  belongs_to :item
  belongs_to :order

  after_create :withdraw_stock

  def withdraw_stock
    item.update(stock: item.stock - quantity)
  end
end

--- End of ./app/models/order_item.rb ---
class ShippingMethod < ApplicationRecord
  extend Enumerize

  belongs_to :store
  has_many :item_shipments, dependent: :destroy
  has_many :items, through: :item_shipments

  monetize :price_cents

  SERVICES = [:ups, :poste, :mr, :other].freeze
  enumerize :service_name, in: SERVICES, default: :poste, predicates: true
end

--- End of ./app/models/shipping_method.rb ---
class Specification < ApplicationRecord
  has_many :item_specifications
  has_many :items, through: :item_specifications
  belongs_to :store
end

--- End of ./app/models/specification.rb ---
class Store < ApplicationRecord
  belongs_to :admin, class_name: 'User'
  has_many :categories
  has_many :shipping_methods
  has_many :items
  has_many :specifications
  has_rich_text :about

  encrypts :stripe_publishable_key
  encrypts :stripe_secret_key
  encrypts :stripe_webhook_secret_key

  def holiday?
    holiday
  end

  def availible_methods(ids)
    max_prices = ShippingMethod.where(store: self)
      .joins(item_shipments: :item)
      .where(items: { id: ids })
      .select('shipping_methods.service_name, MAX(shipping_methods.price_cents) as max_price')
      .group('shipping_methods.service_name')
      .to_sql

    most_expensive_shipping_methods = ShippingMethod.where(store: self)
      .joins("INNER JOIN (#{max_prices}) as max_prices ON shipping_methods.service_name = max_prices.service_name AND shipping_methods.price_cents = max_prices.max_price")

    most_expensive_shipping_methods
  end
end

--- End of ./app/models/store.rb ---
class User < ApplicationRecord
  extend Enumerize

  # Include default devise modules. Others available are:
  # :confirmable, :lockable, :timeoutable, :trackable and :omniauthable

  devise :database_authenticatable, :registerable,
         :recoverable, :rememberable, :validatable

  enumerize :role, in: %i[admin user queen], default: :user, predicates: true

  has_many :stores, foreign_key: :admin_id
  validates :first_name, :last_name, presence: true
  has_one_attached :avatar

  def full_name
    "#{first_name&.capitalize} #{last_name&.upcase}".strip.presence || email
  end

  def initials
    "#{first_name&.first}#{last_name&.first}".upcase
  end
end

--- End of ./app/models/user.rb ---
class StripeCheckoutSessionService
  def call(event)
    order = Order.find_by(checkout_session_id: event.data.object.id)
    order.update(status: 'paid')
    Admin::OrderMailer.payment_confirmation(order).deliver_later
    Admin::OrderMailer.new_order(order).deliver_later
  end
end

--- End of ./app/services/stripe_checkout_session_service.rb ---
class StripeConfigurationService
  def self.setup
    Rails.configuration.stripe = {
      publishable_key: Current.store.stripe_publishable_key,
      secret_key:      Current.store.stripe_secret_key,
      signing_secret:  Current.store.stripe_webhook_secret_key
    }

    Stripe.api_key = Rails.configuration.stripe[:secret_key]
    StripeEvent.signing_secret = Rails.configuration.stripe[:signing_secret]

    StripeEvent.configure do |events|
      events.subscribe 'checkout.session.completed', StripeCheckoutSessionService.new
    end
  end
end

--- End of ./app/services/stripe_configuration_service.rb ---
<figure class="attachment attachment--<%= blob.representable? ? "preview" : "file" %> attachment--<%= blob.filename.extension %>">
  <% if blob.representable? %>
    <%= image_tag blob.representation(resize_to_limit: local_assigns[:in_gallery] ? [ 800, 600 ] : [ 1024, 768 ]) %>
  <% end %>

  <figcaption class="attachment__caption">
    <% if caption = blob.try(:caption) %>
      <%= caption %>
    <% else %>
      <span class="attachment__name"><%= blob.filename %></span>
      <span class="attachment__size"><%= number_to_human_size blob.byte_size %></span>
    <% end %>
  </figcaption>
</figure>

--- End of ./app/views/active_storage/blobs/_blob.html.erb ---
.bg-light.min-h-screen.pt-12.md:pt-0
  .mx-auto.max-w-5xl.px-4.sm:px-6.lg:px-8.py-12
    div
      .flex.justify-between
        .px-4.sm:px-0
          h3.text-base.font-semibold.leading-7.text-contrast
            | Informations
          p.mt-1.max-w-2xl.text-sm.leading-6.text-midgray
            | Mon compte
        .flex.items-center
          = button_tag :submit, form: "edit_user_#{@user}", class: "text-midgray" do
            i.fa-solid.fa-check
      .mt-6.border-t.border-contour data-controller="photo-upload"
        = simple_form_for :user, url: admin_account_path, method: :patch, id: "edit_user_#{@user}" do |field|
          = field.input :first_name, label: "Prénom", placeholder: "Prénom"
          = field.input :last_name, label: "Nom", placeholder: "Nom"
          = field.input :email, label: "Email", placeholder: "Email"
          .mb-5
            = field.input :avatar, as: :file, label: false, input_html: { accept: "image/*", class:"hidden" }
            = field.label :avatar do
              .btn.btn-primary.inline Parcourir

          .mb-5 data-photo-upload-target="photosContainer"
            - if @user.avatar.attached?
              .inline-block.w-36.h-36.mr-4.bg-contrast.rounded-xl.relative
                = image_tag @user.avatar, class: "w-full h-full object-cover rounded-xl"
          / = image_tag @user.avatar, class: "rounded-full w-24 h-24 object-cover"

          = field.input :password, label: "Mot de passe", placeholder: "Mot de passe"
          = field.input :password_confirmation, label: "Confirmation du mot de passe", placeholder: "Confirmation du mot de passe"


              / = button_to remove_photo_admin_item_path(@item, photo_id: photo), method: :delete, class: "absolute top-1 right-1 w-6 h-6 bg-red-500 rounded-full flex items-center justify-center text-contrast hover:bg-red-600" do
              /   i.fas.fa-times

--- End of ./app/views/admin/accounts/edit.html.slim ---
.bg-light.min-h-screen.pt-12.md:pt-0
  .mx-auto.max-w-5xl.px-4.sm:px-6.lg:px-8.py-12
    div
      .flex.justify-between
        .px-4.sm:px-0
          h3.text-base.font-semibold.leading-7.text-contrast
            | Informations
          p.mt-1.max-w-2xl.text-sm.leading-6.text-midgray
            | Mon compte
        .flex.items-center
          = link_to edit_admin_account_path(@user), class: "text-midgray" do
            i.fa-solid.fa-pen
      .mt-6.border-t.border-contour
        dl.divide-y.divide-content

          .px-4.py-6.sm:grid.sm:grid-cols-3.sm:gap-4.sm:px-0
            dt.text-sm.font-medium.leading-6.text-contrast
              | Nom
            dd.mt-1.text-sm.leading-6.text-contrast.sm:col-span-2.sm:mt-0
              = @user.first_name
          .px-4.py-6.sm:grid.sm:grid-cols-3.sm:gap-4.sm:px-0
            dt.text-sm.font-medium.leading-6.text-contrast
              | Prénom
            dd.mt-1.text-sm.leading-6.text-contrast.sm:col-span-2.sm:mt-0
              = @user.last_name
          .px-4.py-6.sm:grid.sm:grid-cols-3.sm:gap-4.sm:px-0
            dt.text-sm.font-medium.leading-6.text-contrast
              | Email
            dd.mt-1.text-sm.leading-6.text-contrast.sm:col-span-2.sm:mt-0
              = @user.email
          .px-4.py-6.sm:grid.sm:grid-cols-3.sm:gap-4.sm:px-0
            dt.text-sm.font-medium.leading-6.text-contrast
              | Mots de passe
            dd.mt-1.text-sm.leading-6.text-contrast.sm:col-span-2.sm:mt-0
              = "*" * 10
          .px-4.flex.justify-center.mx-auto.w-1/2
            - if current_user.avatar.attached?
              = image_tag current_user.avatar, class: "w-full h-full object-cover rounded-xl"

--- End of ./app/views/admin/accounts/show.html.slim ---
div.min-w-full.divide-y.divide-contrast
  ul.flex.justify-between
    li.py-3.5.pl-4.pr-3.text-left.text-sm.font-semibold.text-contrast.sm:pl-0 Nom
    li.relative.py-3.5.pl-3.pr-4.sm:pr-0.sr-only Edit
  div
    = turbo_frame_tag :categories do
      - @categories.each do |category|
        = render "admin/categories/category", category: category

--- End of ./app/views/admin/categories/_categories.html.slim ---
= turbo_frame_tag dom_id(category) do
  ul.flex.justify-between.border-b.border-content
    li.whitespace-nowrap.py-4.pl-4.pr-3.text-sm.font-medium.text-contrast.sm:pl-0
      = category.name
    div.w-12.flex
      li.relative.whitespace-nowrap.py-4.pl-3.pr-4.text-right.text-sm.font-medium.sm:pr-0
        = link_to edit_admin_store_category_path(Current.store, category), data: { turbo_frame: dom_id(category)}, class: "text-primary hover:text-primary/90" do
          i.fa-solid.fa-pencil-alt
      li.relative.whitespace-nowrap.py-4.pl-3.pr-4.text-right.text-sm.font-medium.sm:pr-0
        = link_to admin_category_path(category), data: { turbo_method: :delete }, class: "text-primary hover:text-primary/90" do
          i.fa-solid.fa-trash

--- End of ./app/views/admin/categories/_category.html.slim ---
.px-4.sm:px-0
  = simple_form_for [:admin, @store, @category], html: { class: "flex items-center" } do |field|
    = field.input :name, label: "Nom", placeholder: "Nom", wrapper_html: { class: "pt-[20px] mr-2" }, label_html: { class: "mt-[20px]" }
    = button_tag type: :submit do
      i.fa-solid.fa-check.text-2xl.text-midgray

--- End of ./app/views/admin/categories/_form.html.slim ---
= turbo_stream.prepend :categories, partial: "admin/categories/category", locals: { category: @category }
= turbo_stream.update :new_category, ""

--- End of ./app/views/admin/categories/create.turbo_stream.slim ---
= turbo_stream.remove dom_id(@category)

--- End of ./app/views/admin/categories/destroy.turbo_stream.slim ---
= turbo_frame_tag dom_id(@category) do
  = render "form", category: @category

--- End of ./app/views/admin/categories/edit.html.slim ---
= turbo_frame_tag :new_category do
  = render "form", category: @category

--- End of ./app/views/admin/categories/new.html.slim ---
.mt-8.flow-root.max-w-3xl.mx-auto
  .
    .inline-block.min-w-full.py-5.align-middle.sm:px-6.lg:px-8 data-controller="photo-upload"
      = simple_form_for [:admin, @item] do |field|
        h3.mb-6.text-2xl.text-contrast Informations

        = field.input :name, label: "Nom", placeholder: "Nom"
        = field.input :description, as: :text, label: "Description", placeholder: "Description"
        .flex.gap-4
          = field.input :price, label: "Prix", placeholder: "Prix"
          = field.input :stock, label: "Stock", placeholder: "Stock"
          = field.association :category, collection: Current.store.categories.map {|category| [category.name, category.id]}, label: "Catégorie", placeholder: "Catégorie"

        h3.mb-6.text-2xl.text-contrast Spécifications

        .flex.gap-4
          .relative.w-full
            = field.input :width, as: :string, label: "Largeur", placeholder: "Largeur", input_html: { value: number_with_precision(@item&.width&.fdiv(10), precision: 1) }
            span.text-midgray.text-xs.absolute.right-3.top-3
              | cm

          .relative.w-full
            = field.input :height, as: :string, label: "Hauteur", placeholder: "Hauteur", input_html: { value: number_with_precision(@item&.height&.fdiv(10), precision: 1) }
            span.text-midgray.text-xs.absolute.right-3.top-3
              | cm

          .relative.w-full
            = field.input :length, as: :string, label: "Longueur", placeholder: "Longueur", input_html: { value: number_with_precision(@item&.length&.fdiv(10), precision: 1) }
            span.text-midgray.text-xs.absolute.right-3.top-3
              | cm

          .relative.w-full
            = field.input :weight, as: :string, label: "Poids", placeholder: "Poids", input_html: { value: @item.weight }
            span.text-midgray.text-xs.absolute.right-3.top-3
              | gr

        h3.mb-6.text-2xl.text-contrast Photos

        - unless @item.archived?
          = field.input :active, label: "En ligne", as: :boolean, input_html: { checked: @item.active?, class: "w-5 h-5 m-0 p-0 flex checked:bg-primary"}, wrapper_html: {class: "flex items-center"}, label_html: {class: "-top-0.5 left-4"}

        h3.mb-6.text-2xl.text-contrast Spécifications
        = field.association :specifications,
          as: :select,
          label: false,
          collection: @specifications,
          input_html: { multiple: true, data: { controller: "select"} }



        .grid.grid-cols-3.mt-8
          / - if @shipping_methods
          - @shipping_methods.each do |shipping_method|
            div class="relative"
              = render ShippingMethod::Component.new(field: field, shipping_method: shipping_method)


        = field.input :photos, label: false, input_html: { multiple: true, class: "hidden", data: { action: "change->photo-upload#show" }}
        = field.label :photos do
          .btn.btn-primary.inline Ajouter une photo

      .mt-5 data-photo-upload-target="photosContainer"
        - if @item.persisted?
          - @item.photos.each do |photo|
            = turbo_frame_tag dom_id(photo) do
              .inline-block.w-20.h-20.mr-4.bg-contrast.rounded-xl.relative
                = image_tag photo, class: "w-full h-full object-cover rounded-xl"
                = button_to remove_photo_admin_item_path(@item, photo_id: photo), method: :delete, class: "absolute top-1 right-1 w-6 h-6 bg-red-500 rounded-full flex items-center justify-center text-contrast hover:bg-red-600" do
                  i.fas.fa-times

--- End of ./app/views/admin/items/_form.html.slim ---
tr class="#{'disabled' if item.archived?}"
  td.py-4.pl-4.pr-3.sm:pl-0
    = check_box_tag "#{item.id}", item.id, false, class: "w-6 h-6 rounded-md text-primary focus:ring-primary", data: { action: "change->bulk-edit-items#select" }
  td.whitespace-nowrap.py-4.pl-4.pr-3.text-sm.font-medium.text-contrast.text-center.sm:pl-0
    - if item.active?
      i.fas.fa-check.text-green-500.text-lg
    - else
      i.fas.fa-times.text-red-500.text-lg
  td.py-4.pl-4.pr-3.sm:pl-0
    - if item.photos.attached?
      = image_tag item.photos.first.variant(resize_to_fill: [50, 50]), class: "max-w-none w-10 h-10 rounded-md"
  td.whitespace-nowrap.py-4.pl-4.pr-3.text-sm.font-medium.text-contrast.sm:pl-0
    = item.name.size > 30 ? "#{item.name.first(30)}..." : item.name
  td.whitespace-nowrap.px-3.py-4.text-sm.text-contrast
    = "#{item.description.first(30)}..."
  td.whitespace-nowrap.px-3.py-4.text-sm.text-contrast
    = item.category.name
  td.whitespace-nowrap.px-3.py-4.text-sm.text-contrast.text-right
    = number_to_currency(item.price, format: "%n €")
  td.whitespace-nowrap.px-3.py-4.text-sm.text-contrast.text-center
    = item.stock
  td.relative.whitespace-nowrap.py-4.pl-3.pr-4.text-right.text-sm.font-medium.sm:pr-0
    = link_to edit_admin_item_path(item), class: "text-primary hover:text-primary/90" do
      i.fas.fa-pen.text-lg
  td.relative.whitespace-nowrap.py-4.pl-3.pr-4.text-right.text-sm.font-medium.sm:pr-0
    - if item.destroyabled?
      = link_to admin_item_path(item), data: { turbo_method: :delete, turbo_confirm: "Êtes-vous sûr de vouloir supprimer cet article ?" }, class: "text-primary hover:text-primary/90" do
        i.fas.fa-trash.text-lg
    - else
      i.fas.fa-trash.text-lg.disabled

--- End of ./app/views/admin/items/_item.html.slim ---
.bg-light.min-h-screen.pt-12.md:pt-0
  .mx-auto.max-w-7xl.px-8
    .bg-light.py-10
      .px-4.sm:px-6.lg:px-8
        .sm:flex.sm:items-center
          .sm:flex-auto
            h1.text-base.font-semibold.leading-6.text-contrast
              | Éditer l'article
            p.mt-2.text-sm.text-midgray
              | Vous pouvez modifier l'article çi dessous
          .mt-4.sm:ml-16.sm:mt-0.sm:flex-none
            - if @item.archived?
              = link_to unarchive_admin_item_path(@item), data: { turbo_method: :patch }, class: "mr-3 text-content" do
                i.fas.fa-archive.mr-2 class="!text-primary"
                | Désarchiver
            - else
              = link_to archive_admin_item_path(@item), data: { turbo_method: :patch }, class: "mr-3 text-content" do
                i.fas.fa-archive.mr-2 class="!text-primary"
                | Archiver
            = submit_tag "Modifier", form: "edit_item_#{@item.id}", class: "btn btn-primary"
        = render "form"

    h2.text-3xl.mb-4
      | Prévisualisation de l'article
      i.fas.fa-eye.ml-2 class="!text-primary"
    .border-b-2.w-full.border-content
    = render "items/item", item: @item

--- End of ./app/views/admin/items/edit.html.slim ---
.bg-light.min-h-screen.pt-12.md:pt-0
  .mx-auto.max-w-5xl
    .bg-light.py-10
      .px-4.sm:px-6.lg:px-8
        .sm:flex.sm:items-center.mb-6
          .sm:flex-auto
            h1.text-base.font-semibold.leading-6.text-contrast
              | Articles
            p.mt-2.text-sm.text-midgray
              | Liste de toutes les articles de votre boutique.
          .mt-4.sm:ml-16.sm:mt-0.sm:flex-none.fixed.top-10.right-10.z-50
            = link_to "Ajouter un article", new_admin_item_path, class: "btn btn-secondary"
        .flex.items-center
            i.fas.fa-times.text-red-500.text-lg.mr-1.w-6
            .text-sm.text-midgray
              = "#{pluralize(@items.offline.count, "article")} hors ligne"
        .flex.items-center
            i.fas.fa-check.text-green-500.text-lg.mr-1.w-6
            .text-sm.text-midgray
              = "#{pluralize(@items.active.count, "article")} en ligne"
        .flex.items-center
            i.fas.fa-archive.text-gray-500.text-lg.mr-1.w-6
            .text-sm.text-midgray
              = "#{pluralize(@items.archived.count, "article")} archivé"

        .mt-8.flow-root
          = filterable_form_for(Item)
          .-mx-4.-my-2.overflow-x-auto.sm:-mx-6.lg:-mx-8
            .inline-block.min-w-full.py-2.align-middle.sm:px-6.lg:px-8 data-controller="bulk-edit-items"
              .hidden.z-50.rounded.fixed.px-3.py-3.bg-content.right-10.top-20 data-bulk-edit-items-target="container"
                = form_tag online_admin_bulk_edit_items_path, method: :patch do
                  = text_field_tag :item_ids, {}, data: { "bulk-edit-items-target": "input" }, type: :hidden
                  = button_tag "Online", class: "btn btn-menu inline-block" do
                    i.fa-solid.fa-eye.mr-2
                    span
                      | Online
                .border-b.border-primary
                = form_tag offline_admin_bulk_edit_items_path, method: :patch do
                  = text_field_tag :item_ids, {}, data: { "bulk-edit-items-target": "input" }, type: :hidden
                  = button_tag "Offline", class: "btn btn-menu inline-block" do
                    i.fa-solid.fa-eye-slash.mr-2
                    span
                      | Offline
              table.min-w-full.divide-y.divide-contrast
                thead
                  tr
                    th.py-3.5.pl-4.pr-3.text-left.text-sm.font-semibold.text-contrast.sm:pl-0.text-center[scope="col"]
                      span.sr-only
                        | Checkbox
                    th.py-3.5.pl-4.pr-3.text-left.text-sm.font-semibold.text-contrast.sm:pl-0.text-center[scope="col"]
                      span.sr-only
                        | En ligne
                    th.py-3.5.pl-4.pr-3.text-left.text-sm.font-semibold.text-contrast.sm:pl-0.text-center[scope="col"]
                      span.sr-only
                        | Image

                    th.py-3.5.pl-4.pr-3.text-left.text-sm.font-semibold.text-contrast.sm:pl-0[scope="col"]
                      = filterable_sort_button(Item, :name) do
                        | Nom
                    th.px-3.py-3.5.text-left.text-sm.font-semibold.text-contrast[scope="col"]
                      = filterable_sort_button(Item, :description) do
                        | Description
                    th.px-3.py-3.5.text-left.text-sm.font-semibold.text-contrast[scope="col"]
                      = filterable_sort_button(Item, :category_id) do
                        | Catégories
                    th.px-3.py-3.5.text-left.text-sm.font-semibold.text-contrast.text-right[scope="col"]
                      = filterable_sort_button(Item, :price_cents) do
                        | Prix
                    th.px-3.py-3.5.text-left.text-sm.font-semibold.text-contrast[scope="col"]
                      = filterable_sort_button(Item, :stock) do
                        | Stock
                    th.relative.py-3.5.pl-3.pr-4.sm:pr-0[scope="col"]
                      span.sr-only
                        | Edit
                    th.relative.py-3.5.pl-3.pr-4.sm:pr-0[scope="col"]
                      span.sr-only
                        | Remove
                  tbody.divide-y.divide-content
                      - @items.order(:name).each do |item|
                        = render "item", item: item

--- End of ./app/views/admin/items/index.html.slim ---
.bg-light.min-h-screen.pt-12.md:pt-0
  .mx-auto.max-w-7xl
    .bg-light.py-10
      .px-4.sm:px-6.lg:px-8
        .sm:flex.sm:items-center
          .sm:flex-auto
            h1.text-base.font-semibold.leading-6.text-contrast
              | Nouvel article
            p.mt-2.text-sm.text-midgray
              | Vous pouvez un article çi dessous
          .mt-4.sm:mt-0
            = submit_tag "Ajouter", form: "new_item", class: "btn btn-primary"

        = render "form"

--- End of ./app/views/admin/items/new.html.slim ---
= turbo_stream.remove dom_id(@photo)

--- End of ./app/views/admin/items/remove_photo.turbo_stream.slim ---
h1 Nouvelle commande sur le site !

p = "#{@order.user.full_name} vient de passer une commande sur le site."
p = "tel : #{@order.user.phone}"

p Adresses de livraison et de facturation :
p = @order.shipping_address

- @order.items.each do |item|
  p = "#{item.name} x 1 (#{item.price} €)"

p Plus de détails sur la commande ici :
a href="#{admin_order_url(@order, host: @store.domain)}" = admin_order_url(@order, host: @store.domain)

--- End of ./app/views/admin/order_mailer/new_order.slim ---
h1 Merci pour ta commande !

p Nous vous confirmons la prise en charge de votre commande.
p Les délais de livraison sont de 3 à 5 jours ouvrés.

p N'hésites pas à me contacter si tu as le moindre soucis.

p A très vite !

--- End of ./app/views/admin/order_mailer/payment_confirmation.slim ---
= simple_form_for [:admin, @order] do |field|
  = field.input :status, collection: Order::STATUSES.map {|status| [t(status), status]}, label: "Statut"
  = field.button :submit, "Enregistrer", class: "btn btn-primary"

--- End of ./app/views/admin/orders/_form.html.slim ---
= turbo_frame_tag dom_id(order) do
  .flex.flex-row.text-left.text-sm.font-semibold.text-contrast.py-3.5
    .basis-1/6
      = order.presented.id
    .basis-1/6
      = order.user.full_name
    .basis-1/3
      = order.presented.shipping_address
    .basis-1/6
      = number_to_currency(order.amount, format: "%n €")
    .basis-1/6
      = order.presented.status
    .basis-8
      = link_to admin_order_path(order), data: { turbo: :false }, class: "text-primary hover:text-primary/90" do
        i.fa-solid.fa-eye.text-xl
    .basis-8
      = link_to edit_admin_order_path(order), data: { turbo_frame: :modal }, class: "text-primary hover:text-primary/90" do
        i.fa-solid.fa-pen.text-xl

--- End of ./app/views/admin/orders/_order.html.slim ---
= render "order"

--- End of ./app/views/admin/orders/_orders.html.slim ---
= render TurboModal::Component.new(title: "Modifier la commande n° #{@order.id}")
  = render "form"

--- End of ./app/views/admin/orders/edit.html.slim ---
.bg-light.min-h-screen.pt-12.md:pt-0
  = turbo_frame_tag :modal do
  .mx-auto.max-w-5xl
    .bg-light.py-10
      .px-4.sm:px-6.lg:px-8
        .sm:flex.sm:items-center
          .sm:flex-auto
            h1.text-base.font-semibold.leading-6.text-contrast
              | Commandes
            p.mt-2.text-sm.text-midgray
              | Liste de toutes les commandes de votre boutique.
          / TODO
          / .mt-4.sm:ml-16.sm:mt-0.sm:flex-none
          /   button.block.rounded-md.bg-indigo-500.px-3.py-2.text-center.text-sm.font-semibold.text-contrast.hover:bg-indigo-400.focus-visible:outline.focus-visible:outline-2.focus-visible:outline-offset-2.focus-visible:outline-indigo-500[type="button"]
          /     | Ajouter une commande
        .mt-8.flow-root
          .-mx-4.-my-2.overflow-x-auto.sm:-mx-6.lg:-mx-8
            .inline-block.min-w-full.py-2.align-middle.sm:px-6.lg:px-8
              .flex-container.min-w-full.divide-y.divide-contrast
                .flex.flex-row.text-left.text-sm.font-semibold.text-contrast.py-3.5
                  .basis-1/6
                    | Ref.
                  .basis-1/6
                    | Client
                  .basis-1/3
                    | Adresse
                  .basis-1/6
                    | Prix
                  .basis-1/6
                    | Statut
                  .basis-8
                    span.sr-only
                      | Show
                  .basis-8
                    span.sr-only
                      | Edit
                .divide-y.divide-content
                  = render @orders

--- End of ./app/views/admin/orders/index.html.slim ---
= turbo_frame_tag :modal do
  .bg-light.min-h-screen.py-12.md:pt-0
    .mx-auto.max-w-5xl
      .bg-light.py-10
        .px-4.sm:px-6.lg:px-8
          .sm:flex.sm:items-center
            .sm:flex-auto
              h1.text-base.font-semibold.leading-6.text-contrast
                | Détails de la commande
            .mt-4.sm:ml-16.sm:mt-0.sm:flex-none
              = link_to admin_order_path(@order), data: { turbo_method: :delete } do
                i.fa-solid.fa-trash.text-xl
      section.mt-10.border-t.border-content[aria-labelledby="order-heading"]
        h2#order-heading.sr-only Your order
        h3.sr-only Items
        - Checkout.new(@order.items.pluck(:id)).cart.each do |item|
          = render "orders/card", item: item

        .sm:ml-40.sm:pl-6
          h3.sr-only Your information
          h4.sr-only Addresses
          dl.grid.grid-cols-2.gap-x-6.py-10.text-sm
            div
              dt.font-medium.text-contrast Adresse de livraison
              dd.mt-2.text-contrast
                address.not-italic
                  span.block = @order.shipping_address
            div
              dt.font-medium.text-contrast Adresse de facturation
              dd.mt-2.text-contrast
                address.not-italic
                  span.block = @order.shipping_address

          h4.sr-only Payment
          dl.grid.grid-cols-2.gap-x-6.border-t.border-content.py-10.text-sm
            div
              dt.font-medium.text-contrast Methode de paiement
              dd.mt-2.text-contrast
                p Stripe

            div
              dt.font-medium.text-contrast Methode de livraison
              dd.mt-2.text-contrast
                p = @order.shipping_method.name
                p = @order.shipping_method.description

          h3.sr-only Summary
          dl.space-y-6.border-t.border-content.pt-10.text-sm
            .flex.justify-between
              dt.font-medium.text-contrast Sous-total
              dd.text-contrast = number_to_currency(@order.amount, format: "%n €")
            .flex.justify-between
              dt.font-medium.text-contrast Livraison
              dd.text-contrast = number_to_currency(@order.shipping_method.price, format: "%n €")
            .flex.justify-between
              dt.font-medium.text-contrast Total
              dd.text-contrast = number_to_currency(@order.amount + @order.shipping_method.price, format: "%n €")

--- End of ./app/views/admin/orders/show.html.slim ---
= turbo_stream.replace dom_id(@order), partial: "admin/orders/order", locals: { order: @order }

--- End of ./app/views/admin/orders/update.turbo_stream.slim ---
.px-4.sm:px-0
  = simple_form_for [:admin, @store, @shipping_method], html: { class: "" } do |field|
    = field.input :name, label: "Nom", placeholder: "Nom"
    = field.input :service_name, collection: ShippingMethod.service_name.values.map {|service| [t(service), service]}, label: "Service", placeholder: "Service", include_blank: false
    = field.input :description, as: :text, label: "Description", placeholder: "Description"
    .flex.gap-4
      = field.input :price, label: "Prix (€)", placeholder: "Prix (€)"
      .relative.w-full
        = field.input :max_weight, label: "Poids max", placeholder: "Poids max"
        span.text-midgray.text-xs.absolute.right-3.top-3
          | gr
    = button_tag type: :submit, class: "text-right w-full" do
      i.fa-solid.fa-check.text-2xl.text-midgray

--- End of ./app/views/admin/shipping_methods/_form.html.slim ---
= turbo_frame_tag dom_id(shipping_method) do
  ul.flex.justify-between.border-b.border-content
    li.whitespace-nowrap.py-4.pl-4.pr-3.text-sm.font-medium.text-contrast.sm:pl-0.w-48
      = t(shipping_method.service_name)
    li.whitespace-nowrap.py-4.pl-4.pr-3.text-sm.font-medium.text-contrast.sm:pl-0.w-48
      = shipping_method.name
    li.whitespace-nowrap.py-4.pl-4.pr-3.text-sm.font-medium.text-contrast.sm:pl-0.w-20
      = number_to_currency(shipping_method.price, format: "%n €")
    / li.whitespacse-nowrap.py-4.pl-4.pr-3.text-sm.font-medium.text-contrast.sm:pl-0.w-10

    div.w-12.flex
      li.relative.whitespace-nowrap.py-4.pl-3.pr-4.text-right.text-sm.font-medium.sm:pr-0
        = link_to edit_admin_store_shipping_method_path(Current.store, shipping_method), data: { turbo_frame: "modal"}, class: "text-primary hover:text-primary/90" do
          i.fa-solid.fa-pencil-alt
      li.relative.whitespace-nowrap.py-4.pl-3.pr-4.text-right.text-sm.font-medium.sm:pr-0
        = link_to admin_shipping_method_path(shipping_method), data: { turbo_method: :delete }, class: "text-primary hover:text-primary/90" do
          i.fa-solid.fa-trash

--- End of ./app/views/admin/shipping_methods/_shipping_method.html.slim ---
div.min-w-full.divide-y.divide-contrast
  ul.flex.justify-between
    li.py-3.5.pl-4.pr-3.text-left.text-sm.font-semibold.text-contrast.sm:pl-0.w-48 Service
    li.py-3.5.pl-4.pr-3.text-left.text-sm.font-semibold.text-contrast.sm:pl-0.w-48 Nom
    li.py-3.5.pl-4.pr-3.text-left.text-sm.font-semibold.text-contrast.sm:pl-0.w-20 Prix
    li.relative.py-3.5.pl-3.pr-4.sm:pr-0.w-10
      span.sr-only
        | Edit
  div
    = turbo_frame_tag :shipping_methods do
      - @shipping_methods.each do |shipping_method|
        = render "admin/shipping_methods/shipping_method", shipping_method: shipping_method

--- End of ./app/views/admin/shipping_methods/_shipping_methods.html.slim ---
= turbo_stream.prepend :shipping_methods, partial: "admin/shipping_methods/shipping_method", locals: { shipping_method: @shipping_method }
= turbo_stream.update :new_shipping_method, ""

--- End of ./app/views/admin/shipping_methods/create.turbo_stream.slim ---
= turbo_stream.remove dom_id(@shipping_method)

--- End of ./app/views/admin/shipping_methods/destroy.turbo_stream.slim ---
= render TurboModal::Component.new(title: "Editer #{@shipping_method.name}") do
  = render "form", shipping_method: @shipping_method

--- End of ./app/views/admin/shipping_methods/edit.html.slim ---
= render TurboModal::Component.new(title: "Nouveau moyen de livraison") do
  = render "form", shipping_method: @shipping_method

--- End of ./app/views/admin/shipping_methods/new.html.slim ---
= turbo_stream.replace dom_id(@shipping_method), partial: "admin/shipping_methods/shipping_method", locals: { shipping_method: @shipping_method }

--- End of ./app/views/admin/shipping_methods/update.turbo_stream.slim ---
.px-4.sm:px-0
  = simple_form_for [:admin, @store, @specification], html: { class: "" } do |field|
    = field.input :name, label: "Nom", placeholder: "Nom"
    = button_tag type: :submit, class: "text-right w-full" do
      i.fa-solid.fa-check.text-2xl.text-midgray

--- End of ./app/views/admin/specifications/_form.html.slim ---
= turbo_frame_tag dom_id(specification) do
  ul.flex.justify-between.border-b.border-content
    li.whitespace-nowrap.py-4.pl-4.pr-3.text-sm.font-medium.text-contrast.sm:pl-0
      = specification.name
    div.w-12.flex
      li.relative.whitespace-nowrap.py-4.pl-3.pr-4.text-right.text-sm.font-medium.sm:pr-0
        = link_to edit_admin_store_specification_path(Current.store, specification), data: { turbo_frame: "modal"}, class: "text-primary hover:text-primary/90" do
          i.fa-solid.fa-pencil-alt
      li.relative.whitespace-nowrap.py-4.pl-3.pr-4.text-right.text-sm.font-medium.sm:pr-0
        = link_to admin_specification_path(specification), data: { turbo_method: :delete }, class: "text-primary hover:text-primary/90" do
          i.fa-solid.fa-trash

--- End of ./app/views/admin/specifications/_specification.html.slim ---
div.min-w-full.divide-y.divide-contrast
  ul.flex.justify-between
    li.py-3.5.pl-4.pr-3.text-left.text-sm.font-semibold.text-contrast.sm:pl-0 Nom
    li.relative.py-3.5.pl-3.pr-4.sm:pr-0.sr-only Edit
  div
    = turbo_frame_tag :specifications do
      - @specifications.each do |specification|
        = render "admin/specifications/specification", specification: specification

--- End of ./app/views/admin/specifications/_specifications.html.slim ---
= turbo_stream.prepend :specifications, partial: "admin/specifications/specification", locals: { specification: @specification }
= turbo_stream.update :new_specification, ""

--- End of ./app/views/admin/specifications/create.turbo_stream.slim ---
= turbo_stream.remove dom_id(@specification)

--- End of ./app/views/admin/specifications/destroy.turbo_stream.slim ---
= render TurboModal::Component.new(title: "Editer #{@specification.name}") do
  = render "form", specification: @specification

--- End of ./app/views/admin/specifications/edit.html.slim ---
= render TurboModal::Component.new(title: "Nouvelle spécification") do
  = render "form", specification: @specification

--- End of ./app/views/admin/specifications/new.html.slim ---
= turbo_stream.replace dom_id(@specification), partial: "admin/specifications/specification", locals: { specification: @specification }

--- End of ./app/views/admin/specifications/update.turbo_stream.slim ---
= turbo_frame_tag dom_id(@store)
  dl.divide-y.divide-content
    .px-4.py-6.sm:grid.sm:grid-cols-3.sm:gap-4.sm:px-0
      dt.text-sm.font-medium.leading-6.text-contrast
        | Nom
      dd.mt-1.text-sm.leading-6.text-contrast.sm:col-span-2.sm:mt-0
        = @store.name
    .px-4.py-6.sm:grid.sm:grid-cols-3.sm:gap-4.sm:px-0
      dt.text-sm.font-medium.leading-6.text-contrast
        | Meta Title
      dd.mt-1.text-sm.leading-6.text-contrast.sm:col-span-2.sm:mt-0
        = @store.meta_title
    .px-4.py-6.sm:grid.sm:grid-cols-3.sm:gap-4.sm:px-0
      dt.text-sm.font-medium.leading-6.text-contrast
        | Meta Description
      dd.mt-1.text-sm.leading-6.text-contrast.sm:col-span-2.sm:mt-0
        = @store.meta_description
    .px-4.py-6.sm:grid.sm:grid-cols-3.sm:gap-4.sm:px-0
      dt.text-sm.font-medium.leading-6.text-contrast
        | URL Instagram
      dd.mt-1.text-sm.leading-6.text-contrast.sm:col-span-2.sm:mt-0
        = @store.instagram_url
    .px-4.py-6.sm:grid.sm:grid-cols-3.sm:gap-4.sm:px-0
      dt.text-sm.font-medium.leading-6.text-contrast
        | URL Facebook
      dd.mt-1.text-sm.leading-6.text-contrast.sm:col-span-2.sm:mt-0
        = @store.facebook_url

    .px-4.py-6.sm:grid.sm:grid-cols-3.sm:gap-4.sm:px-0
      dt.text-sm.font-medium.leading-6.text-contrast
        | Stripe publishable key
      dd.mt-1.text-sm.leading-6.text-contrast.sm:col-span-2.sm:mt-0
        = @store.stripe_publishable_key
    .px-4.py-6.sm:grid.sm:grid-cols-3.sm:gap-4.sm:px-0
      dt.text-sm.font-medium.leading-6.text-contrast
        | Stripe secret key
      dd.mt-1.text-sm.leading-6.text-contrast.sm:col-span-2.sm:mt-0
        = @store.stripe_secret_key
    .px-4.py-6.sm:grid.sm:grid-cols-3.sm:gap-4.sm:px-0
      dt.text-sm.font-medium.leading-6.text-contrast
        | Stripe webhook secret key
      dd.mt-1.text-sm.leading-6.text-contrast.sm:col-span-2.sm:mt-0
        = @store.stripe_webhook_secret_key
    .px-4.py-6.sm:grid.sm:grid-cols-3.sm:gap-4.sm:px-0
      dt.text-sm.font-medium.leading-6.text-contrast
        | Mode vacances
      dd.mt-1.text-sm.leading-6.text-contrast.sm:col-span-2.sm:mt-0
        = @store.holiday ? "Activé (#{@store.holiday_sentence})" : "Désactivé"
    .px-4.py-6.sm:grid.sm:grid-cols-3.sm:gap-4.sm:px-0
      dt.text-sm.font-medium.leading-6.text-contrast
        | Texte de la page à propos
      dd.mt-1.text-sm.leading-6.text-contrast.sm:col-span-2.sm:mt-0
        = @store.about&.body&.to_html&.html_safe

--- End of ./app/views/admin/stores/_store.html.slim ---
= render TurboModal::Component.new(title: "Editer la boutique") do
  = simple_form_for [:admin, @store] do |field|
    = field.input :name, label: 'Nom de la boutique', placeholder: 'Nom de la boutique'
    = field.input :meta_title, label: 'Meta Title', placeholder: 'Meta Title'
    = field.input :meta_description, as: :text, label: 'Meta Description', placeholder: 'Meta Description'
    = field.input :instagram_url, label: 'URL Instagram', placeholder: 'URL Instagram'
    = field.input :facebook_url, label: 'URL Facebook', placeholder: 'URL Facebook'
    .md:flex.items-center
      = field.input :holiday, label: "Mode vacances", as: :boolean, input_html: { checked: @store.holiday?, class: "w-5 h-5 m-0 p-0 flex checked:bg-primary"}, wrapper_html: {class: "flex items-center basis-1/4"}, label_html: {class: "-top-0.5 left-4"}
      = field.input :holiday_sentence, label: 'Message vacances', placeholder: 'Message vacances', input_html: { class: "w-full" }, wrapper_html: {class: "basis-3/4"}

    .mb-5.control data-controller="trix"
      = field.rich_text_area :about, label: 'Texte à propos', placeholder: 'Texte à propos', data: { trix_target: 'editor' }
    = field.input :stripe_publishable_key, as: :string, label: 'Clef publique Stripe', placeholder: 'Clef publique Stripe'
    = field.input :stripe_secret_key, as: :string, label: 'Clef secrete Stripe', placeholder: 'Clef secrete Stripe'
    = field.input :stripe_webhook_secret_key, as: :string, label: 'Clef webhook Stripe', placeholder: 'Clef webhook Stripe'
    = field.button :submit, "Valider", class: "btn btn-primary"

--- End of ./app/views/admin/stores/edit.html.slim ---
= turbo_frame_tag :modal do
.bg-light.min-h-screen.pt-12.md:pt-0
  .mx-auto.max-w-5xl.px-4.sm:px-6.lg:px-8.py-12
    div
      .flex.justify-between
        .px-4.sm:px-0
          h3.text-base.font-semibold.leading-7.text-contrast
            | Informations
          p.mt-1.max-w-2xl.text-sm.leading-6.text-midgray
            | Configuration générale de la boutique
        .flex.items-center
          = link_to edit_admin_store_path(@store), class: "text-midgray", data: { turbo_frame: :modal } do
            i.fa-solid.fa-pen
      .mt-6.border-t.border-contour
        = render "admin/stores/store"

    .py-12.w-full
      .w-full.mb-6.pb-6.border-b
        .sm:flex.sm:items-center
          .sm:flex-auto
            h1.text-2xl.font-semibold.leading-6.text-contrast
              | Catégories
          .mt-4.sm:ml-16.sm:mt-0.sm:flex-none
            = link_to "Ajouter une catégorie", new_admin_store_category_path(@store), data: { turbo_frame: "new_category" }, class: "btn btn-primary"

        .mt-8.flow-root
          .-mx-4.-my-2.overflow-x-auto.sm:-mx-6.lg:-mx-8
            .inline-block.min-w-full.py-2.align-middle.sm:px-6.lg:px-8
              = turbo_frame_tag :new_category do
              = render "admin/categories/categories"


      .w-full.mb-6.pb-6.border-b
        .sm:flex.sm:items-center
          .sm:flex-auto
            h1.text-2xl.font-semibold.leading-6.text-contrast
              | Livraisons
          .mt-4.sm:ml-16.sm:mt-0.sm:flex-none
            = link_to "Ajouter un moyen de livraison", new_admin_store_shipping_method_path(@store), data: { turbo_frame: "modal" }, class: "btn btn-primary"

        .mt-8.flow-root
          .-mx-4.-my-2.overflow-x-auto.sm:-mx-6.lg:-mx-8
            .inline-block.min-w-full.py-2.align-middle.sm:px-6.lg:px-8
              = turbo_frame_tag :new_shipping_method do
              = render "admin/shipping_methods/shipping_methods"


      .w-full.mb-12.pb-6
        .sm:flex.sm:items-center
          .sm:flex-auto
            h1.text-2xl.font-semibold.leading-6.text-contrast
              | Spécifications
          .mt-4.sm:ml-16.sm:mt-0.sm:flex-none
            = link_to "Ajouter une spécification", new_admin_store_specification_path(@store), data: { turbo_frame: "modal" }, class: "btn btn-primary"

        .mt-8.flow-root
          .-mx-4.-my-2.overflow-x-auto.sm:-mx-6.lg:-mx-8
            .inline-block.min-w-full.py-2.align-middle.sm:px-6.lg:px-8
              = turbo_frame_tag :new_specification do
              = render "admin/specifications/specifications"

--- End of ./app/views/admin/stores/show.html.slim ---
= turbo_stream.replace dom_id(@store), partial: "admin/stores/store", locals: { store: @store }

--- End of ./app/views/admin/stores/update.turbo_stream.slim ---
.max-w-5xl.mx-auto.flex.flex-col.items-center.md:flex-row.w-full.pt-24.mb-10
  .px-12.pt-6.md:pt-0 class="w-[90%]"
    = image_tag "#{Current.store.slug}/salome.jpg", class: "object-contain rounded-lg overflow-hidden"
  .w-full.md:px-0.px-12.pt-6.md:pt-0.text-justify
    = Current&.store&.about&.body&.to_html&.html_safe
    / = raise
div.w-full.flex.justify-center
  a href="mailto:hello@studioanemone.fr" class="btn btn-primary" Me contacter

--- End of ./app/views/anemone/about.html.slim ---
.w-full.h-48.flex.justify-center.items-center.bg-contour.relative
  .flex.items-center
    = "Studio Anemone #{Date.current.year} - All rights reserved"
    i.fa-regular.fa-registered.ml-2
  .top-6.right-6.absolute
    = render SocialLinks::Component.new

--- End of ./app/views/anemone/common/_footer.html.slim ---
- color = home?(params) ? "text-light" : "text-contrast"
.
  .justify-around.px-24.items-center.w-full.transition.fixed.top-0.py-6.z-40.flex
    .absolute.left-6
      - unless home?(params)
        = link_to root_path do
          = image_tag("#{Current.store.slug}/logo_black.png", class: "h-12")

    = link_to "À propos", about_path, class: "btn-link font-anemone font-bold tracking-wider #{color}"
    = link_to "Contact", contact_path, class: "btn-link  font-anemone font-bold tracking-wider #{color}"
    = link_to "Boutique", store_path, class: "btn-link  font-anemone font-bold tracking-wider #{color}"
    .absolute.top-0.right-10 class=(color) = render "shared/cart"

.md:hidden
  = label_tag :phonenav, class: "fixed shadow-xl z-40 bottom-10 right-10 rounded-full" do
    .w-16.h-16.bg-secondary.flex.items-center.justify-center.rounded-full.p-3
      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
        <path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5" />
      </svg>
  = check_box_tag :phonenav, nil, nil, { class: "hidden peer" }
  .z-50.fixed.hidden.peer-checked:block.top-0.left-0.right-0.bottom-0.bg-secondary/90
    = label_tag :phonenav, class: "absolute top-10 right-10" do
      .w-16.h-16.flex.items-center.justify-center.rounded-full.p-3.text-contrast
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-12 h-12">
          <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
        </svg>
    .flex.flex-col.justify-around.items-start.py-12.px-12
      = link_to "Accueil", root_path, class: "tracking-widerst text-5xl text-contrast mb-8"
      = link_to "À propos", about_path, class: "tracking-widerst text-5xl text-contrast mb-8"
      = link_to "Contact", contact_path, class: "tracking-widest text-5xl text-contrast mb-8"
      = link_to "Boutique",store_path, class: "tracking-widest text-5xl text-contrast mb-8"

--- End of ./app/views/anemone/common/_navbar.html.slim ---
.max-w-5xl.mx-auto.flex.w-full.pt-10.md:pt-36.min-h-screen
  .w-full.px-12.md:px-0
    .text-2xl.font-bold.mb-6.text-contrast
      | Me contacter

    = simple_form_for @contact, url: send_message_path, method: :post do |field|
      .text-input.mb-3
        = field.input :full_name, label: "Nom & Prénom", placeholder: "Nom & Prénom"
      .text-input.mb-3
        = field.input :email, label: "Email", placeholder: "Email"
      .text-input.mb-3.hidden
        = field.input :nickname
      .text-input.mb-3
        = field.input :content, as: :text, label: "Message", placeholder: "Message", input_html: { rows: 5 }
      = field.submit "Envoyer", class: "btn btn-primary"

--- End of ./app/views/anemone/contact.html.slim ---
.w-screen.h-screen.bg-cover.bg-center style="background-image: linear-gradient(rgba(0,0,0,0.7), rgba(0,0,0,0)), url('#{image_path "anemone/home.jpg", class: "w-full h-screen object-cover"}')"

.w-full.flex.cursor-default.items-center.flex-col.top-0.pt-12.absolute
  = link_to root_path, class: "flex flex-col items-center text-center transition duration-500 w-full", data: { "scroll-target": "head" } do
    = image_tag("#{Current.store.slug}/logo_white.png", class: "mt-10 mb-6 h-20 md:h-48")

--- End of ./app/views/anemone/home.html.slim ---
li.flex.px-4.py-6.sm:px-6
  .flex-shrink-0
    = image_tag item[:item]&.photos&.first, class: "w-20 rounded-md"
  .ml-6.flex.flex-1.flex-col
    .flex
      .min-w-0.flex-1
        h4.text-sm
          .font-medium.text-contrast.hover:text-contrast[href="#"]
            = item[:item].name
    .flex.flex-1.items-end.justify-between.pt-2.text-contrast
      p.mt-1.text-sm.font-medium.text-contrast
        = "#{item[:item].price} €"
      .ml-4
        = "x #{item[:number]}"

--- End of ./app/views/checkouts/_card.html.slim ---
= turbo_frame_tag :form do
  = simple_form_for @order_intent, url: orders_path, method: :post, id: "order_intent" do |field|
    .mb-8 = field.input :email, label: "Email", placeholder: "Email"
    .flex.gap-4.mb-8
      = field.input :first_name, label: "Prénom", placeholder: "Prénom"
      = field.input :last_name, label: "Nom", placeholder: "Nom"
    .flex.flex-col.w-full.relative data-controller="search"
      .absolute.bg-contrast.w-full.top-12.z-50.rounded-md data-search-target="list"
      .mb-8 = field.input :address, label: "Addresse", placeholder: "Addresse", input_html: { autocomplete: "off", data: { action: "keydown->search#navigate keyup->search#fetchAddreses", "search-target": "input" }}
      .absolute.right-2.z-0.text-content.cursor-pointer class="hover:text-content top-2" data-action="click->search#resetInput"
        i.fa-solid.fa-xmark.text-2xl

    .mb-8 = field.input :phone, label: "Téléphone", placeholder: "Téléphone"

    .mt-10.border-t.border-content.pt-10
      fieldset
        legend.text-lg.font-medium.text-contrast
          | Methodes de livraison
        - if field.object.errors[:shipping_method].any?
          p.text-red-500
            = field.object.errors[:shipping_method].join(", ")
        .mt-4.grid.grid-cols-1.gap-y-6.sm:grid-cols-2.sm:gap-x-4
          - Current.store.availible_methods(session[:checkout_items]).each do |method|
            = render ShippingMethod::Component.new(shipping_method: method, field: field)

--- End of ./app/views/checkouts/_form.html.slim ---
.relative data-controller="autosave"
  = field.radio_button :shipping_method, method.id, id: "shipping_method_#{method.id}", class: "hidden peer", data: { action: "change->autosave#save" }
  = field.label :shipping_method, for: "shipping_method_#{method.id}", class: "block py-3 px-3 first:mx-0 mx-2 my-2 border rounded-md cursor-pointer text-content bg-contour peer-checked:bg-tertiary peer-checked:text-contrast transition-colors duration-300" do
    span.flex.flex-1
      span.flex.flex-col
        span#delivery-method-0-label.block.text-sm.font-medium.text-contrast
          = method.name
        span#delivery-method-0-description-0.mt-1.flex.items-center.text-sm.text-midgray
          = method.description
        span#delivery-method-0-description-1.mt-6.text-sm.font-medium.text-contrast
          = "#{method.price} €"
  .hidden.peer-checked:block.absolute.right-10.top-1/2.-translate-y-1/2
    i.fa-solid.fa-badge-check.text-3xl.text-primary
  .hidden = field.submit "Select volume", formmethod: "post", formaction: shipping_method_checkout_path(id: field.object), data: { "autosave-target": "button" }

--- End of ./app/views/checkouts/_shipping_method.html.slim ---
= turbo_frame_tag :total do
  .mt-10.lg:mt-0
    h2.text-lg.font-medium.text-contrast
      | Résumé de la commande
    .mt-4.rounded-lg.border.border-content.bg-contour.shadow-sm
      h3.sr-only
        | Items in your cart
      ul.divide-y.divide-content[role="list"]
        - @items.each do |item|
          = render "card", item: item

      dl.space-y-6.border-t.border-content.px-4.py-6.sm:px-6

      .flex.items-center.justify-between.px-6.pb-2
        dt.text-sm.text-contrast
          | Sous-total
        dd.text-sm.font-medium.text-contrast
          = "#{@order.amount} €"
      .flex.items-center.justify-between.px-6.pb-2
        dt.text-sm.text-contrast
          | Expédition
        dd.text-sm.font-medium.text-contrast
          = "#{@order.shipping_method&.price || '0.00'} €"
      / .flex.items-center.justify-between.px-6.pb-2
      /   dt.text-sm
      /     | TVA
      /   dd.text-sm.font-medium.text-contrast
      /     | 0.00€
      .flex.items-center.justify-between.border-t.border-content.pt-6.px-6.pb-2
        dt.text-base.font-medium.text-contrast
          | Total
        dd.text-base.font-medium.text-contrast
          = "#{@order.total_price} €"
      .border-t.border-content.px-4.py-6.sm:px-6
        - if @order.status == 'confirmed'
          button id="pay" class="btn btn-secondary w-full" Payer
          script src="https://js.stripe.com/v3/"
          script
            |
              const paymentButton = document.getElementById('pay');
              paymentButton.addEventListener('click', () => {
                const stripe = Stripe('#{Current.store.stripe_publishable_key}');
                stripe.redirectToCheckout({
                  sessionId: '#{@order.checkout_session_id}'
                });
              });

        - else
          = button_tag "Confirmer", formmethod: "post", formaction: comfirm_payment_checkout_path, form: "new_order_intent", class: " btn btn-primary w-full active:spinner"

--- End of ./app/views/checkouts/_total.html.slim ---
= turbo_stream.replace :cart_frame, partial: "shared/cart"
= turbo_stream.update dom_id(@item), partial: "items/item", locals: { item: @item }

--- End of ./app/views/checkouts/add.turbo_stream.slim ---
= turbo_stream.update :total, partial: "checkouts/total", locals: { order: @order }
= turbo_stream.update :form, partial: "checkouts/form", locals: { order_intent: @order_intent }

--- End of ./app/views/checkouts/comfirm_payment.turbo_stream.slim ---
= turbo_stream.replace :cart_frame, partial: "shared/cart", locals: {opened: @opened}
= turbo_stream.update dom_id(@item), partial: "items/item", locals: { item: @item }

--- End of ./app/views/checkouts/remove.turbo_stream.slim ---
= turbo_stream.update :total, partial: "checkouts/total", locals: { order: @order }
= turbo_stream.update :form, partial: "checkouts/form", locals: { order_intent: @order_intent }

--- End of ./app/views/checkouts/shipping_method.turbo_stream.slim ---
.bg-light
  .mx-auto.max-w-2xl.px-4.pb-24.pt-16.sm:px-6.lg:max-w-7xl.lg:px-8
    h2.sr-only
      | Checkout
    .lg:grid.lg:grid-cols-2.lg:gap-x-12.xl:gap-x-16
      div
        h2.text-lg.font-medium.text-contrast.mb-4
         | Informations complémentaire
        = render "form"

      = render "total"

--- End of ./app/views/checkouts/show.html.slim ---
| Nouveau message en provenant du site :

. = @contact.full_name
. = @contact.email
. = @contact.content

--- End of ./app/views/contact_mailer/new_message_from_store.html.slim ---
<h2>Resend confirmation instructions</h2>

<%= simple_form_for(resource, as: resource_name, url: confirmation_path(resource_name), html: { method: :post }) do |f| %>
  <%= f.error_notification %>
  <%= f.full_error :confirmation_token %>

  <div class="form-inputs">
    <%= f.input :email,
                required: true,
                autofocus: true,
                value: (resource.pending_reconfirmation? ? resource.unconfirmed_email : resource.email),
                input_html: { autocomplete: "email" } %>
  </div>

  <div class="form-actions">
    <%= f.button :submit, "Resend confirmation instructions" %>
  </div>
<% end %>

<%= render "devise/shared/links" %>

--- End of ./app/views/devise/confirmations/new.html.erb ---
<p>Welcome <%= @email %>!</p>

<p>You can confirm your account email through the link below:</p>

<p><%= link_to 'Confirm my account', confirmation_url(@resource, confirmation_token: @token) %></p>

--- End of ./app/views/devise/mailer/confirmation_instructions.html.erb ---
<p>Hello <%= @email %>!</p>

<% if @resource.try(:unconfirmed_email?) %>
  <p>We're contacting you to notify you that your email is being changed to <%= @resource.unconfirmed_email %>.</p>
<% else %>
  <p>We're contacting you to notify you that your email has been changed to <%= @resource.email %>.</p>
<% end %>

--- End of ./app/views/devise/mailer/email_changed.html.erb ---
<p>Hello <%= @resource.email %>!</p>

<p>We're contacting you to notify you that your password has been changed.</p>

--- End of ./app/views/devise/mailer/password_change.html.erb ---
<p>Hello <%= @resource.email %>!</p>

<p>Someone has requested a link to change your password. You can do this through the link below.</p>

<p><%= link_to 'Change my password', edit_password_url(@resource, reset_password_token: @token) %></p>

<p>If you didn't request this, please ignore this email.</p>
<p>Your password won't change until you access the link above and create a new one.</p>

--- End of ./app/views/devise/mailer/reset_password_instructions.html.erb ---
<p>Hello <%= @resource.email %>!</p>

<p>Your account has been locked due to an excessive number of unsuccessful sign in attempts.</p>

<p>Click the link below to unlock your account:</p>

<p><%= link_to 'Unlock my account', unlock_url(@resource, unlock_token: @token) %></p>

--- End of ./app/views/devise/mailer/unlock_instructions.html.erb ---
<h2>Change your password</h2>

<%= simple_form_for(resource, as: resource_name, url: password_path(resource_name), html: { method: :put }) do |f| %>
  <%= f.error_notification %>

  <%= f.input :reset_password_token, as: :hidden %>
  <%= f.full_error :reset_password_token %>

  <div class="form-inputs">
    <%= f.input :password,
                label: "New password",
                required: true,
                autofocus: true,
                hint: ("#{@minimum_password_length} characters minimum" if @minimum_password_length),
                input_html: { autocomplete: "new-password" } %>
    <%= f.input :password_confirmation,
                label: "Confirm your new password",
                required: true,
                input_html: { autocomplete: "new-password" } %>
  </div>

  <div class="form-actions">
    <%= f.button :submit, "Change my password" %>
  </div>
<% end %>

<%= render "devise/shared/links" %>

--- End of ./app/views/devise/passwords/edit.html.erb ---
<h2>Forgot your password?</h2>

<%= simple_form_for(resource, as: resource_name, url: password_path(resource_name), html: { method: :post }) do |f| %>
  <%= f.error_notification %>

  <div class="form-inputs">
    <%= f.input :email,
                required: true,
                autofocus: true,
                input_html: { autocomplete: "email" } %>
  </div>

  <div class="form-actions">
    <%= f.button :submit, "Send me reset password instructions" %>
  </div>
<% end %>

<%= render "devise/shared/links" %>

--- End of ./app/views/devise/passwords/new.html.erb ---
<h2>Edit <%= resource_name.to_s.humanize %></h2>

<%= simple_form_for(resource, as: resource_name, url: registration_path(resource_name), html: { method: :put }) do |f| %>
  <%= f.error_notification %>

  <div class="form-inputs">
    <%= f.input :email, required: true, autofocus: true %>

    <% if devise_mapping.confirmable? && resource.pending_reconfirmation? %>
      <p>Currently waiting confirmation for: <%= resource.unconfirmed_email %></p>
    <% end %>

    <%= f.input :password,
                hint: "leave it blank if you don't want to change it",
                required: false,
                input_html: { autocomplete: "new-password" } %>
    <%= f.input :password_confirmation,
                required: false,
                input_html: { autocomplete: "new-password" } %>
    <%= f.input :current_password,
                hint: "we need your current password to confirm your changes",
                required: true,
                input_html: { autocomplete: "current-password" } %>
  </div>

  <div class="form-actions">
    <%= f.button :submit, "Update" %>
  </div>
<% end %>

<h3>Cancel my account</h3>

<div>Unhappy? <%= button_to "Cancel my account", registration_path(resource_name), data: { confirm: "Are you sure?", turbo_confirm: "Are you sure?" }, method: :delete %></div>

<%= link_to "Back", :back %>

--- End of ./app/views/devise/registrations/edit.html.erb ---
<h2>Sign up</h2>

<%= simple_form_for(resource, as: resource_name, url: registration_path(resource_name)) do |f| %>
  <%= f.error_notification %>

  <div class="form-inputs">
    <%= f.input :email,
                required: true,
                autofocus: true,
                input_html: { autocomplete: "email" }%>
    <%= f.input :password,
                required: true,
                hint: ("#{@minimum_password_length} characters minimum" if @minimum_password_length),
                input_html: { autocomplete: "new-password" } %>
    <%= f.input :password_confirmation,
                required: true,
                input_html: { autocomplete: "new-password" } %>
  </div>

  <div class="form-actions">
    <%= f.button :submit, "Sign up" %>
  </div>
<% end %>

<%= render "devise/shared/links" %>

--- End of ./app/views/devise/registrations/new.html.erb ---
.max-w-5xl.mx-auto class="min-h-[calc(100vh-12rem)] pt-24 px-8"
  h2.my-8.text-contrast Connexion

  = simple_form_for(resource, as: resource_name, url: session_path(resource_name)) do |f|
    div class="form-inputs"
      = f.input :email, required: false, autofocus: true, input_html: { autocomplete: "email" }
      = f.input :password, required: false, input_html: { autocomplete: "current-password" }
      = f.input :remember_me, as: :boolean, input_html: {class: "w-5 h-5 m-0 p-0 flex"}, wrapper_html: {class: "flex items-center"}, label_html: {class: "top-0 left-6"} if devise_mapping.rememberable?

    div class="form-actions"
      = f.button :submit, "Log in"
  = render "devise/shared/links"

--- End of ./app/views/devise/sessions/new.html.slim ---
<% if resource.errors.any? %>
  <div id="error_explanation" data-turbo-cache="false">
    <h2>
      <%= I18n.t("errors.messages.not_saved",
                 count: resource.errors.count,
                 resource: resource.class.model_name.human.downcase)
       %>
    </h2>
    <ul>
      <% resource.errors.full_messages.each do |message| %>
        <li><%= message %></li>
      <% end %>
    </ul>
  </div>
<% end %>

--- End of ./app/views/devise/shared/_error_messages.html.erb ---
.flex.gap-4.text-primary.mt-3
  - if controller_name != 'sessions'
    = link_to "Log in", new_session_path(resource_name)

  - if devise_mapping.registerable? && controller_name != 'registrations'
    = link_to "Sign up", new_registration_path(resource_name)

  - if devise_mapping.recoverable? && controller_name != 'passwords' && controller_name != 'registrations'
    = link_to "Forgot your password?", new_password_path(resource_name)

  - if devise_mapping.confirmable? && controller_name != 'confirmations'
    = link_to "Didn't receive confirmation instructions?", new_confirmation_path(resource_name)

  - if devise_mapping.lockable? && resource_class.unlock_strategy_enabled?(:email) && controller_name != 'unlocks'
    = link_to "Didn't receive unlock instructions?", new_unlock_path(resource_name)

  - if devise_mapping.omniauthable?
    - resource_class.omniauth_providers.each do |provider|
      = button_to "Sign in with #{OmniAuth::Utils.camelize(provider)}", omniauth_authorize_path(resource_name, provider), data: { turbo: false }

--- End of ./app/views/devise/shared/_links.html.slim ---
<h2>Resend unlock instructions</h2>

<%= simple_form_for(resource, as: resource_name, url: unlock_path(resource_name), html: { method: :post }) do |f| %>
  <%= f.error_notification %>
  <%= f.full_error :unlock_token %>

  <div class="form-inputs">
    <%= f.input :email,
                required: true,
                autofocus: true,
                input_html: { autocomplete: "email" } %>
  </div>

  <div class="form-actions">
    <%= f.button :submit, "Resend unlock instructions" %>
  </div>
<% end %>

<%= render "devise/shared/links" %>

--- End of ./app/views/devise/unlocks/new.html.erb ---
= turbo_frame_tag dom_id(@item) do
  - @virtual_stock = @virtual_stock || @item.stock
  .
    .mx-auto.max-w-2xl.px-4.py-16.sm:px-6.sm:py-24.lg:max-w-7xl.lg:px-8
      .lg:grid.lg:grid-cols-2.lg:items-start.lg:gap-x-8
        .flex.flex-col-reverse data-controller="photo-switch"
          .mx-auto.mt-6.hidden.w-full.max-w-2xl.sm:block.lg:max-w-none
            .grid.grid-cols-4.gap-6[aria-orientation="horizontal" role="tablist"]

              - @item.photos.each do |photo|
                button#tabs-1-tab-1.relative.flex.h-24.cursor-pointer.items-center.justify-center.rounded-md.bg-contrast.text-sm.font-medium.uppercase.text-contrast.hover:bg-light.focus:outline-none.focus:ring.focus:ring-opacity-50.focus:ring-offset-4[aria-controls="tabs-1-panel-1" role="tab" type="button"]
                  span.absolute.inset-0.overflow-hidden.rounded-md
                    = image_tag photo, class: "h-full w-full object-cover object-center", data: { action: "click->photo-switch#switch" }
                  span.ring-transparent.pointer-events-none.absolute.inset-0.rounded-md.ring-2.ring-offset-2[aria-hidden="true"]

          .aspect-h-1.aspect-w-1.w-full
            #tabs-1-panel-1[aria-labelledby="tabs-1-tab-1" role="tabpanel" tabindex="0"]
              - if @item.photos.attached?
                = image_tag @item.photos.first, class: "h-full w-full object-cover object-center sm:rounded-lg", data: { "photo-switch-target": "photo" }
        .mt-10.px-4.sm:mt-16.sm:px-0.lg:mt-0
          h1.text-3xl.font-bold.tracking-tight.text-contrast
            = @item.name
          .mt-3
            h2.sr-only
              | Product information
            p.text-3xl.tracking-tight.text-contrast
              = "#{@item.price} €"
          .mt-6
            h3.sr-only
              | Description
            .space-y-6.text-base.text-contrast
              p
                = @item.description
          .mt-6
            .mt-10
              - unless @virtual_stock <= 0
                = button_to "Ajouter au panier", add_item_checkout_path(@item), method: :post, class: "btn btn-primary mb-4"
                p.text-sm.text-midgray
                  = "(#{@virtual_stock} en stock)"
              - else
                p class="text-red-500 font-bold" = "RUPTURE DE STOCK"
          section.mt-12[aria-labelledby="details-heading"]
            h2#details-heading.sr-only
              | Additional details
            .divide-y.divide-content.border-t
              div
                h3
                  button.group.relative.flex.w-full.items-center.justify-between.py-6.text-left[type="button" aria-controls="disclosure-1" aria-expanded="false"]
                    span.text-contrast.text-sm.font-medium
                      | Informations
                #disclosure-1.prose.prose-sm.pb-6.text-midgray.font-thin
                  ul.list-disc.leading-8.pl-3
                    - @item.specifications.each do |specification|
                      li = specification.name
-

--- End of ./app/views/items/_item.html.slim ---
= render "item", item: @item

--- End of ./app/views/items/show.html.slim ---
<div class="trix-content">
  <%= yield -%>
</div>

--- End of ./app/views/layouts/action_text/contents/_content.html.erb ---
doctype html
html
  head
    = render "shared/head"
  body.h-full
    .flex
      . = render "shared/sidebar"
      .w-full.h-full.min-h-screen
        = yield

    . id="notifications" class="z-50 fixed left-10 bottom-10 cursor-pointer w-96"
      - flash.each do |type, data|
        = render Notifications::Component.new(type: type, data: data)
      - flash.clear

--- End of ./app/views/layouts/admin.html.slim ---
doctype html
html
  head
    = render "shared/head"
    #modal.z-50.fixed.hidden
  body.bg-light class="#{Current.store.slug}" data-controller="scroll" data-action="scroll@window->scroll#scroll"
    = render "#{Current.store.slug}/common/navbar"
    . class="min-h-[calc(100vh-500px)]"
      = yield
    = render "#{Current.store.slug}/common/footer"

    . id="notifications" class="z-50 fixed right-10 top-10 cursor-pointer w-96"
      - flash.each do |type, data|
        = render Notifications::Component.new(type: type, data: data)
      - flash.clear

--- End of ./app/views/layouts/application.html.slim ---
html
  body
    = yield

--- End of ./app/views/layouts/mailer.html.slim ---
= yield

--- End of ./app/views/layouts/mailer.text.slim ---
.max-w-5xl.mx-auto.flex.flex-col.items-center.md:flex-row.w-full.pt-12.mb-10
  .px-12.pt-6.md:pt-0 class="w-[90%]"
    = image_tag "#{Current.store.slug}/clemence.jpg", class: "object-contain rounded-lg overflow-hidden"
    p.text-midgray.pt-3 Photo Le Cheveu Blanc par <a class="text-primary" href="https://www.instagram.com/amelinevil/">Ameline Vildaer</a> Sept 2023
  .w-full.md:px-0.px-12.pt-6.md:pt-0.text-justify
    = Current&.store&.about&.body&.to_html&.html_safe
    / = raise
div.w-full.flex.justify-center
  a href="mailto:hello@lecheveublanc.fr" class="btn btn-primary" Me contacter

--- End of ./app/views/lecheveublanc/about.html.slim ---
.w-full.h-48.flex.justify-center.items-center.bg-light.mt-12.relative
  = "Le Cheveu Blanc #{Date.current.year} - All rights reserved"
  .top-6.right-6.absolute
    = render SocialLinks::Component.new

--- End of ./app/views/lecheveublanc/common/_footer.html.slim ---
.w-full.hidden.md:flex.bg-light.relative.cursor-default.items-center.flex-col.border-b.boder-light
  .top-6.right-6.absolute.flex.items-center
    = render SocialLinks::Component.new

    = render "shared/cart"

  = link_to root_path, class: "inline-block mx-auto" do
    = image_tag("#{Current.store.slug}/logo.png", class: "h-48")
  .flex.justify-around.items-center.pb-12.w-full
    = link_to "Portfolio", root_path, class: "btn-link"
    = link_to "À propos", about_path, class: "btn-link"
    = link_to "Contact", contact_path, class: "btn-link"
    = link_to "Boutique", store_path, class: "btn-link"

.h-36.md:hidden
  .absolute.right-12.top-4 = render "shared/cart"

  = link_to root_path, class: "w-full flex items-center justify-center" do
    = image_tag("#{Current.store.slug}/logo.png", class: "h-36")

  = label_tag :phonenav, class: "fixed shadow-xl z-40 top-4 left-4 rounded-full" do
    .w-16.h-16.bg-secondary.flex.items-center.justify-center.rounded-full.p-3
      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
        <path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5" />
      </svg>
  = check_box_tag :phonenav, nil, nil, {class: "hidden peer"}
  .z-50.fixed.hidden.peer-checked:block.top-0.left-0.right-0.bottom-0.bg-secondary/90
    = label_tag :phonenav, class: "absolute top-10 right-10" do
      .w-16.h-16.flex.items-center.justify-center.rounded-full.p-3.text-light
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-12 h-12">
          <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
        </svg>
    .flex.flex-col.justify-around.items-start.py-12.px-12
      = link_to "Portfolio", root_path, class: "tracking-widest text-5xl text-light mb-8"
      = link_to "À propos", about_path, class: "tracking-widest text-5xl text-light mb-8"
      = link_to "Contact", contact_path, class: "tracking-widest text-5xl text-light mb-8"
      = link_to "Boutique", store_path, class: "tracking-widest text-5xl text-light mb-8"

      / = link_to "Boutique", nested_taxons_path("categories"), class: "tracking-widest text-5xl text-contrast mb-8"

--- End of ./app/views/lecheveublanc/common/_navbar.html.slim ---
.max-w-5xl.mx-auto.flex.w-full.pt-12
  .w-full.px-12.md:px-0
    .text-2xl.font-bold.mb-6
      | Une idée de projet ? Contactez-moi !


    = simple_form_for @contact, url: send_message_path, method: :post do |field|
      .text-input.mb-3
        = field.input :full_name, label: "Nom & Prénom", placeholder: "Nom & Prénom"
      .text-input.mb-3
        = field.input :email, label: "Email", placeholder: "Email"
      .text-input.mb-3.hidden
        = field.input :nickname
      .text-input.mb-3
        = field.input :content, as: :text, label: "Détails", placeholder: "Détails", input_html: { rows: 5 }
      = field.submit "Envoyer", class: "btn btn-primary"

--- End of ./app/views/lecheveublanc/contact.html.slim ---
.grid.sm:grid-cols-2.md:grid-cols-3.gap-6.px-12.pt-12 data-controller="card fade-in" data-action="click->card#test"
  .gap-6.space-y-6
    - images = images_from_directory("hug")
    = render Cards::CardComponent.new(  images: images)

    - images = images_from_directory("violence")
    = render Cards::CardComponent.new(images: images)

    - images = images_from_directory("liste")
    = render Cards::CardComponent.new( images: images)

    - images = images_from_directory("maison")
    = render Cards::CardComponent.new(title: "Haut les coeurs", link: "https://open.spotify.com/show/0Sh1i3tvxIYyf1AMFaO6qQ", images: images)

    - images = images_from_directory("male_tears")
    = render Cards::CardComponent.new( images: images)

    - images = images_from_directory("colision")
    = render Cards::CardComponent.new(title: "Collision devices", link: "https://collisiondevices.com/", images: images)

    - images = images_from_directory("period")
    = render Cards::CardComponent.new( images: images)

    - images = images_from_directory("non_binary")
    = render Cards::CardComponent.new( images: images)

  .gap-6.space-y-6
    - images = images_from_directory("chaden")
    = render Cards::CardComponent.new( images: images)

    - images = images_from_directory("bd")
    = render Cards::CardComponent.new( images: images)

    - images = images_from_directory("peniche")
    = render Cards::CardComponent.new( title: "Péniche", link: "https://peniche.bandcamp.com/music", images: images)

    - images = images_from_directory("queer")
    = render Cards::CardComponent.new( images: images)

    - images = images_from_directory("hlc")
    = render Cards::CardComponent.new( images: images)

    - images = images_from_directory("lfsm")
    = render Cards::CardComponent.new(title: "Les femmes s'en mêlent", link: "https://lfsm.net/", images: images)

  .gap-6.space-y-6
    - images = images_from_directory("acab")
    = render Cards::CardComponent.new( images: images)

    - images = images_from_directory("kostar")
    = render Cards::CardComponent.new(title: "Kostar", link: "https://www.kostar.fr/", images: images)

    - images = images_from_directory("hlc")
    = render Cards::CardComponent.new( images: images)

    - images = images_from_directory("ours")
    = render Cards::CardComponent.new( images: images)

    - images = images_from_directory("no_bra")
    = render Cards::CardComponent.new( images: images)

    - images = images_from_directory("cuve")
    = render Cards::CardComponent.new(title: "Les femmes s'en mêlent", link: "https://lfsm.net/", images: images)

    - images = images_from_directory("lcdm")
    = render Cards::CardComponent.new(title: "La cour des miracles", link: "https://www.lacourdesmiracles.shop/", images: images)

    - images = images_from_directory("mer")
    = render Cards::CardComponent.new( images: images)

--- End of ./app/views/lecheveublanc/home.html.slim ---
  .flex.space-x-6.border-b.border-content.py-10
    = image_tag item[:item].photos.first, class: "h-20 w-20 flex-none rounded-lg bg-contour object-cover object-center sm:h-40 sm:w-40"
    .flex.flex-auto.flex-col
      div
        h4.font-medium.text-contrast
          = item[:item].name
        p.mt-2.text-sm.text-midgray = item[:item].description
      .mt-6.flex.flex-1.items-end
        dl.flex.space-x-4.divide-x.divide-content.text-sm.sm:space-x-6
          .flex
            dt.font-medium.text-contrast X
            dd.ml-2.text-contrast = "#{item[:number]}"
          .flex.pl-4.sm:pl-6
            dt.font-medium.text-contrast
            dd.ml-2.text-contrast = "#{item[:item].price} €"

--- End of ./app/views/orders/_card.html.slim ---
- unless @order.paid?
  main.bg-contrast.px-4.pb-24.pt-4.sm:px-6.px-8
  .mx-auto.max-w-3xl
    .max-w-xl
      h1.text-base.font-medium.text-primary Une erreur s'est produite lors du paiement.
      p.mt-2.text-4xl.font-bold.tracking-tight Vous pouvez réessayer ou me contacter.
      p.mt-2.text-base.text-midgray
      dl.mt-12.text-sm.font-medium
        dt.text-contrast Numéro de commande
        dd.mt-2.text-primary = @order.id
- else
  main.bg-light.px-4.pb-24.pt-16.sm:px-6.sm:pt-24.lg:px-8.lg:py-32
    .mx-auto.max-w-3xl
      .max-w-xl
        h1.text-base.font-medium.text-primary Merci pour votre commande!
        p.mt-2.text-4xl.font-bold.tracking-tight.text-contrast Je m'en occupe au plus vite
        p.mt-2.text-base.text-midgray
        dl.mt-12.text-sm.font-medium
          dt.text-contrast Numéro de commande
          dd.mt-2.text-primary = @order.id

      section.mt-10.border-t.border-content[aria-labelledby="order-heading"]
        h2#order-heading.sr-only Your order
        h3.sr-only Items
        - @items.each do |item|
          = render "card", item: item

        .sm:ml-40.sm:pl-6
          h3.sr-only Your information
          h4.sr-only Addresses
          dl.grid.grid-cols-2.gap-x-6.py-10.text-sm
            div
              dt.font-medium.text-contrast Adresse de livraison
              dd.mt-2.text-contrast
                address.not-italic
                  span.block = @order.shipping_address
            div
              dt.font-medium.text-contrast Adresse de facturation
              dd.mt-2.text-contrast
                address.not-italic
                  span.block = @order.shipping_address

          h4.sr-only Payment
          dl.grid.grid-cols-2.gap-x-6.border-t.border-content.py-10.text-sm
            div
              dt.font-medium.text-contrast Methode de paiement
              dd.mt-2.text-contrast
                p Stripe

            div
              dt.font-medium.text-contrast Methode de livraison
              dd.mt-2.text-contrast
                p = @order.shipping_method.name
                p = @order.shipping_method.description

          h3.sr-only Summary
          dl.space-y-6.border-t.border-content.pt-10.text-sm
            .flex.justify-between
              dt.font-medium.text-contrast Sous-total
              dd.text-contrast = number_to_currency(@order.amount, format: "%n €")
            .flex.justify-between
              dt.font-medium.text-contrast Livraison
              dd.text-contrast = number_to_currency(@order.shipping_method.price, format: "%n €")
            .flex.justify-between
              dt.font-medium.text-contrast Total
              dd.text-contrast = number_to_currency(@order.amount + @order.shipping_method.price, format: "%n €")

--- End of ./app/views/orders/show.html.slim ---


--- End of ./app/views/pages/home.html.slim ---

= turbo_frame_tag :cart_frame, class: "ml-6" do
  = label_tag :cart do
    .relative
      i.fa-solid.fa-cart-shopping.text-2xl
      .bg-primary.rounded-full.h-6.w-6.flex.items-center.justify-center.absolute.text-contrast.-right-2.-bottom-2
        = session[:checkout_items]&.count
  = check_box_tag :cart, nil, nil, {checked: @opened, class: "hidden peer"}
  .hidden.peer-checked:block.relative.z-10[aria-labelledby="slide-over-title" role="dialog" aria-modal="true"]

    .fixed.inset-0.bg-midgray.bg-opacity-75.transition-opacity
    .fixed.inset-0.overflow-hidden
      .absolute.inset-0.overflow-hidden
        .pointer-events-none.fixed.inset-y-0.right-0.flex.max-w-full.pl-10
          .pointer-events-auto.w-screen.max-w-md
            .flex.h-full.flex-col.overflow-y-scroll.bg-contrast.shadow-xl
              .flex-1.overflow-y-auto.px-4.py-6.sm:px-6.bg-light
                .flex.items-start.justify-between
                  h2#slide-over-title.text-lg.font-medium.text-contrast
                    | Shopping cart
                  .ml-3.flex.h-7.items-center
                    = label_tag :cart, class: "" do
                      .w-16.h-16.flex.items-center.justify-center.rounded-full.p-3
                        i.fa-solid.fa-xmark.ml-6.text-2xl.text-contrast
                .mt-8
                  .flow-root
                    ul.-my-6.divide-y.divide-content[role="list"]
                      - Checkout.new(session[:checkout_items]).cart.each do |item|

                        li.flex.py-6
                          .h-24.w-24.flex-shrink-0.overflow-hidden.rounded-md.border.border-content
                            = image_tag item[:item].photos.first, class: "h-full.w-full.object-cover.object-center"
                          .ml-4.flex.flex-1.flex-col
                            div
                              .flex.justify-between.text-base.font-medium.text-contrast
                                h3
                                  = item[:item].name
                                p.ml-3
                                  = "#{item[:item].price} €"

                            .flex.flex-1.items-end.justify-between.text-sm
                              p.text-midgray
                                = "X #{item[:number]}"
                              .flex
                                = button_to "Supprimer", remove_item_checkout_path(item[:item]), method: :post, class: "font-medium text-primary hover:text-primary/90"


              .border-t.border-content.px-4.py-6.sm:px-6.bg-light
                .flex.justify-between.text-base.font-medium.text-contrast
                  p
                    | Total
                  p
                    = "#{Checkout.new(session[:checkout_items]).sum} €"
                p.mt-0.5.text-sm.text-midgray
                  | L'expédition sera calculé à la prochaine étape.
                .mt-6
                  = link_to "Payement", checkout_path, class: "flex items-center justify-center rounded-md border border-transparent bg-primary/90 px-6 py-3 text-base font-medium text-light shadow-sm hover:bg-primary", data: { turbo: false }

--- End of ./app/views/shared/_cart.html.slim ---
meta name="viewport" content="width=device-width,initial-scale=1"

title = meta_title
meta name="description" content="#{ meta_description }"
= favicon_link_tag "#{Current.store.slug}/favicon.png", rel: "icon", type: "image/png"
<!-- Facebook Open Graph data -->
meta property="og:title" content="#{meta_title}"
meta property="og:type" content="website"
meta property="og:url" content="#{ request.original_url }"
meta property="og:image" content="#{ meta_image }"
meta property="og:description" content="#{ meta_description }"
meta property="og:site_name" content="#{ meta_title }"

= csrf_meta_tags
= csp_meta_tag
= stylesheet_link_tag "application", "data-turbo-track": "reload"
= javascript_include_tag "application", "data-turbo-track": "reload", defer: true
= tag :meta, name: :mapbox_token, content: Rails.application.credentials.mapbox.mapbox_api_key


link rel="stylesheet" type="text/css" href="https://unpkg.com/trix@2.0.0/dist/trix.css"
link rel="preconnect" href="https://fonts.googleapis.com"
link rel="preconnect" href="https://fonts.gstatic.com" crossorigin="true"
link rel="preconnect" href="https://fonts.googleapis.com"
link rel="preconnect" href="https://fonts.gstatic.com" crossorigin="true"
link href="https://fonts.googleapis.com/css2?family=Bagel+Fat+One&family=Belanosima:wght@400;600;700&family=Noto+Sans+KR:wght@900&family=Noto+Sans:wght@900&display=swap" rel="stylesheet"
link rel="stylesheet" href="https://unpkg.com/tippy.js@6/animations/scale.css"
link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/tom-select/2.1.0/css/tom-select.default.min.css" integrity="sha512-DQNtv2crByHeZUlhGc0L9RQ+qwSEUXo9b/dPgGR9vE9idEcj4j2jcBhCa8MiQYgL+rubYBOLKE/gUBoc/uROCw==" crossorigin="anonymous" referrerpolicy="no-referrer"

script src="https://unpkg.com/@popperjs/core@2"
script src="https://unpkg.com/tippy.js@6"
script src="https://kit.fontawesome.com/910f22a437.js" crossorigin="anonymous"

--- End of ./app/views/shared/_head.html.slim ---
div.border-r.border-midgray.sticky.top-0.z-50
  // MOBILE NAVBAR
  = check_box_tag :cart, nil, nil, { checked: true, class: "hidden peer"}
  div class="relative z-50 lg:hidden peer-checked:hidden" role="dialog" aria-modal="true"
    div class="fixed inset-0 bg-contrast/80"
    div class="fixed inset-0 flex"
      div class="relative mr-16 flex w-full max-w-xs flex-1"
        .absolute.left-full.top-0.flex.w-16.justify-center.pt-5
          button.-m-2.5.p-2.5 type="button"
            span.sr-only
              | Close sidebar
            = label_tag :cart do
              i.fa-solid.fa-times.text-midgray.text-3xl

        <!-- Sidebar component, swap this element with another sidebar if you like -->
        div class="flex grow flex-col gap-y-5 overflow-y-auto bg-contrast px-6 pb-2 ring-1 ring-contrast/10"
          div class="flex pt-10 my-3  shrink-0 items-center"
            = image_tag "#{Current.store.slug}/logo.png", class: "w-auto"
          nav class="flex flex-1 flex-col"
            = render "shared/sidebar_menu"

  // DESKTOP NAVBAR
  div class="hidden lg:h-screen lg:inset-y-0 lg:z-50 lg:flex lg:w-72 lg:flex-col"
    div class="flex grow flex-col gap-y-5 overflow-y-auto bg-contrast px-6"
      div class="flex my-3 shrink-0 items-center object-contain"
        = image_tag "#{Current.store.slug}/logo.png", class: " w-auto"

      nav.flex.flex-1.flex-col
        = render "shared/sidebar_menu"




  .absolute.top-0.z-40.flex.items-center.gap-x-6.bg-contrast.px-4.py-4.shadow-sm.rounded-br-lg.sm:px-6.lg:hidden
    / = check_box_tag :cart, nil, nil, {checked: @opened, class: "hidden peer"}
    = label_tag :cart do
      .-m-2.5.p-2.5.text-midgray.lg:hidden type="button"
        span.sr-only
          | Open sidebar
        i.fa-solid.fa-bars.text-3xl

--- End of ./app/views/shared/_sidebar.html.slim ---
ul.flex.flex-1.flex-col.gap-y-7[role="list"]
  li
    ul.-mx-2.space-y-1[role="list"]
      / = render MenuItem::Component.new(path: "#", icon_classes: "fa-solid fa-home", title: "Accueil")
      = render MenuItem::Component.new(path: admin_orders_path, icon_classes: "fa-solid fa-book", title: "Commandes")
      = render MenuItem::Component.new(path: admin_items_path, icon_classes: "fa-solid fa-star", title: "Mes articles")
      = render MenuItem::Component.new(path: admin_store_path(Current.store), icon_classes: "fa-solid fa-sliders", title: "Mon site")
      = render MenuItem::Component.new(path: admin_account_path, icon_classes: "fa-solid fa-gear", title: "Paramètres")
      / = render MenuItem::Component.new(path: admin_account_path, icon_classes: "fa-solid fa-envelope", title: "Emails")


  li.-mx-6.mt-auto
    .flex.items-center.gap-x-4.px-6.py-3.text-sm.font-semibold.leading-6.text-light.hover:bg-contrast
      = render Avatar::Component.new(user: current_user)

      span.sr-only
        | Your profile
      .flex.items-center.justify-between.w-full
        span[aria-hidden="true"]
          = current_user.full_name
        = link_to destroy_user_session_path, data: { turbo_method: :delete } do
          i.fa-solid.fa-arrow-right-from-bracket.text-base.text-midgray.ml-1

--- End of ./app/views/shared/_sidebar_menu.html.slim ---
= link_to item_path(item), class:"relative" do
  .group.relative.flex.flex-col.overflow-hidden.rounded-lg.border.bg-contrast class="border-contour #{'disabled' if item.soldout?}"
    .aspect-h-4.aspect-w-3.bg-contrast.sm:aspect-none.group-hover:opacity-75.sm:h-96
      - if item.photos.attached?
        = image_tag item.photos.first, class: "h-full w-full object-cover object-center sm:h-full sm:w-full"
    .flex.flex-1.flex-col.space-y-2.p-4.bg-contour
      h3.text-sm.font-medium.text-contrast
        span.absolute.inset-0[aria-hidden="true"]
        = item.name
      p.text-sm.text-content
        = item.description
        p.text-base.font-medium.text-contrast
          = "#{item.price} €"
        - if item.stock == 1
          p.text-sm.font-base.text-contrast.text-red-500
            = "Plus qu'un seul exemplaire en stock !"

  - if item.soldout?
    .absolute.left-1/2.top-1/2.-translate-x-1/2.-translate-y-1/2.text-center.opacity-100
      .text-3xl.text-red-500.font-bold RUPTURE DE STOCK

--- End of ./app/views/stores/_card.html.slim ---
aside
  h2.sr-only
    | Filters
  .hidden.lg:block
    form.space-y-10.divide-y.divide-content
      div
        fieldset
          legend.block.text-sm.font-medium.text-contrast
            | Category
          .space-y-3.pt-6 data-controller="autosave"
            = simple_form_for :filters do |f|

              - Current.store.categories.each_with_index do |category, index|
                .flex.items-center
                  = f.input category.name, as: :boolean, boolean_style: :nested, label: t(category.name), input_html: {data: { action: "change->autosave#save" },checked: session[:filters][category.name].to_i.positive?, id: "category-#{index}", class: "h-6 w-4 rounded border-content text-primary focus:ring-primary"}, wrapper_html: { class: "pb-3 mb-0 flex items-center"}, label_html: {class: 'top-1 left-6 text-sm text-midgray'}
              .hidden = f.submit nil, data: { "autosave-target": "button" }

--- End of ./app/views/stores/_filters.html.slim ---
.fixed.inset-0.z-40.flex
  .relative.ml-auto.flex.h-full.w-full.max-w-xs.flex-col.overflow-y-auto.bg-contrast.py-4.pb-6.shadow-xl
    .flex.items-center.justify-between.px-4
      h2.text-lg.font-medium.text-contrast
        | Filters
      button.relative.-mr-2.flex.h-10.w-10.items-center.justify-center.p-2.text-midgray.hover:text-midgray[type="button"]
        span.absolute.-inset-0.5
        span.sr-only
          | Close menu
        svg.h-6.w-6[fill="none" viewbox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true"]
          path[stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12"]
    form.mt-4
      .border-t.border-content.pb-4.pt-4
        fieldset
          legend.w-full.px-2
            button.flex.w-full.items-center.justify-between.p-2.text-midgray.hover:text-midgray[type="button" aria-controls="filter-section-0" aria-expanded="false"]
              span.text-sm.font-medium.text-contrast
                | Color
              span.ml-6.flex.h-7.items-center
                svg.rotate-0.h-5.w-5.transform[viewbox="0 0 20 20" fill="currentColor" aria-hidden="true"]
                  path[fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z" clip-rule="evenodd"]
          #filter-section-0.px-4.pb-2.pt-4
            .space-y-6
              .flex.items-center
                input#color-0-mobile.h-4.w-4.rounded.border-content.text-primary.focus:ring-primary[name="color[]" value="white" type="checkbox"]
                label.ml-3.text-sm.text-midgray[for="color-0-mobile"]
                  | White
              .flex.items-center
                input#color-1-mobile.h-4.w-4.rounded.border-content.text-primary.focus:ring-primary[name="color[]" value="beige" type="checkbox"]
                label.ml-3.text-sm.text-midgray[for="color-1-mobile"]
                  | Beige
              .flex.items-center
                input#color-2-mobile.h-4.w-4.rounded.border-content.text-primary.focus:ring-primary[name="color[]" value="blue" type="checkbox"]
                label.ml-3.text-sm.text-midgray[for="color-2-mobile"]
                  | Blue
              .flex.items-center
                input#color-3-mobile.h-4.w-4.rounded.border-content.text-primary.focus:ring-primary[name="color[]" value="brown" type="checkbox"]
                label.ml-3.text-sm.text-midgray[for="color-3-mobile"]
                  | Brown
              .flex.items-center
                input#color-4-mobile.h-4.w-4.rounded.border-content.text-primary.focus:ring-primary[name="color[]" value="green" type="checkbox"]
                label.ml-3.text-sm.text-midgray[for="color-4-mobile"]
                  | Green
              .flex.items-center
                input#color-5-mobile.h-4.w-4.rounded.border-content.text-primary.focus:ring-primary[name="color[]" value="purple" type="checkbox"]
                label.ml-3.text-sm.text-midgray[for="color-5-mobile"]
                  | Purple
      .border-t.border-content.pb-4.pt-4
        fieldset
          legend.w-full.px-2
            button.flex.w-full.items-center.justify-between.p-2.text-midgray.hover:text-midgray[type="button" aria-controls="filter-section-1" aria-expanded="false"]
              span.text-sm.font-medium.text-contrast
                | Category
              span.ml-6.flex.h-7.items-center
                svg.rotate-0.h-5.w-5.transform[viewbox="0 0 20 20" fill="currentColor" aria-hidden="true"]
                  path[fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z" clip-rule="evenodd"]
          #filter-section-1.px-4.pb-2.pt-4
            .space-y-6
              .flex.items-center
                input#category-0-mobile.h-4.w-4.rounded.border-content.text-primary.focus:ring-primary[name="category[]" value="new-arrivals" type="checkbox"]
                label.ml-3.text-sm.text-midgray[for="category-0-mobile"]
                  | All New Arrivals
              .flex.items-center
                input#category-1-mobile.h-4.w-4.rounded.border-content.text-primary.focus:ring-primary[name="category[]" value="tees" type="checkbox"]
                label.ml-3.text-sm.text-midgray[for="category-1-mobile"]
                  | Tees
              .flex.items-center
                input#category-2-mobile.h-4.w-4.rounded.border-content.text-primary.focus:ring-primary[name="category[]" value="crewnecks" type="checkbox"]
                label.ml-3.text-sm.text-midgray[for="category-2-mobile"]
                  | Crewnecks
              .flex.items-center
                input#category-3-mobile.h-4.w-4.rounded.border-content.text-primary.focus:ring-primary[name="category[]" value="sweatshirts" type="checkbox"]
                label.ml-3.text-sm.text-midgray[for="category-3-mobile"]
                  | Sweatshirts
              .flex.items-center
                input#category-4-mobile.h-4.w-4.rounded.border-content.text-primary.focus:ring-primary[name="category[]" value="pants-shorts" type="checkbox"]
                label.ml-3.text-sm.text-midgray[for="category-4-mobile"]
                  | Pants & Shorts
      .border-t.border-content.pb-4.pt-4
        fieldset
          legend.w-full.px-2
            button.flex.w-full.items-center.justify-between.p-2.text-midgray.hover:text-midgray[type="button" aria-controls="filter-section-2" aria-expanded="false"]
              span.text-sm.font-medium.text-contrast
                | Sizes
              span.ml-6.flex.h-7.items-center
                svg.rotate-0.h-5.w-5.transform[viewbox="0 0 20 20" fill="currentColor" aria-hidden="true"]
                  path[fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z" clip-rule="evenodd"]
          #filter-section-2.px-4.pb-2.pt-4
            .space-y-6
              .flex.items-center
                input#sizes-0-mobile.h-4.w-4.rounded.border-content.text-primary.focus:ring-primary[name="sizes[]" value="xs" type="checkbox"]
                label.ml-3.text-sm.text-midgray[for="sizes-0-mobile"]
                  | XS
              .flex.items-center
                input#sizes-1-mobile.h-4.w-4.rounded.border-content.text-primary.focus:ring-primary[name="sizes[]" value="s" type="checkbox"]
                label.ml-3.text-sm.text-midgray[for="sizes-1-mobile"]
                  | S
              .flex.items-center
                input#sizes-2-mobile.h-4.w-4.rounded.border-content.text-primary.focus:ring-primary[name="sizes[]" value="m" type="checkbox"]
                label.ml-3.text-sm.text-midgray[for="sizes-2-mobile"]
                  | M
              .flex.items-center
                input#sizes-3-mobile.h-4.w-4.rounded.border-content.text-primary.focus:ring-primary[name="sizes[]" value="l" type="checkbox"]
                label.ml-3.text-sm.text-midgray[for="sizes-3-mobile"]
                  | L
              .flex.items-center
                input#sizes-4-mobile.h-4.w-4.rounded.border-content.text-primary.focus:ring-primary[name="sizes[]" value="xl" type="checkbox"]
                label.ml-3.text-sm.text-midgray[for="sizes-4-mobile"]
                  | XL
              .flex.items-center
                input#sizes-5-mobile.h-4.w-4.rounded.border-content.text-primary.focus:ring-primary[name="sizes[]" value="2xl" type="checkbox"]
                label.ml-3.text-sm.text-midgray[for="sizes-5-mobile"]
                  | 2XL

--- End of ./app/views/stores/_mobile_filters.html.slim ---
.bg-light.md:pt-24 class="min-h-[calc(100vh-10rem)]"
  main.mx-auto.max-w-2xl.px-4.lg:max-w-7xl.lg:px-8
    .pb-24.pt-12.lg:grid.lg:grid-cols-3.lg:gap-x-8.xl:grid-cols-4
      = render "filters"
      section.mt-6.lg:col-span-2.lg:mt-0.xl:col-span-3[aria-labelledby="product-heading"]
        - if @items.blank? || Current.store.holiday
          .flex.items-center.justify-center.py-24
            h1.text-4xl.text-midgray = Current.store.holiday_sentence
        - else
          h2#product-heading.sr-only
            | Products
          .grid.grid-cols-2.gap-4.sm:grid-cols-2.sm:gap-x-6.sm:gap-y-10.lg:gap-x-8.xl:grid-cols-3
            - @items.each do |item|
              = render "card", item:

--- End of ./app/views/stores/show.html.slim ---
.grid.sm:grid-cols-2.md:grid-cols-3.gap-6.px-12.pt-10.md:pt-36 data-controller="card fade-in" data-action="click->card#test"
  .gap-6.space-y-6
    - images = images_from_directory("folder_1")
    = render Cards::CardComponent.new(  images: images)

    - images = images_from_directory("folder_5")
    = render Cards::CardComponent.new( images: images)

    - images = images_from_directory("folder_4")
    = render Cards::CardComponent.new( images: images)

  .gap-6.space-y-6

    - images = images_from_directory("folder_9")
    = render Cards::CardComponent.new( images: images)

    - images = images_from_directory("folder_2")
    = render Cards::CardComponent.new(images: images)

    - images = images_from_directory("folder_6")
    = render Cards::CardComponent.new( images: images)

  .gap-6.space-y-6
    - images = images_from_directory("folder_8")
    = render Cards::CardComponent.new( images: images)

    - images = images_from_directory("folder_3")
    = render Cards::CardComponent.new( images: images)

    - images = images_from_directory("folder_7")
    = render Cards::CardComponent.new( images: images)

--- End of ./app/views/unsafe/about.html.slim ---
.w-full.h-48.flex.justify-center.items-center.bg-contour.mt-12.relative
  .flex.items-center
    = "Unsafe #{Date.current.year} - All rights reserved"
    i.fa-regular.fa-registered.ml-2
  .top-6.right-6.absolute
    = render SocialLinks::Component.new

--- End of ./app/views/unsafe/common/_footer.html.slim ---
.hidden.md:block
  .justify-around.px-24.items-center.w-full.transition.fixed.top-0.py-6.z-40.bg-contour.flex class=("hidden" if home?(params)) data-scroll-target="links"
    .absolute.left-6
      = link_to root_path do
        = image_tag("#{Current.store.slug}/logo_white.png", class: "h-12")

    = link_to "About", about_path, class: "btn-link uppercase font-unsafe"
    = link_to "Booking", contact_path, class: "btn-link  uppercase font-unsafe"
    = link_to "Merch", store_path, class: "btn-link  uppercase font-unsafe"
    .absolute.top-0.right-10 = render "shared/cart"

.md:hidden
  = label_tag :phonenav, class: "fixed shadow-xl z-40 bottom-10 right-10 rounded-full" do
    .w-16.h-16.bg-secondary.flex.items-center.justify-center.rounded-full.p-3
      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
        <path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5" />
      </svg>
  = check_box_tag :phonenav, nil, nil, {class: "hidden peer"}
  .z-50.fixed.hidden.peer-checked:block.top-0.left-0.right-0.bottom-0.bg-secondary/90
    = label_tag :phonenav, class: "absolute top-10 right-10" do
      .w-16.h-16.flex.items-center.justify-center.rounded-full.p-3.text-contrast
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-12 h-12">
          <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
        </svg>
    .flex.flex-col.justify-around.items-start.py-12.px-12
      = link_to "About", about_path, class: "tracking-widest text-5xl text-contrast mb-8"
      = link_to "Booking", contact_path, class: "tracking-widest text-5xl text-contrast mb-8"
      = link_to "Merch",store_path, class: "tracking-widest text-5xl text-contrast mb-8"

--- End of ./app/views/unsafe/common/_navbar.html.slim ---
.max-w-5xl.mx-auto.flex.w-full.pt-10.md:pt-36.min-h-screen
  .w-full.px-12.md:px-0
    .text-2xl.font-bold.mb-6.text-contrast
      | Contact us!

    = simple_form_for @contact, url: send_message_path, method: :post do |field|
      .text-input.mb-3
        = field.input :full_name, label: "Name", placeholder: "Name"
      .text-input.mb-3
        = field.input :email, label: "Email", placeholder: "Email"
      .text-input.mb-3.hidden
        = field.input :nickname
      .text-input.mb-3
        = field.input :content, as: :text, label: "Message", placeholder: "Message", input_html: { rows: 5 }
      = field.submit "Send", class: "btn btn-primary"

--- End of ./app/views/unsafe/contact.html.slim ---
.w-screen.h-screen.bg-cover.bg-center style="background-image: linear-gradient(rgba(0,0,0,0.7), rgba(0,0,0,0.2)), url('#{image_path "unsafe/home.jpg", class: "w-full h-screen object-cover"}')"

.w-full.flex.cursor-default.items-center.flex-col.top-0.pt-12.absolute
  = link_to root_path, class: "flex flex-col items-center text-center transition duration-500 w-full", data: { "scroll-target": "head" } do
    = image_tag("#{Current.store.slug}/logo_white.png", class: "mb-6 h-20 md:h-48")
    p.text-contrast.text-base.md:text-3xl.font-unsafe.text-primary METAL HARDCORE FROM NANTES

main.mx-auto.max-w-2xl.px-4.pt-12.lg:max-w-7xl.lg:px-8
  section.mt-6.lg:col-span-2.lg:mt-0.xl:col-span-3[aria-labelledby="product-heading"]
    h2#product-heading.sr-only
      | Products
    .grid.grid-cols-2.gap-4.sm:grid-cols-2.sm:gap-x-6.sm:gap-y-10.lg:gap-x-8.xl:grid-cols-3
      - @items.each do |item|
        = render "stores/card", item:

--- End of ./app/views/unsafe/home.html.slim ---
# frozen_string_literal: true

class DeviseCreateUsers < ActiveRecord::Migration[7.0]
  def change
    create_table :users do |t|
      ## Database authenticatable
      t.string :email,              null: false, default: ""
      t.string :encrypted_password, null: false, default: ""

      ## Recoverable
      t.string   :reset_password_token
      t.datetime :reset_password_sent_at

      ## Rememberable
      t.datetime :remember_created_at

      ## Trackable
      # t.integer  :sign_in_count, default: 0, null: false
      # t.datetime :current_sign_in_at
      # t.datetime :last_sign_in_at
      # t.string   :current_sign_in_ip
      # t.string   :last_sign_in_ip

      ## Confirmable
      # t.string   :confirmation_token
      # t.datetime :confirmed_at
      # t.datetime :confirmation_sent_at
      # t.string   :unconfirmed_email # Only if using reconfirmable

      ## Lockable
      # t.integer  :failed_attempts, default: 0, null: false # Only if lock strategy is :failed_attempts
      # t.string   :unlock_token # Only if unlock strategy is :email or :both
      # t.datetime :locked_at

      t.string :first_name
      t.string :last_name
      t.string :avater_url

      t.timestamps null: false
    end

    add_index :users, :email,                unique: true
    add_index :users, :reset_password_token, unique: true
    # add_index :users, :confirmation_token,   unique: true
    # add_index :users, :unlock_token,         unique: true
  end
end

--- End of ./db/migrate/20231029211016_devise_create_users.rb ---
class CreateStores < ActiveRecord::Migration[7.0]
  def change
    create_table :stores do |t|
      t.string :name
      t.string :domain
      t.string :slug

      t.references :admin, null: false, foreign_key: { to_table: :users }

      t.timestamps
    end
  end
end

--- End of ./db/migrate/20231029214657_create_stores.rb ---
class AddRoleToUsers < ActiveRecord::Migration[7.0]
  def change
    add_column :users, :role, :string
  end
end

--- End of ./db/migrate/20231029214732_add_role_to_users.rb ---
class CreateCategories < ActiveRecord::Migration[7.0]
  def change
    create_table :categories do |t|
      t.string :name
      t.references :store, null: false, foreign_key: true

      t.timestamps
    end
  end
end

--- End of ./db/migrate/20231029221337_create_categories.rb ---
class CreateItems < ActiveRecord::Migration[7.0]
  def change
    create_table :items do |t|
      t.string :name
      t.integer :price_cents
      t.string :price_currency
      t.references :store, null: false, foreign_key: true
      t.integer :stock
      t.integer :weight
      t.integer :length
      t.integer :width
      t.integer :height

      t.timestamps
    end
  end
end

--- End of ./db/migrate/20231029221429_create_items.rb ---
# This migration comes from active_storage (originally 20170806125915)
class CreateActiveStorageTables < ActiveRecord::Migration[5.2]
  def change
    # Use Active Record's configured type for primary and foreign keys
    primary_key_type, foreign_key_type = primary_and_foreign_key_types

    create_table :active_storage_blobs, id: primary_key_type do |t|
      t.string   :key,          null: false
      t.string   :filename,     null: false
      t.string   :content_type
      t.text     :metadata
      t.string   :service_name, null: false
      t.bigint   :byte_size,    null: false
      t.string   :checksum

      if connection.supports_datetime_with_precision?
        t.datetime :created_at, precision: 6, null: false
      else
        t.datetime :created_at, null: false
      end

      t.index [ :key ], unique: true
    end

    create_table :active_storage_attachments, id: primary_key_type do |t|
      t.string     :name,     null: false
      t.references :record,   null: false, polymorphic: true, index: false, type: foreign_key_type
      t.references :blob,     null: false, type: foreign_key_type

      if connection.supports_datetime_with_precision?
        t.datetime :created_at, precision: 6, null: false
      else
        t.datetime :created_at, null: false
      end

      t.index [ :record_type, :record_id, :name, :blob_id ], name: :index_active_storage_attachments_uniqueness, unique: true
      t.foreign_key :active_storage_blobs, column: :blob_id
    end

    create_table :active_storage_variant_records, id: primary_key_type do |t|
      t.belongs_to :blob, null: false, index: false, type: foreign_key_type
      t.string :variation_digest, null: false

      t.index [ :blob_id, :variation_digest ], name: :index_active_storage_variant_records_uniqueness, unique: true
      t.foreign_key :active_storage_blobs, column: :blob_id
    end
  end

  private
    def primary_and_foreign_key_types
      config = Rails.configuration.generators
      setting = config.options[config.orm][:primary_key_type]
      primary_key_type = setting || :primary_key
      foreign_key_type = setting || :bigint
      [primary_key_type, foreign_key_type]
    end
end

--- End of ./db/migrate/20231029221513_create_active_storage_tables.active_storage.rb ---
class AddMetasToStore < ActiveRecord::Migration[7.0]
  def change
    add_column :stores, :meta_title, :string
    add_column :stores, :meta_description, :string
    add_column :stores, :meta_image, :string
  end
end

--- End of ./db/migrate/20231030193112_add_metas_to_store.rb ---
class AddRsUrl < ActiveRecord::Migration[7.0]
  def change
    add_column :stores, :instagram_url, :string
    add_column :stores, :facebook_url, :string
  end
end

--- End of ./db/migrate/20231030211402_add_rs_url.rb ---
class AddInfosToItems < ActiveRecord::Migration[7.0]
  def change
    add_column :items, :description, :string
  end
end

--- End of ./db/migrate/20231030222703_add_infos_to_items.rb ---
class AddCategoryToItems < ActiveRecord::Migration[7.0]
  def change
    add_reference :items, :category, foreign_key: true
    # Item.find_each {|item| item.category_id = 1}
  end
end

--- End of ./db/migrate/20231031090557_add_category_to_items.rb ---
class AddCategoryNullFalseToItem < ActiveRecord::Migration[7.0]
  def change
    change_column_null :items, :category_id, false
  end
end

--- End of ./db/migrate/20231031091203_add_category_null_false_to_item.rb ---
class CreateOrder < ActiveRecord::Migration[7.0]
  def change
    create_table :orders do |t|
      t.monetize :amount
      t.string :status
      t.references :user, null: false, foreign_key: true

      t.timestamps
    end
  end
end

--- End of ./db/migrate/20231031202239_create_order.rb ---
class CreateOrderItem < ActiveRecord::Migration[7.0]
  def change
    create_table :order_items do |t|
      t.references :order, null: false, foreign_key: true
      t.references :item, null: false, foreign_key: true

      t.timestamps
    end
  end
end

--- End of ./db/migrate/20231031202336_create_order_item.rb ---
class AddPaymentMethods < ActiveRecord::Migration[7.0]
  def change
  end
end

--- End of ./db/migrate/20231031205509_add_payment_methods.rb ---
class CreatePaymentMethods < ActiveRecord::Migration[7.0]
  def change
    create_table :payment_methods do |t|
      t.string :name
      t.string :description
      t.monetize :price
      t.references :store, null: false, foreign_key: true

      t.timestamps
    end
  end
end

--- End of ./db/migrate/20231031205539_create_payment_methods.rb ---
class AddPaymentMethodToORder < ActiveRecord::Migration[7.0]
  def change
    add_reference :orders, :payment_method, null: false, foreign_key: true
  end
end

--- End of ./db/migrate/20231031232551_add_payment_method_to_o_rder.rb ---
class AddCheckoutSeesionIdToORders < ActiveRecord::Migration[7.0]
  def change
    add_column :orders, :checkout_session_id, :string
  end
end

--- End of ./db/migrate/20231101191528_add_checkout_seesion_id_to_o_rders.rb ---
class AddShippingAddressToOrders < ActiveRecord::Migration[7.0]
  def change
    add_column :orders, :shipping_address, :string
  end
end

--- End of ./db/migrate/20231101230823_add_shipping_address_to_orders.rb ---
class AddQuantityToOrderItems < ActiveRecord::Migration[7.0]
  def change
    add_column :order_items, :quantity, :integer, default: 0
  end
end

--- End of ./db/migrate/20231101233147_add_quantity_to_order_items.rb ---
class AddAboutTextToStores < ActiveRecord::Migration[7.0]
  def change
    add_column :stores, :about_text, :string
  end
end

--- End of ./db/migrate/20231107225706_add_about_text_to_stores.rb ---
class AddActiveToItem < ActiveRecord::Migration[7.0]
  def change
    add_column :items, :active, :boolean
  end
end

--- End of ./db/migrate/20231107230646_add_active_to_item.rb ---
# This migration comes from action_text (originally 20180528164100)
class CreateActionTextTables < ActiveRecord::Migration[6.0]
  def change
    # Use Active Record's configured type for primary and foreign keys
    primary_key_type, foreign_key_type = primary_and_foreign_key_types

    create_table :action_text_rich_texts, id: primary_key_type do |t|
      t.string     :name, null: false
      t.text       :body, size: :long
      t.references :record, null: false, polymorphic: true, index: false, type: foreign_key_type

      t.timestamps

      t.index [ :record_type, :record_id, :name ], name: "index_action_text_rich_texts_uniqueness", unique: true
    end
  end

  private
    def primary_and_foreign_key_types
      config = Rails.configuration.generators
      setting = config.options[config.orm][:primary_key_type]
      primary_key_type = setting || :primary_key
      foreign_key_type = setting || :bigint
      [primary_key_type, foreign_key_type]
    end
end

--- End of ./db/migrate/20231108215033_create_action_text_tables.action_text.rb ---
class RemoveAboutTextFromStores < ActiveRecord::Migration[7.0]
  def up
    Store.find_each do |store|
      store.update(about: store.about_text)
    end
  end

  def down
    Store.find_each do |store|
      store.update(about_text: store.about)
      store.update(about: nil)
    end
  end
end

--- End of ./db/migrate/20231108223444_remove_about_text_from_stores.rb ---
class RenamePaymentMethodToShippingMethod < ActiveRecord::Migration[7.0]
  def change
    rename_table :payment_methods, :shipping_methods
  end
end

--- End of ./db/migrate/20231109102610_rename_payment_method_to_shipping_method.rb ---
class ChangePaymentMethodIdInOrders < ActiveRecord::Migration[7.0]
  def change
    rename_column :orders, :payment_method_id, :shipping_method_id
    #Ex:- rename_column("admin_users", "pasword","hashed_pasword")
  end
end

--- End of ./db/migrate/20231109104249_change_payment_method_id_in_orders.rb ---
class AddStatusToItems < ActiveRecord::Migration[7.0]
  def change
    add_column :items, :status, :string, default: :active
  end
end

--- End of ./db/migrate/20231110192100_add_status_to_items.rb ---
class RemoveActiveFromItems < ActiveRecord::Migration[7.0]
  def change
    remove_column :items, :active, :boolean
  end
end

--- End of ./db/migrate/20231110193905_remove_active_from_items.rb ---
class AddWeigthToShippingMethods < ActiveRecord::Migration[7.0]
  def change
    add_column :shipping_methods, :max_weight, :integer
  end
end

--- End of ./db/migrate/20231114180428_add_weigth_to_shipping_methods.rb ---
class CreateItemShipments < ActiveRecord::Migration[7.0]
  def change
    create_table :item_shipments do |t|
      t.references :item, null: false, foreign_key: true
      t.references :shipping_method, null: false, foreign_key: true

      t.timestamps
    end
  end
end

--- End of ./db/migrate/20231117213837_create_item_shipments.rb ---
class AddServiceToShippingMethods < ActiveRecord::Migration[7.0]
  def change
    add_column :shipping_methods, :service_name, :string
  end
end

--- End of ./db/migrate/20231117221537_add_service_to_shipping_methods.rb ---
class AddStripeKeyToStore < ActiveRecord::Migration[7.0]
  def change
    add_column :stores, :stripe_publishable_key, :text
    add_column :stores, :stripe_secret_key, :text
    add_column :stores, :stripe_webhook_secret_key, :text
  end
end

--- End of ./db/migrate/20231122133835_add_stripe_key_to_store.rb ---
class AddFilterableView < ActiveRecord::Migration[7.0]
  def change
    create_table :filterable_views do |t|
      t.string :title, null: false
      t.json :filters, null: false, default: []
      t.string :conjonction, null: false, default: "and"
      t.json :sort, null: false, default: {}
      t.string :model, null: false
      t.string :context_name
      t.references :owner, null: false, polymorphic: true

      t.timestamps
    end
  end
end

--- End of ./db/migrate/20231122172215_add_filterable_view.rb ---
class CreateSpecification < ActiveRecord::Migration[7.0]
  def change
    create_table :specifications do |t|
      t.string :name

      t.timestamps
    end
  end
end

--- End of ./db/migrate/20231123111604_create_specification.rb ---
class CreateItemSpecification < ActiveRecord::Migration[7.0]
  def change
    create_table :item_specifications do |t|
      t.references :item, null: false, foreign_key: true
      t.references :specification, null: false, foreign_key: true

      t.timestamps
    end
  end
end

--- End of ./db/migrate/20231123111637_create_item_specification.rb ---
class AddStoreReferenceToSpecifications < ActiveRecord::Migration[7.0]
  def change
    add_reference :specifications, :store, null: false, foreign_key: true
  end
end

--- End of ./db/migrate/20231123112249_add_store_reference_to_specifications.rb ---
class AddHolidayToStores < ActiveRecord::Migration[7.0]
  def change
    add_column :stores, :holiday, :boolean, default: true
    add_column :stores, :holiday_sentence, :string, default: "Boutique en vacances"
  end
end

--- End of ./db/migrate/20231123130547_add_holiday_to_stores.rb ---
# This file is auto-generated from the current state of the database. Instead
# of editing this file, please use the migrations feature of Active Record to
# incrementally modify your database, and then regenerate this schema definition.
#
# This file is the source Rails uses to define your schema when running `bin/rails
# db:schema:load`. When creating a new database, `bin/rails db:schema:load` tends to
# be faster and is potentially less error prone than running all of your
# migrations from scratch. Old migrations may fail to apply correctly if those
# migrations use external dependencies or application code.
#
# It's strongly recommended that you check this file into your version control system.

ActiveRecord::Schema[7.0].define(version: 2023_11_23_130547) do
  # These are extensions that must be enabled in order to support this database
  enable_extension "plpgsql"

  create_table "action_text_rich_texts", force: :cascade do |t|
    t.string "name", null: false
    t.text "body"
    t.string "record_type", null: false
    t.bigint "record_id", null: false
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.index ["record_type", "record_id", "name"], name: "index_action_text_rich_texts_uniqueness", unique: true
  end

  create_table "active_storage_attachments", force: :cascade do |t|
    t.string "name", null: false
    t.string "record_type", null: false
    t.bigint "record_id", null: false
    t.bigint "blob_id", null: false
    t.datetime "created_at", null: false
    t.index ["blob_id"], name: "index_active_storage_attachments_on_blob_id"
    t.index ["record_type", "record_id", "name", "blob_id"], name: "index_active_storage_attachments_uniqueness", unique: true
  end

  create_table "active_storage_blobs", force: :cascade do |t|
    t.string "key", null: false
    t.string "filename", null: false
    t.string "content_type"
    t.text "metadata"
    t.string "service_name", null: false
    t.bigint "byte_size", null: false
    t.string "checksum"
    t.datetime "created_at", null: false
    t.index ["key"], name: "index_active_storage_blobs_on_key", unique: true
  end

  create_table "active_storage_variant_records", force: :cascade do |t|
    t.bigint "blob_id", null: false
    t.string "variation_digest", null: false
    t.index ["blob_id", "variation_digest"], name: "index_active_storage_variant_records_uniqueness", unique: true
  end

  create_table "categories", force: :cascade do |t|
    t.string "name"
    t.bigint "store_id", null: false
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.index ["store_id"], name: "index_categories_on_store_id"
  end

  create_table "filterable_views", force: :cascade do |t|
    t.string "title", null: false
    t.json "filters", default: [], null: false
    t.string "conjonction", default: "and", null: false
    t.json "sort", default: {}, null: false
    t.string "model", null: false
    t.string "context_name"
    t.string "owner_type", null: false
    t.bigint "owner_id", null: false
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.index ["owner_type", "owner_id"], name: "index_filterable_views_on_owner"
  end

  create_table "item_shipments", force: :cascade do |t|
    t.bigint "item_id", null: false
    t.bigint "shipping_method_id", null: false
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.index ["item_id"], name: "index_item_shipments_on_item_id"
    t.index ["shipping_method_id"], name: "index_item_shipments_on_shipping_method_id"
  end

  create_table "item_specifications", force: :cascade do |t|
    t.bigint "item_id", null: false
    t.bigint "specification_id", null: false
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.index ["item_id"], name: "index_item_specifications_on_item_id"
    t.index ["specification_id"], name: "index_item_specifications_on_specification_id"
  end

  create_table "items", force: :cascade do |t|
    t.string "name"
    t.integer "price_cents"
    t.string "price_currency"
    t.bigint "store_id", null: false
    t.integer "stock"
    t.integer "weight"
    t.integer "length"
    t.integer "width"
    t.integer "height"
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.string "description"
    t.bigint "category_id", null: false
    t.string "status", default: "active"
    t.index ["category_id"], name: "index_items_on_category_id"
    t.index ["store_id"], name: "index_items_on_store_id"
  end

  create_table "order_items", force: :cascade do |t|
    t.bigint "order_id", null: false
    t.bigint "item_id", null: false
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.integer "quantity", default: 0
    t.index ["item_id"], name: "index_order_items_on_item_id"
    t.index ["order_id"], name: "index_order_items_on_order_id"
  end

  create_table "orders", force: :cascade do |t|
    t.integer "amount_cents", default: 0, null: false
    t.string "amount_currency", default: "USD", null: false
    t.string "status"
    t.bigint "user_id", null: false
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.bigint "shipping_method_id", null: false
    t.string "checkout_session_id"
    t.string "shipping_address"
    t.index ["shipping_method_id"], name: "index_orders_on_shipping_method_id"
    t.index ["user_id"], name: "index_orders_on_user_id"
  end

  create_table "shipping_methods", force: :cascade do |t|
    t.string "name"
    t.string "description"
    t.integer "price_cents", default: 0, null: false
    t.string "price_currency", default: "USD", null: false
    t.bigint "store_id", null: false
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.integer "max_weight"
    t.string "service_name"
    t.index ["store_id"], name: "index_shipping_methods_on_store_id"
  end

  create_table "specifications", force: :cascade do |t|
    t.string "name"
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.bigint "store_id", null: false
    t.index ["store_id"], name: "index_specifications_on_store_id"
  end

  create_table "stores", force: :cascade do |t|
    t.string "name"
    t.string "domain"
    t.string "slug"
    t.bigint "admin_id", null: false
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.string "meta_title"
    t.string "meta_description"
    t.string "meta_image"
    t.string "instagram_url"
    t.string "facebook_url"
    t.string "about_text"
    t.text "stripe_publishable_key"
    t.text "stripe_secret_key"
    t.text "stripe_webhook_secret_key"
    t.boolean "holiday", default: true
    t.string "holiday_sentence", default: "Boutique en vacances"
    t.index ["admin_id"], name: "index_stores_on_admin_id"
  end

  create_table "users", force: :cascade do |t|
    t.string "email", default: "", null: false
    t.string "encrypted_password", default: "", null: false
    t.string "reset_password_token"
    t.datetime "reset_password_sent_at"
    t.datetime "remember_created_at"
    t.string "first_name"
    t.string "last_name"
    t.string "avater_url"
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.string "role"
    t.index ["email"], name: "index_users_on_email", unique: true
    t.index ["reset_password_token"], name: "index_users_on_reset_password_token", unique: true
  end

  add_foreign_key "active_storage_attachments", "active_storage_blobs", column: "blob_id"
  add_foreign_key "active_storage_variant_records", "active_storage_blobs", column: "blob_id"
  add_foreign_key "categories", "stores"
  add_foreign_key "item_shipments", "items"
  add_foreign_key "item_shipments", "shipping_methods"
  add_foreign_key "item_specifications", "items"
  add_foreign_key "item_specifications", "specifications"
  add_foreign_key "items", "categories"
  add_foreign_key "items", "stores"
  add_foreign_key "order_items", "items"
  add_foreign_key "order_items", "orders"
  add_foreign_key "orders", "shipping_methods"
  add_foreign_key "orders", "users"
  add_foreign_key "shipping_methods", "stores"
  add_foreign_key "specifications", "stores"
  add_foreign_key "stores", "users", column: "admin_id"
end

--- End of ./db/schema.rb ---
require "open-uri"

return unless Rails.env.development?

OrderItem.destroy_all
Order.destroy_all
ShippingMethod.destroy_all
Specification.destroy_all
Item.destroy_all
Category.destroy_all
Store.destroy_all
User.destroy_all

admin_localhost = User.create(first_name: "Ted", last_name: "Lasso", email: "admin@example.fr", password: "123456", role: "admin")
clemence = User.create(first_name: "Clémence", last_name: "Porcheret", email: "hello@lecheveublanc.fr", password: "123456", role: "admin")
unsafe = User.create(first_name: "Tao", last_name: "Guerreiro", email: "hello@unsafehxc.fr", password: "123456", role: "admin")
salome = User.create(first_name: "Salomé", last_name: "Dubart", email: "hello@studioanemone.fr", password: "123456", role: "admin")
flo = User.create(first_name: "Flo", last_name: "Queen", email: "florent.guilbaud@gmail.com", password: "123456", role: "queen")
store_one = clemence.stores.create({
  domain: "localhost",
  name: "Le Cheveu Blanc",
  slug: "lecheveublanc",
  meta_title: "Le Cheveu Blanc",
  meta_description: "Illustrations militantes from Nantes",
  meta_image: "lecheveublanc/meta_image.jpg",
  instagram_url: "https://www.instagram.com/le_cheveu_blanc/",
  facebook_url: "https://www.facebook.com/lecheveublanc/",
  stripe_publishable_key: YAML.load_file("db/stripe_key.yml")["stripe_publishable_key"],
  stripe_secret_key: YAML.load_file("db/stripe_key.yml")["stripe_secret_key"],
  stripe_webhook_secret_key: YAML.load_file("db/stripe_key.yml")["stripe_webhook_secret_key"]
})

store_two = unsafe.stores.create({
  domain: "ngrok.io",
  name: "Unsafe",
  slug: "unsafe",
  meta_title: "Unsafe",
  meta_description: "Metal Hardcore from Nantes",
  meta_image: "unsafe/meta_image.jpg",
  instagram_url: "https://www.instagram.com/unsafehc/",
  facebook_url: "https://www.facebook.com/unsafehc/"
})

store_three = salome.stores.create({
  domain: "locdalhost",
  name: "Studio Anémone",
  slug: "anemone",
  meta_title: "Studio Anémone",
  meta_description: "Céramique from Vannes",
  meta_image: "anemone/meta_image.jpg",
  instagram_url: "https://www.instagram.com/studio.anemone/",
  facebook_url: "https://www.facebook.com/"
})

[store_one, store_two, store_three].each do |store|
  categories = []
  [:stickers, :print, :illustration].each do |category|
    category = Category.create({
      store: store,
      name: category
    })

    categories << category
  end

  10.times do
    file = URI.open("https://source.unsplash.com/random/300x300/?illustration")
    file_2 = URI.open("https://loremflickr.com/320/240")
    file_3 = URI.open("https://picsum.photos/200/300")
    item = Item.new({
      name: Faker::Commerce.product_name,
      description:  Faker::Commerce.material + " " + Faker::Commerce.product_name,
      price_cents: Faker::Number.number(digits: 5),
      price_currency: "EUR",
      store: store,
      active: true,
      category: categories.sample,
      stock: Faker::Number.between(from: 0, to: 100),
      weight: Faker::Number.decimal(l_digits: 2, r_digits: 2),
      length: Faker::Number.between(from: 1, to: 100),
      width: Faker::Number.between(from: 1, to: 100),
      height: Faker::Number.between(from: 1, to: 100)
    })
    item.photos.attach([
      { io: file, filename: "nes.png", content_type: "image/png" },
      { io: file_2, filename: "nes_2.png", content_type: "image/png" },
      { io: file_3, filename: "nes_3.png", content_type: "image/png" }
    ])
    item.save
  end

  ShippingMethod.create(store: store, name: "UPS", description: "Dans les 48h", price: 8, max_weight: 1000000)
  ShippingMethod.create(store: store, name: "Mondial relay", description: "entre 2 à 5 jours", price: 4, max_weight: 1000000)
  ShippingMethod.create(store: store, name: "Remise en main propre", description: "Très propre", price: 0, max_weight: 1000000)
end

--- End of ./db/seeds.rb ---
stripe_publishable_key: pk_test_otexrIrhuR2bjrryObQr3iia00ffaksBt8
stripe_secret_key: sk_test_mfYFgLhoqKlXt12TvjC8Gjv300lLsizWFS
stripe_webhook_secret_key: whsec_iwQkaBklp41StvQFcRHqaiCZMFjlc9FA

--- End of ./db/stripe_key.yml ---
= tag.turbo_frame id: filterable.turbo_frame_id do
  .w-max
    = form_with url: submit_path,
                data: { controller: "filterable", filterable_filters_path_value: filterable_filters_path(filterable.model) },
                id: filterable.form_id,
                method: :get do |f|
      = current_sort_input(f)

      = f.hidden_field "filterable[submit_path]", value: submit_path
      = f.hidden_field "filterable[context_name]", value: filterable_context.name

      .px-5.py-3
        - filters.each_with_index do |filter, index|
          .flex.gap-2.mb-1
            .w-20.grow.shrink-0.flex.justify-center.items-center.text-sm
              - current_conjonction = filterable_params[:conjonction] || "and"
              - if index.zero?
                span.w-full.pl-3 = t("filterable.when")
              - elsif index == 1
                = f.select "filterable[conjonction]",
                          [[t("filterable.and"), "and"], [t("filterable.or"), "or"]],
                          { selected: current_conjonction },
                          class: [filterable_input_classes, "cursor-pointer"],
                          data: { action: "change->filterable#updateConjonction"}
              - else
                span.w-full.pl-5 data-filterable-target="conjonction"
                  = t("filterable.#{current_conjonction}")

            = f.select "filterable[filters][][column_name]",
                      filterable.columns_for_select,
                      { selected: filter.column.name },
                      class: [filterable_input_classes, "cursor-pointer"],
                      style: "flex: content;",
                      data: { action: "change->filterable#updateColumn", filterable_index_param: index }

            = f.select "filterable[filters][][operator]",
                      operators_for_select(filter),
                      { selected: filter.operator },
                      class: [filterable_input_classes, "cursor-pointer"],
                      data: { action: "change->filterable#updateOperator", filterable_index_param: index }

            = filterable_value_input(f, filter, index)

            .w-5.grow.shrink-0.flex.justify-center.items-center
              - if true || index.positive?
                = button_tag type: "button", class: "text-red-500", data: { action: "click->filterable#removeFilter" } do
                  i.far.fa-trash-can.fa-fw.fa-sm
        .mt-2
          = button_tag type: "submit",
                      formaction: filterable_filters_path(filterable.model),
                      formmethod: :post,
                      class: "text-sm text-gray-900 font-semibold hover:underline" do
            i.fas.fa-plus.fa-fw.fa-sm.mr-1
            = t("filterable.add_filter")

      .flex.justify-between.items-center.gap-5.bg-gray-50.px-5.py-3

        = with_view_form

        .text-right.whitespace-nowrap
          = link_to t("filterable.reset_filters"), submit_path, class: "mr-2 text-sm text-gray-900 opacity-70 font-semibold hover:underline hover:opacity-100",  data: { turbo_frame: "_top" }
          = f.submit t("filterable.search"), class: "btn btn-secondary",  data: { turbo_frame: "_top", filterable_target: "submitBtn" }

--- End of ./lib/filterable_lib/filterable/components/filters_form_component/filters_form_component.html.slim ---
# frozen_string_literal: true

module Filterable
  module Components
    class FiltersFormComponent < ApplicationComponent
      renders_one :view_form, -> { ViewFormComponent.new(filterable_context: filterable_context) }

      def initialize(filters:, filterable_context:)
        super
        @filters = filters
        @filterable_context = filterable_context
      end

      private

      attr_reader :filters, :filterable_context

      delegate :filterable_params, to: :helpers
      delegate :filterable, :submit_path, to: :filterable_context

      def current_sort_input(form)
        return unless (current_sort = filterable_params[:sort])

        column_name, order = current_sort.to_h.entries.first
        form.hidden_field "filterable[sort][#{column_name}]",
                          value: order,
                          data: { column_name: column_name },
                          id: "filterable_sort"
      end

      def filterable_input_classes
        <<-TXT
          w-full min-w-fit block shadow-sm border-gray-300 rounded-md
          focus:ring-primary-500 focus:border-primary-500
          sm:text-sm
        TXT
      end

      def operators_for_select(filter)
        filter.operators_options.map do |(label, operator)|
          needs_input = filter.class.operator_needs_input?(operator)
          [label, operator, { "data-needs-input": needs_input }]
        end
      end

      def filterable_value_input(form, filter, index) # rubocop:disable Metrics/MethodLength
        input_name = "filterable[filters][][value]"
        input_options = { class: filterable_input_classes, data: { value_input_index: index } }
        input_options.merge!(style: "display: none;", disabled: true) unless filter.needs_input?

        if filter.type.in?([:date, :datetime])
          input_options[:value] = filter.value&.to_date
          form.date_field input_name, input_options
        elsif filter.needs_select_input?
          input_options[:class] = [filterable_input_classes, "cursor-pointer"]
          form.select input_name, filter.select_options, { selected: filter.value }, input_options
        else
          input_options[:value] = filter.value
          form.text_field input_name, input_options
        end
      end
    end
  end
end

--- End of ./lib/filterable_lib/filterable/components/filters_form_component.rb ---
# frozen_string_literal: true

module Filterable
  module Components
    class ShowTurboStreamComponent < ApplicationComponent
      def initialize(filters:, filterable_context:)
        super
        @filters = filters
        @filterable_context = filterable_context
      end

      def call
        helpers.turbo_stream.replace(model.filterable.turbo_frame_id) do
          render FiltersFormComponent.new(filters: filters, filterable_context: filterable_context)
        end
      end

      private

      attr_reader :filters, :filterable_context

      delegate :model, to: :filterable_context
    end
  end
end

--- End of ./lib/filterable_lib/filterable/components/show_turbo_stream_component.rb ---
# frozen_string_literal: true

module Filterable
  module Components
    class SortButtonComponent < ApplicationComponent
      renders_one :inner_content

      def initialize(model:, column:)
        super
        @model = model
        @column = column
      end

      def call
        return inner_content unless column.to_s.in?(model.column_names)

        form_id = model.filterable.form_id
        icon_fa_class = filterable_sort_icon(column)
        content_tag(:div, nil, {
                      class: "h-full cursor-pointer flex justify-between",
                      data: {
                        controller: "filterable-sort",
                        filterable_sort_form_id_value: form_id,
                        filterable_sort_column_name_value: column,
                        action: "click->filterable-sort#sortColumn"
                      }
                    }) do
          concat inner_content
          concat content_tag(:i, nil, class: "ml-2 fas fa-fw #{icon_fa_class}")
        end
      end

      private

      attr_reader :model, :column

      delegate :filterable_params, to: :helpers

      def filterable_sort_icon(column)
        current_sort = filterable_params[:sort]
        column_name, order = current_sort.to_h.entries.first if current_sort
        return "fa-sort" unless current_sort && column_name == column.to_s

        order == "asc" ? "fa-sort-down" : "fa-sort-up"
      end
    end
  end
end

--- End of ./lib/filterable_lib/filterable/components/sort_button_component.rb ---
div class="w-18 flex justify-between py-2"
  = hidden_field_tag "filterable_view[model]", model
  = hidden_field_tag "filterable_view[owner_type]", views_owner.model_name
  = hidden_field_tag "filterable_view[owner_id]", views_owner.id
  = hidden_field_tag "filterable_view[context_name]", filterable_context.name

  = text_field_tag "filterable_view[title]", nil, class: view_title_input_classes, placeholder: t(".save")

  = button_tag type: "submit",
               class: "ml-2 px-2 btn btn-primary-light",
               formaction: filterable_views_path(model),
               formmethod: "POST",
               data: { turbo_frame: "_top" } do
    i class="far fa-fw fa-save"

--- End of ./lib/filterable_lib/filterable/components/view_form_component/view_form_component.html.slim ---
fr:
  save: Sauvegarder
en:
  save: Save

--- End of ./lib/filterable_lib/filterable/components/view_form_component/view_form_component.yml ---
# frozen_string_literal: true

module Filterable
  module Components
    class ViewFormComponent < ApplicationComponent
      def initialize(filterable_context:)
        super
        @filterable_context = filterable_context
      end

      private

      attr_reader :filterable_context

      delegate :views_owner, :model, to: :filterable_context

      def view_title_input_classes
        <<~TXT
          grow px-2 py-1 text-sm shadow-sm border-gray-300 rounded-md
          focus:ring-indigo-200 focus:border-indigo-200
          placeholder:italic placeholder:text-slate-400
        TXT
      end
    end
  end
end

--- End of ./lib/filterable_lib/filterable/components/view_form_component.rb ---
div class="relative z-[2]" data-controller="filterable-wrapper" data-filterable-wrapper-hidden-class="hidden"
  div class=(wrapper_classes)
    = button_tag label_text,
                 type: "button",
                 title: label_text,
                 class: filters_btn_classes,
                 data: { action: "click->filterable-wrapper#openFilters" }

    - if can_use_views? && views.present?
      div class="relative inline-block text-left h-full"
        = button_tag type: "button",
                     class: views_btn_classes,
                     data: { action: "click->filterable-wrapper#openViews" } do
          div class="flex justify-center items-center text-gray-400"
            i class="far fa-fw fa-chevron-down"

        section[
          data-filterable-wrapper-target="viewsList"
          class="hidden absolute left-0 z-10 mt-2 w-max min-w-[8rem] max-w-[24rem] origin-top-right rounded-md bg-white shadow-lg ring-1 ring-gray-200 focus:outline-none"
          role="menu"
          aria-orientation="vertical"
          aria-labelledby="menu-button"
          tabindex="-1"
        ]
          div class="" role="none"
            - views.each do |view|
              div class="flex justify-between items-center group text-sm hover:bg-gray-50 first:rounded-t-md last:rounded-b-md"
                = link_to view.title,
                          view.to_path(submit_path),
                          id: dom_id(view),
                          class: ["grow text-gray-700 block px-4 py-2", ("font-bold" if view.id === selected_view_id)],
                          role: "menuitem",
                          tabindex: "-1"
                = button_to filterable_view_path(view), method: :delete, class: "invisible p-2 group-hover:visible" do
                  i class="fal fa-fw fa-trash-alt text-red-400 hover:text-red-600"

  section[
    data-filterable-wrapper-target="filtersForm"
    class="absolute top-[-2px] left-[-2px] bg-white rounded-md shadow-md ring-1 ring-gray-900 ring-opacity-5 hidden overflow-hidden"
  ]
    header.px-5.py-3.font-medium.text-gray-900.border-b.flex.justify-between.items-center
      = t("filterable.filters")
      = button_tag type: "button",
                   class: "px-2 text-gray-500 hover:text-gray-800",
                   data: { filterable_wrapper_target: "closeFiltersFormBtn" } do
        i.far.fa-times.pointer-events-none
    = with_filters_form

--- End of ./lib/filterable_lib/filterable/components/wrapper_component/wrapper_component.html.slim ---
# frozen_string_literal: true

module Filterable
  module Components
    class WrapperComponent < ApplicationComponent
      renders_one :filters_form, lambda {
        FiltersFormComponent.new(filters: filters, filterable_context: filterable_context)
      }

      def initialize(filters:, filterable_context:)
        super
        @filters = filters
        @filterable_context = filterable_context
      end

      private

      attr_reader :filters, :model, :submit_path, :filterable_context, :views_owner

      delegate :filterable_params, :filterable_active_filters?, to: :helpers
      delegate :model, :submit_path, :views_owner, to: :filterable_context

      def can_use_views?
        views_owner.present?
      end

      def label_text
        return selected_view.title if selected_view
        return I18n.t("filterable.filter") unless filterable_active_filters?

        I18n.t("filterable.active_filters", count: filterable_params[:filters].length)
      end

      def views
        @views ||= View.for_context(filterable_context).order(:title)
      end

      def selected_view
        @selected_view ||= views.find { |view| view.id == selected_view_id }
      end

      def selected_view_id
        filterable_params[:selected_view_id]&.to_i
      end

      def wrapper_classes
        ["h-full", Filterable.btn_classes]
      end

      def filters_btn_classes
        [
          "px-3 py-2 cursor-pointer rounded-l-md \
          max-w-[16rem] whitespace-nowrap overflow-hidden text-ellipsis \
          hover:bg-gray-50",
          ("rounded-r-md" unless can_use_views? && views.present?),
          (Filterable.btn_active_classes if filterable_active_filters?)
        ]
      end

      def views_btn_classes
        [
          <<~TXT,
            border-l px-2 inline-flex w-full justify-center items-center h-full cursor-pointer
            rounded-r-md
            hover:bg-gray-50
          TXT
          (Filterable.btn_active_classes if filterable_active_filters?)
        ]
      end
    end
  end
end
